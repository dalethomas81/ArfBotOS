<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CoordinateFrame" Id="{06fc1aa1-c0e2-4833-a6e2-014df8199a9a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CoordinateFrame
VAR_OUTPUT
	//ip : ITComObject;
END_VAR
VAR
	{attribute 'TcInitSymbol'}
	{attribute 'displaymode':='hex'}
	nObjId : OTCID;
	iid : IID := TC_GLOBAL_IID_LIST.IID_ITComObject;
	hrInit : HRESULT;
	ip : ITComObject;
END_VAR
VAR
	ActualTcpOffset: DUT_Coord_Ref;
	DesiredTcpOffset: DUT_Coord_Ref:=(X:=10.0, Y:=11.0, Z:=12.0, A:=13.0, B:=14.0, C:=15.0);
	GetTcpOffset: BOOL;
	SetTcpOffset: BOOL;
	result: HRESULT;
	nData:UDINT; pData:LWORD;
	pid: PTCID:=16#05010110;//16#00000002;
	objName: SINT; nameLen: UDINT;
	pState: TCOM_STATE;
	refCount: UDINT;
	_i: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GetTcpOffset THEN
	GetTcpOffset := FALSE;
	result := ip.TcGetObjPara(pid:=pid, nData:=nData, pData:=pData, pgp:=0);//0x05010110
	//result := ip.TcGetObjState(pState:=ADR(pState));
	//refCount:=ip.TcAddRef();
	//result := ip.TcGetObjectName(objName:=ADR(objName),nameLen:=nameLen);
	//result := ip.TcGetObjPara(pid:=pid, nData:=nData, pData:=pData, pgp:=0);//0x05010110
	//memcpy(destAddr:=ADR(ActualTcpOffset.X),srcAddr:=pData,n:=nData);
// 	result := fbTcBaseModule.TcGetObjPara(pid:=16#05010110, nData:=SIZEOF(ActualTcpOffset.X), pData:=ADR(ActualTcpOffset.X), pgp:=0);
// 	result := fbTcBaseModule.TcGetObjPara(pid:=16#05010111, nData:=SIZEOF(ActualTcpOffset.Y), pData:=ADR(ActualTcpOffset.Y), pgp:=0);
// 	result := fbTcBaseModule.TcGetObjPara(pid:=16#05010112, nData:=SIZEOF(ActualTcpOffset.Z), pData:=ADR(ActualTcpOffset.Z), pgp:=0);
// 	result := fbTcBaseModule.TcGetObjPara(pid:=16#05010113, nData:=SIZEOF(ActualTcpOffset.A), pData:=ADR(ActualTcpOffset.A), pgp:=0);
// 	result := fbTcBaseModule.TcGetObjPara(pid:=16#05010114, nData:=SIZEOF(ActualTcpOffset.B), pData:=ADR(ActualTcpOffset.B), pgp:=0);
// 	result := fbTcBaseModule.TcGetObjPara(pid:=16#05010115, nData:=SIZEOF(ActualTcpOffset.C), pData:=ADR(ActualTcpOffset.C), pgp:=0);
END_IF
IF SetTcpOffset THEN
	SetTcpOffset:= FALSE;
	//ip.TcQueryInterface(iid:=iid,pipItf:=ADR(ip));
	result := ip.TcSetObjPara(pid:=pid, nData:=SIZEOF(DesiredTcpOffset.X), pData:=ADR(DesiredTcpOffset.X), pgp:=0);
// 	result := fbTcBaseModule.TcSetObjPara(pid:=16#05010110, nData:=SIZEOF(DesiredTcpOffset.X), pData:=ADR(DesiredTcpOffset.X), pgp:=0);
// 	result := fbTcBaseModule.TcSetObjPara(pid:=16#05010111, nData:=SIZEOF(DesiredTcpOffset.Y), pData:=ADR(DesiredTcpOffset.Y), pgp:=0);
// 	result := fbTcBaseModule.TcSetObjPara(pid:=16#05010112, nData:=SIZEOF(DesiredTcpOffset.Z), pData:=ADR(DesiredTcpOffset.Z), pgp:=0);
// 	result := fbTcBaseModule.TcSetObjPara(pid:=16#05010113, nData:=SIZEOF(DesiredTcpOffset.A), pData:=ADR(DesiredTcpOffset.A), pgp:=0);
// 	result := fbTcBaseModule.TcSetObjPara(pid:=16#05010114, nData:=SIZEOF(DesiredTcpOffset.B), pData:=ADR(DesiredTcpOffset.B), pgp:=0);
// 	result := fbTcBaseModule.TcSetObjPara(pid:=16#05010115, nData:=SIZEOF(DesiredTcpOffset.C), pData:=ADR(DesiredTcpOffset.C), pgp:=0);
	//FW_SafeRelease(ADR(ip));
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_Exit" Id="{c82c6491-14db-4a47-9fb5-917e4d264abf}">
      <Declaration><![CDATA[//FB_Exit must be implemented explicitly. If there is an implementation, then the
//method is called before the controller removes the code of the function block instance
//(implicit call). The return value is not evaluated.
METHOD FB_Exit: BOOL
VAR_INPUT
    bInCopyCode: BOOL;  // TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change).  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // if not online change
	FW_SafeRelease(ADR(ip));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{17e1d3e8-1278-468d-bda8-e41d84af2af9}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // if not online change
	IF nObjID <> 0 THEN
		hrInit := FW_ObjMgr_GetObjectInstance(oid:=nObjID, iid:=iid, pipUnk:=ADR(ip));
	ELSE
		hrInit := E_HRESULTAdsErr.INVALIDOBJID;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>