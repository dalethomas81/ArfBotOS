<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="_10_HMI" Id="{9462f316-faa5-42b7-be46-708f3ef2e1f0}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM _10_HMI
VAR	
	
	SelectedProgramNumber: INT;
	SelectedRecipeRowIndex: INT;
	RecipeRowSelected: BOOL;
	InsertLineAbove: BOOL;
	InsertLineBelow: BOOL;
	DeleteLine: BOOL;
	CopySelectedCommand: BOOL;
	CopiedCommandType: DUT_CommandType;
	CopiedCommandString: STRING(GVL.COMMAND_LEN);
	CopiedCommandComment: STRING;
	PasteCommand: BOOL;
	
	_i,_j,_k: INT;
	
	SetStoredPositionAsCurrent: BOOL;
	SelectedStoredPosition: UINT;
	SetVisionRegisterAsCurrent: BOOL;
	SelectedVisionRegister: UINT;
	SelectedFlag: UINT;
	
	//
	TeachPosition: BOOL;
	stTeachPosition: ST_MoveCmd;
	
	//
	MoveCmdParser: ParseMoveCmd;
	stMoveCmd: ST_MoveCmd;
	MoveCmdVisu: AddMoveCmd_VISU_STRUCT;
	
	//
	OutputCmdParser: ParseOutputCmd;
	stOutputCmd: ST_OutputCmd;
	OutputCmdVisu: AddOutputCmd_VISU_STRUCT;
	
	//
	PauseCmdParser: ParsePauseCmd;
	stPauseCmd: ST_PauseCmd;
	PauseCmdVisu: AddPauseCmd_VISU_STRUCT;
	
	//
	VisionCmdParser : ParseVisionCmd;
	stVisionCmd : ST_VisionCmd;
	VisionCmdVisu: AddVisionCmd_VISU_STRUCT;
	
	//
	VarSetCmdParser : ParseVarSetCmd;
	stVarSetCmd : ST_VarSetCmd;
	VarSetCmdVisu: AddVarSetCmd_VISU_STRUCT;
	
	//
	LogicCmdParser : ParseLogicCmd;
	stLogicCmd : ST_LogicCmd;
	LogicCmdVisu: AddLogicCmd_VISU_STRUCT;
	
	//
	CurrentVisu: STRING;
	OpenDialog: VU.FbOpenDialogExtended;
    
    // vision
   	HostName   : STRING;
	VisionSystemUrl: STRING;
	VisionOutputImageUrl: STRING;
	VisionSystemIpAddress_Last: STRING(19);

END_VAR

VAR CONSTANT
	LocalIpAddress: STRING(19):='127.0.0.1';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//
IF GVL.StorePersist THEN
	GVL.StorePersist := FALSE;
	// TODO manually store persistent data here.
	// not currently a straight forward way of doing this.
END_IF

//
IF (InsertLineAbove OR InsertLineBelow) AND RecipeRowSelected THEN
	//
	IF InsertLineAbove THEN
		InsertLineAbove := FALSE;
		_j := SelectedRecipeRowIndex + 1;
	ELSIF InsertLineBelow THEN
		InsertLineBelow := FALSE;
		_j := SelectedRecipeRowIndex + 2;
	END_IF
	//
	FOR _i := GVL.PROG_CMDS_ARR_END TO _j BY -1 DO
		// shift all data
		IF _i >= GVL.PROG_CMDS_ARR_BEG AND _i <= GVL.PROG_CMDS_ARR_END THEN // can never really bo too careful am I right?
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandType := PersistentVars.Programs[SelectedProgramNumber].Commands[_i - 1].CommandType;
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandString := PersistentVars.Programs[SelectedProgramNumber].Commands[_i - 1].CommandString;
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandComment := PersistentVars.Programs[SelectedProgramNumber].Commands[_i - 1].CommandComment;
		END_IF
	END_FOR
	//
	PersistentVars.Programs[SelectedProgramNumber].Commands[_j - 1].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[SelectedProgramNumber].Commands[_j - 1].CommandString := '';
	PersistentVars.Programs[SelectedProgramNumber].Commands[_j - 1].CommandComment := '';
END_IF

//
IF DeleteLine AND RecipeRowSelected THEN
	DeleteLine := FALSE;
	FOR _i := SelectedRecipeRowIndex TO GVL.PROG_CMDS_ARR_END - 1 BY 1 DO
		IF _i >= GVL.PROG_CMDS_ARR_BEG AND _i <= GVL.PROG_CMDS_ARR_END THEN // can never really bo too careful am I right?
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandType := PersistentVars.Programs[SelectedProgramNumber].Commands[_i + 1].CommandType;
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandString := PersistentVars.Programs[SelectedProgramNumber].Commands[_i + 1].CommandString;
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandComment := PersistentVars.Programs[SelectedProgramNumber].Commands[_i + 1].CommandComment;
		END_IF
	END_FOR
END_IF

//
IF SetStoredPositionAsCurrent THEN
	SetStoredPositionAsCurrent := FALSE;
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.X := F_RoundLreal(_00_Main.ProcessJog.Position.v[0],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.Y := F_RoundLreal(_00_Main.ProcessJog.Position.v[1],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.Z := F_RoundLreal(_00_Main.ProcessJog.Position.v[2],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.A := F_RoundLreal(_00_Main.ProcessJog.Position.v[3],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.B := F_RoundLreal(_00_Main.ProcessJog.Position.v[4],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.C := F_RoundLreal(_00_Main.ProcessJog.Position.v[5],2);
END_IF

//
IF TeachPosition THEN
	TeachPosition := FALSE;
	//
	stTeachPosition.MoveType := DUT_Command_MoveType.DirectMove;
	stTeachPosition.Speed := 50;
	stTeachPosition.PositionType := DUT_Command_PositionType.AbsolutePosition;
	stTeachPosition.CoordSystem := _00_Main.ProcessJog.CoordSystem;
	stTeachPosition.CoordRef.X := F_RoundLreal(_00_Main.ProcessJog.Position.v[0],2);
	stTeachPosition.CoordRef.Y := F_RoundLreal(_00_Main.ProcessJog.Position.v[1],2);
	stTeachPosition.CoordRef.Z := F_RoundLreal(_00_Main.ProcessJog.Position.v[2],2);
	stTeachPosition.CoordRef.A := F_RoundLreal(_00_Main.ProcessJog.Position.v[3],2);
	stTeachPosition.CoordRef.B := F_RoundLreal(_00_Main.ProcessJog.Position.v[4],2);
	stTeachPosition.CoordRef.C := F_RoundLreal(_00_Main.ProcessJog.Position.v[5],2);
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType := DUT_CommandType.MoveCommand;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString := BuildMoveCmd(stTeachPosition);
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandComment := 'Taught position';
END_IF

//
IF PasteCommand THEN
	PasteCommand := FALSE;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType := CopiedCommandType;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString := CopiedCommandString;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandComment := CopiedCommandComment;
END_IF

//
IF CopySelectedCommand THEN
	CopySelectedCommand := FALSE;
	
	//
	CopiedCommandType := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType;
	CopiedCommandString := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString;
	CopiedCommandComment := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandComment;
	
	CASE PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType OF
		DUT_CommandType.Disabled:
			//
			
		DUT_CommandType.MoveCommand:
			MoveCmdParser(Command := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stMoveCmd := MoveCmdParser.stCommand;
			
		DUT_CommandType.PauseCommand:
			PauseCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stPauseCmd := PauseCmdParser.stCommand;
			
		DUT_CommandType.InputCommand:
			//
			
		DUT_CommandType.OutputCommand:
			OutputCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stOutputCmd := OutputCmdParser.stCommand;
			
		DUT_CommandType.VisionCommand:
			VisionCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stVisionCmd := VisionCmdParser.stCommand;
			
		DUT_CommandType.VarSetCommand:
			VarSetCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stVarSetCmd := VarSetCmdParser.stCommand;
			
		DUT_CommandType.CncCommand:
			CncCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stCncCmd := CncCmdParser.stCommand;
			
		DUT_CommandType.LogicCommand:
			LogicCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stLogicCmd := LogicCmdParser.stCommand;
			
	END_CASE
	
END_IF

// should be called after CopySelectedCommand case statement
CurrentVisu := VisuElems.CurrentVisu;
OpenDialog(
	xExecute:= , 
	xDone=> , 
	xBusy=> , 
	xError=> , 
	itfClientFilter:= , 
	eError=> , 
	sDialogName:= , 
	xModal:= TRUE, // TRUE - visu in background cannot be used
	pTopLeftPosition:= , 
	itfDialogOpenedListener:= , 
	pbyDialogInterfaceData:= , 
	udiDialogInterfaceDataSize:= , 
	itfDialogCloseListener:= , 
	pbyTagForDialogClosed:= , 
	dwDialogFlags:= );
IF (OpenDialog.xExecute AND OpenDialog.xDone) 
	OR OpenDialog.xError 
	THEN
		OpenDialog.xExecute := FALSE;
END_IF

// used to show the output image on the visu
// 'http://ArfBot:5000/output'
IF  PersistentVars.VisionSystemIpAddress <> VisionSystemIpAddress_Last THEN
	 VisionSystemIpAddress_Last :=  PersistentVars.VisionSystemIpAddress;
	//
	IF PersistentVars.VisionSystemIpAddress = LocalIpAddress THEN
		// https://forge.codesys.com/forge/talk/Runtime/thread/61d60a9fb7/
		SysSockGetHostName(szHostName:=HostName, diNameLen:=SIZEOF(HostName));
		VisionSystemUrl := CONCAT('http://', HostName);
	ELSE
		VisionSystemUrl := CONCAT('http://', PersistentVars.VisionSystemIpAddress);
	END_IF
	//
	VisionSystemUrl := CONCAT(VisionSystemUrl, ':5000');
	VisionOutputImageUrl := CONCAT(VisionSystemUrl,'/output');
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>