<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="CncPathPlanner" Id="{845c01d1-16bd-4c5b-8921-4865a7e07fd2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CncPathPlanner
VAR_IN_OUT
	VarList: SMC_VarList;
END_VAR
VAR_OUTPUT
	DataOut: POINTER TO SMC_OUTQUEUE;
	Busy: BOOL;
	Done: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_Filename: STRING := '_cnc/CNC_FromFile.cnc';
	_SMC_NCInterpreter: SMC_NCInterpreter;
	_SMC_ReadNCFile2: SMC_ReadNCFile2;
	_SMC_CheckVelocities: SMC_CheckVelocities;
	_SMC_GEOINFO: ARRAY[0..49] OF SMC_GEOINFO;
	_StartPos: SMC_PosInfo;
	_OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
	_ExecuteRtrig: R_TRIG;
	_Execute: BOOL;
	_ResetRtrig: R_TRIG;
	_Reset: BOOL;
	_Sequence: INT := 0;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	/// before update to 3.5.19.40 '/var/opt/codesys/_cnc/'
	_BaseCncDirectory: STRING := '_cnc/';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_ExecuteRtrig(CLK:=_Execute);
IF _ExecuteRtrig.Q THEN
	_Execute:= FALSE;
END_IF
_ResetRtrig(CLK:=_Reset);
IF _ResetRtrig.Q THEN
	_Reset:= FALSE;
	_Sequence:=999;
END_IF

Busy := _Sequence <> 000;

CASE _Sequence OF
	999:
		_SMC_ReadNCFile2.bExecute := FALSE;
		_Sequence := 000;
	000:
		IF _ExecuteRtrig.Q THEN
			_SMC_ReadNCFile2.bExecute := TRUE;
			_Sequence := 1;
		END_IF
	001:
		IF NOT _SMC_CheckVelocities.bBusy THEN
			_Sequence := 999;
			Done := TRUE;
		END_IF
	
END_CASE

_SMC_ReadNCFile2(
	bExecute:= , 
	bAbort:= _Sequence = 999, 
	sFileName:= _Filename, 
	pvl:= ADR(VarList), 
	fDefaultVel:= , 
	fDefaultAccel:= , 
	fDefaultDecel:= , 
	fDefaultVelFF:= , 
	fDefaultAccelFF:= , 
	fDefaultDecelFF:= , 
	b3DMode:= , 
	bStepSuppress:= , 
	aSubProgramDirs:= , 
	bParenthesesAsComments:= , 
	bDisableJumpBuffer:= , 
	pCustomFunTable:= , 
	aTokenModifier:= , 
	aSentenceModifier:= , 
	bBusy=> , 
	bError=> , 
	ErrorID=> , 
	errorPos=> , 
	ErrorProgramName=> , 
	sentences=> , 
	adwFileSize=> , 
	adwPos=> );

_SMC_NCInterpreter(
	sentences:= _SMC_ReadNCFile2.sentences, 
	bExecute:= _SMC_ReadNCFile2.bExecute, 
	bAbort:= _Sequence = 999, 
	bAppend:= , 
	piStartPosition:= _StartPos, 
	vStartToolLength:= , 
	nSizeOutQueue:= SIZEOF(_SMC_GEOINFO), 
	pbyBufferOutQueue:= ADR(_SMC_GEOINFO), 
	bEnableSyntaxChecks:= , 
	eOriConv:= _OriConvention, // SMC_ORI_CONVENTION 
	dCircleTolerance:= , 
	pInterpreterStack:= , 
	nInterpreterStackSizeBytes:= , 
	bDone=> , 
	bBusy=> , 
	bError=> , 
	wErrorID=> , 
	errorPos=> , 
	poqDataOut=> , 
	iStatus=> , 
	iLineNumberDecoded=> , 
	GCodeText=> , 
	CallstackInfo=> , 
	aActivePrograms=> );

_SMC_CheckVelocities(
	bExecute:= _SMC_NCInterpreter.bExecute, 
	bAbort:= _Sequence = 999, 
	poqDataIn:= _SMC_NCInterpreter.poqDataOut, 
	dAngleTol:= , 
	bCheckAddAxVelJump:= , 
	dMaxAddAxVelDifference:= , 
	bBusy=> , 
	bError=> , 
	wErrorID=> , 
	poqDataOut=> DataOut);
	
_ErrorRtrig();
_ErrorRtrig.CLK:= _SMC_ReadNCFile2.bError
				OR _SMC_NCInterpreter.bError
				OR _SMC_CheckVelocities.bError;
IF _ErrorRtrig.Q THEN
	Error := TRUE;
	IF _SMC_ReadNCFile2.bError THEN
		ErrorDescription := CONCAT('ReadNCFile Error: ',
                                CONCAT(TO_STRING(_SMC_ReadNCFile2.ErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ReadNCFile2.ErrorID,
                                            SMC_Language_Type.english)))) ;
	END_IF
	IF _SMC_NCInterpreter.bError THEN
		ErrorDescription := CONCAT(' NCInterpreter Error: ',
                                CONCAT(TO_STRING(_SMC_NCInterpreter.wErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_NCInterpreter.wErrorID,
                                            SMC_Language_Type.english)))) ;
	END_IF
	IF _SMC_CheckVelocities.bError THEN
		ErrorDescription := CONCAT(' CheckVelocities Error: ',
                                CONCAT(TO_STRING(_SMC_CheckVelocities.wErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_CheckVelocities.wErrorID,
                                            SMC_Language_Type.english)))) ;
	END_IF
END_IF]]></ST>
    </Implementation>
    <Method Name="M_Execute" Id="{92875761-2fd7-4bb6-bbf7-a117fd98b83f}">
      <Declaration><![CDATA[METHOD M_Execute : BOOL
VAR_INPUT
	Filename: STRING := 'CNC_FromFile.cnc';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Filename := CONCAT(_BaseCncDirectory, Filename);
_Execute:=TRUE;
Done := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{bcea459e-fa66-4937-b73d-59fec7864ad5}">
      <Declaration><![CDATA[METHOD M_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Reset := TRUE;
Error := FALSE;
ErrorDescription := '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetOriConvention" Id="{bc2fe0c5-bb28-4086-a8ef-9e95685b910f}">
      <Declaration><![CDATA[METHOD M_SetOriConvention : BOOL
VAR_INPUT
	OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_OriConvention := OriConvention;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetStartPosition" Id="{deae1c1c-a35f-4dab-a882-870c0dd1bbee}">
      <Declaration><![CDATA[METHOD M_SetStartPosition : BOOL
VAR_INPUT
	StartPos: SMC_PosInfo;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_StartPos := StartPos;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>