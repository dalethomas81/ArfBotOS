<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_GroupHandler" Id="{f6416d9a-a888-4f6b-9b8f-cb306c7639e1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GroupHandler
VAR_IN_OUT
	AxisGroup: AXES_GROUP_REF;
    KinAxes: ST_KinAxes;
    ChannelRef: NCTOPLC_NCICHANNEL_REF;
END_VAR
VAR_INPUT
	Enable: BOOL;
	StoredPositions: REFERENCE TO ARRAY[GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
END_VAR
VAR_OUTPUT
	Busy: BOOL;
	Error: BOOL;
	ErrorID: UDINT;
END_VAR
VAR
	//
	EnableFtrig: F_TRIG;
	
	//
	_SeqEnableGroup: INT;
	_SeqDisableGroup: INT;
	_SequenceSetKinematics: INT;
	_SequenceSetCoordTrans: INT;
	_SeqResetGroup: INT;
	
	//
	//_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	//_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	//_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
    
    //
    _FB_KinConfigGroup      : FB_KinConfigGroup;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	//_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
	//_CoordinateSystem: SMC_COORD_SYSTEM:=SMC_COORD_SYSTEM.ACS;
	
	_EnableGroup: BOOL;
	_DisableGroup: BOOL;
	_GroupEnabled: BOOL;
	_ResetGroup: BOOL;
	_SetKinematics: BOOL;
	_SetCoordinates: BOOL;
	_KinematicsSet: BOOL;
	
	_MC_GroupReadStatus: MC_GroupReadStatus;
	_DUT_GroupStatus: DUT_GroupStatus;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_SET_COORD_TRANS: 	INT := 0071;
	STEP_WAIT_COORD_TRANS: 	INT := 0072;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//
Busy := _SeqEnableGroup <> 0
		OR _SeqDisableGroup <> 0
		OR _SequenceSetKinematics <> 0
		OR _SequenceSetCoordTrans <> 0
		OR _SeqResetGroup <> 0;
		
EnableFtrig(CLK:=Enable);
IF EnableFtrig.Q THEN
	M_DisableGroup();
END_IF

//
_M_EnableGroup();
_M_DisableGroup();
_M_SetKinematics();
_M_ResetGroup();

(*_MC_GroupReadStatus(
	AxisGroup:= AxisGroup, 
	Enable:= Enable, 
	Valid=> _DUT_GroupStatus.Valid, 
	Busy=> _DUT_GroupStatus.Busy, 
	Error=> _DUT_GroupStatus.Error, 
	ErrorID=> _DUT_GroupStatus.ErrorID, 
	GroupMoving=> _DUT_GroupStatus.GroupMoving, 
	GroupHoming=> _DUT_GroupStatus.GroupHoming, 
	GroupErrorStop=> _DUT_GroupStatus.GroupErrorStop, 
	GroupStandby=> _DUT_GroupStatus.GroupStandby, 
	GroupStopping=> _DUT_GroupStatus.GroupStopping, 
	GroupDisabled=> _DUT_GroupStatus.GroupDisabled, 
	TrackingDynamicCS=> _DUT_GroupStatus.TrackingDynamicCS, 
	InSync=> _DUT_GroupStatus.InSync, 
	ActiveMovementId=> _DUT_GroupStatus.ActiveMovementId, 
	FirstReferencedMovementId=> _DUT_GroupStatus.FirstReferencedMovementId, 
	LastAcceptedMovementId=> _DUT_GroupStatus.LastAcceptedMovementId, 
	PositionLag=> _DUT_GroupStatus.PositionLag, 
	OrientationLag=> _DUT_GroupStatus.OrientationLag);*)

_MC_SetCoordinateTransform(
	AxesGroup:= AxisGroup, 
	Execute:= , 
	CoordTransform:= _MC_COORD_REF, 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

(*_SMC_GroupSetTool(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	ToolOffset:= _MC_COORD_REF, 
	Done=> , 
	Error=> , 
	ErrorID=> );*)

(*_SMC_GroupPower(
	AxisGroup:= AxisGroup, 
	Enable:= _GroupPower, 
	bRegulatorOn:= _GroupPower, 
	bDriveStart:= _GroupPower, 
	Status=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );*)

_MC_GroupEnable(
	AxesGroup:= AxisGroup, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
_MC_GroupDisable(
	AxesGroup:= AxisGroup, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

_MC_GroupReset(
	AxesGroup:= AxisGroup, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

(*_MC_GroupReadActualPosition(
	AxisGroup:= AxisGroup, 
	Enable:= , 
	CoordSystem:= _CoordinateSystem, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> , 
	KinematicConfig=> );*)
	
(*_SMC_SetKinConfiguration(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	ConfigData:= _MC_GroupReadActualPosition.KinematicConfig, 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );*)
    
_FB_KinConfigGroup(
	bExecute:= , 
	bCartesianMode:= , 
	stAxesList:= KinAxes, 
	stKinRefIn:= ChannelRef, 
	bBusy=> , 
	bDone=> , 
	bError=> , 
	nErrorId=> );]]></ST>
    </Implementation>
    <Method Name="_M_DisableGroup" Id="{17aa3a99-9fea-4672-a49a-0a0b6efeb4bc}">
      <Declaration><![CDATA[METHOD PRIVATE _M_DisableGroup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE _SeqDisableGroup OF
	0: // IDLE
		IF _DisableGroup THEN
			_DisableGroup := FALSE;
			_MC_GroupDisable.Execute := FALSE;
			_MC_GroupEnable.Execute := FALSE;
			_SeqDisableGroup := _SeqDisableGroup + 1;
		END_IF
		
	1:
		_MC_GroupDisable.Execute := TRUE;
		_SeqDisableGroup := _SeqDisableGroup + 1;
		
	2:
		// TODO add timeout timer here
		IF NOT _MC_GroupDisable.Busy THEN // this is a hack. we need to figure out is the group is already disabled first
			_SeqDisableGroup := _SeqDisableGroup + 1;;
		END_IF
		
	3:
		_MC_GroupDisable.Execute := FALSE;
		_GroupEnabled := FALSE;
		_KinematicsSet := FALSE;
		_GroupPower := FALSE;
		_SeqDisableGroup := 0;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_EnableGroup" Id="{e90d231e-c7b2-4663-a0b5-e03a8bc3210e}">
      <Declaration><![CDATA[METHOD PRIVATE _M_EnableGroup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE _SeqEnableGroup OF
	0: // IDLE
		IF _EnableGroup THEN
			_EnableGroup := FALSE;
			_GroupEnabled := FALSE;
			_MC_GroupEnable.Execute := FALSE;
			_SeqEnableGroup := _SeqEnableGroup + 1;
		END_IF
		
	1:
		_GroupPower := TRUE;
		_SeqEnableGroup := _SeqEnableGroup + 1;
		
	2:
		// TODO add timeout timer here
		//IF _SMC_GroupPower.Error THEN
		//	Error := TRUE;
		//	ErrorID := _SMC_GroupPower.ErrorID;
		//	_SeqEnableGroup := 0;
		//ELSIF _SMC_GroupPower.Status THEN
			_SeqEnableGroup := _SeqEnableGroup + 1;
		//END_IF
		
	3:
		_MC_GroupEnable.Execute := TRUE;
		_SeqEnableGroup := _SeqEnableGroup + 1;
		
	4:
		// TODO add timeout timer here
		IF NOT _MC_GroupEnable.Busy THEN // this is a hack. we need to figure out is the group is already enabled first
			_GroupEnabled := TRUE;
			//_MC_GroupEnable.Execute := FALSE;
			_SeqEnableGroup := 0;
		END_IF;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_ResetGroup" Id="{93550740-bce9-4d08-8c7b-68cd49bbfaa5}">
      <Declaration><![CDATA[METHOD PRIVATE _M_ResetGroup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE _SeqResetGroup OF
	0: // IDLE
		IF _ResetGroup THEN
			_ResetGroup := FALSE;
			//IF Error THEN
				_SeqResetGroup := _SeqResetGroup + 1;
			//END_IF
		END_IF
		
	1:
		Error := FALSE;
		ErrorID := 0;
		_MC_GroupReset.Execute := TRUE;
		_SeqResetGroup := _SeqResetGroup + 1;
	
	2: 
		_MC_GroupReset.Execute := FALSE;
		//
		_SeqEnableGroup := 0;
		_SeqDisableGroup := 0;
		_SequenceSetKinematics := 0;
		_SequenceSetCoordTrans := 0;
		_SeqResetGroup := 0;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_SetKinematics" Id="{a1a7e940-4a9a-4003-92e9-8b3905bc4ae4}">
      <Declaration><![CDATA[METHOD PRIVATE _M_SetKinematics : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE _SequenceSetKinematics OF
	0: // IDLE
		IF _SetKinematics THEN
			_SetKinematics := FALSE;
			_KinematicsSet := FALSE;
			//_MC_GroupReadActualPosition.Enable := FALSE;
			//_SMC_SetKinConfiguration.Execute := FALSE;
			_SequenceSetKinematics := _SequenceSetKinematics + 1;
		END_IF
		
	1: // read group position
		//_MC_GroupReadActualPosition.Enable := TRUE;
		_SequenceSetKinematics := _SequenceSetKinematics + 1;
		
	2: // wait for group read position
		// TODO add timeout timer here
		//IF _MC_GroupReadActualPosition.Error THEN
		//	Error := TRUE;
		//	ErrorID := _MC_GroupReadActualPosition.ErrorID;
		//	_SequenceSetKinematics := 0;
		//ELSIF _MC_GroupReadActualPosition.Valid THEN
			_SequenceSetKinematics := _SequenceSetKinematics + 1;
		//END_IF
		
	3: // set kinematics
		//_SMC_SetKinConfiguration.Execute := TRUE;
		_SequenceSetKinematics := _SequenceSetKinematics + 1;
		
	4: // wait for set kinematics
		// TODO add timeout timer here
		//IF _SMC_SetKinConfiguration.Error THEN
		//	Error := TRUE;
		//	ErrorID := _SMC_SetKinConfiguration.ErrorID;
		//	_SequenceSetKinematics := 0;
		//ELSIF _SMC_SetKinConfiguration.Done THEN
		//	_SMC_SetKinConfiguration.Execute := FALSE;
			_SequenceSetKinematics := _SequenceSetKinematics + 1;
		//END_IF
		
	5:
		_SetCoordinates := TRUE;
		_SequenceSetKinematics := _SequenceSetKinematics + 1;
	
	6:
		// TODO add timeout timer here
		IF _MC_SetCoordinateTransform.Error THEN
			Error := TRUE;
			ErrorID := _MC_SetCoordinateTransform.ErrorID;
			_SequenceSetCoordTrans := 0;
			_SequenceSetKinematics := 0;
		//ELSIF _SMC_GroupSetTool.Error THEN
		//	Error := TRUE;
		//	ErrorID := _SMC_GroupSetTool.ErrorID;
		//	_SequenceSetCoordTrans := 0;
		//	_SequenceSetKinematics := 0;
		ELSIF _SequenceSetCoordTrans <= 0 THEN
			_KinematicsSet := TRUE;
			_SequenceSetKinematics := 0;
		END_IF
		
END_CASE

CASE _SequenceSetCoordTrans OF
	0: //
		IF _SetCoordinates THEN
			_SetCoordinates := FALSE;
			//_SMC_GroupSetTool.Execute := FALSE;
			_MC_SetCoordinateTransform.Execute := FALSE;
			_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		END_IF
	
	1: //
		_MC_COORD_REF := StoredPositions[GVL.MCS_POS_IDX].Position; // MCS
		//_MC_SetCoordinateTransform.CoordSystem := SMC_COORD_SYSTEM.MCS;
		_MC_SetCoordinateTransform.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	2: //
		// TODO add timeout timer here
		IF _MC_SetCoordinateTransform.Error THEN
			(*SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_SetCoordinateTransform.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_SetCoordinateTransform.ErrorID,
													SMC_Language_Type.english)))));*)
			//SUPER^.M_Error(Description:=CONCAT('Move Command Error: ', TO_STRING(_MC_SetCoordinateTransform.ErrorID)));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _MC_SetCoordinateTransform.Done THEN
			_MC_SetCoordinateTransform.Execute := FALSE;
			//_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
			_SequenceSetCoordTrans := 0;
		END_IF
		
	(*3: //
		_MC_COORD_REF := StoredPositions[GVL.PC1_POS_IDX].Position; // PCS 1
		_MC_SetCoordinateTransform.CoordSystem := SMC_COORD_SYSTEM.PCS_1;
		_MC_SetCoordinateTransform.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	4: //
		// TODO add timeout timer here
		IF _MC_SetCoordinateTransform.Error THEN
			(*SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_SetCoordinateTransform.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_SetCoordinateTransform.ErrorID,
													SMC_Language_Type.english)))));*)
			//SUPER^.M_Error(Description:=CONCAT('Move Command Error: ', TO_STRING(_MC_SetCoordinateTransform.ErrorID)));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _MC_SetCoordinateTransform.Done THEN
			_MC_SetCoordinateTransform.Execute := FALSE;
			_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		END_IF
		
	5: //
		_MC_COORD_REF := StoredPositions[GVL.PC2_POS_IDX].Position; // PCS 2
		_MC_SetCoordinateTransform.CoordSystem := SMC_COORD_SYSTEM.PCS_2;
		_MC_SetCoordinateTransform.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	6: //
		// TODO add timeout timer here
		IF _MC_SetCoordinateTransform.Error THEN
			(*SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_SetCoordinateTransform.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_SetCoordinateTransform.ErrorID,
													SMC_Language_Type.english)))));*)
			//SUPER^.M_Error(Description:=CONCAT('Move Command Error: ', TO_STRING(_MC_SetCoordinateTransform.ErrorID)));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _MC_SetCoordinateTransform.Done THEN
			_MC_SetCoordinateTransform.Execute := FALSE;
			_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		END_IF
		
        
        // TODO :(
        ///////////////////////////////
        // in twincat, we will need to unlock the parameter using its ID
        // then write to the parameter via ADS
        // then lock the parameter back
        // https://infosys.beckhoff.com/content/1033/tf5110-tf5113_tc3_kinematic_transformation/1955902347.html?id=3846917459939213436
        //////////////////////////////
        
	7:  // set tool offset
		_MC_COORD_REF := StoredPositions[GVL.TCP_POS_IDX].Position; // TCP
		_SMC_GroupSetTool.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	8: // monitor tool offset
		// TODO add timeout timer here
		IF _SMC_GroupSetTool.Error THEN
			(*SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_SMC_GroupSetTool.ErrorID),
										CONCAT(' ', SMC_ErrorString(_SMC_GroupSetTool.ErrorID,
													SMC_Language_Type.english)))));*)
			//SUPER^.M_Error(Description:=CONCAT('Move Command Error: ', TO_STRING(_SMC_GroupSetTool.ErrorID)));
			_SequenceSetCoordTrans := 999; // error step so we dont spam errors
			
		ELSIF _SMC_GroupSetTool.Done THEN
			_SMC_GroupSetTool.Execute := FALSE;
			_SequenceSetCoordTrans := 0;
		END_IF*)

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_DisableGroup" Id="{a0a3246f-e788-42ad-9174-44a6b0b5864f}">
      <Declaration><![CDATA[METHOD M_DisableGroup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//IF NOT Error THEN
	M_DisableGroup := TRUE;
	_DisableGroup := TRUE;
//ELSE
	//M_DisableGroup := FALSE;
//END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EnableGroup" Id="{42afec78-5201-449e-b1b2-e5ed96e5c8b5}">
      <Declaration><![CDATA[METHOD M_EnableGroup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Enable AND NOT Error THEN
	M_EnableGroup := TRUE;
	_EnableGroup := TRUE;
	_GroupEnabled := FALSE;
ELSE
	M_EnableGroup := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetGroup" Id="{f7b0fb23-a5d3-4128-86d4-545ea8eb93f8}">
      <Declaration><![CDATA[METHOD M_ResetGroup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ResetGroup := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetKinematics" Id="{c272ee22-b56a-4a21-938f-13e5df726fce}">
      <Declaration><![CDATA[METHOD M_SetKinematics : BOOL
VAR_INPUT
	//CoordinateSystem: SMC_COORD_SYSTEM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _GroupEnabled AND NOT Error THEN
	M_SetKinematics := TRUE;
	//_CoordinateSystem := CoordinateSystem;
	_SetKinematics := TRUE;
	_KinematicsSet := FALSE;
ELSE
	M_SetKinematics := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_GroupEnabled" Id="{6c9aae5d-4785-4006-b6e7-a4e70fe8d11f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY P_GroupEnabled : BOOL
]]></Declaration>
      <Get Name="Get" Id="{dbc64c57-ffa9-4365-a52e-3fd1f7074869}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_GroupEnabled := _GroupEnabled;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_GroupStatus" Id="{7660ae4b-8965-424f-b336-9965f704e650}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY P_GroupStatus : REFERENCE TO DUT_GroupStatus
]]></Declaration>
      <Get Name="Get" Id="{110897bc-c39e-4beb-86be-7c9059a2ea19}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_GroupStatus REF= _DUT_GroupStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_KinematicsSet" Id="{ef1554af-fa41-4177-8dda-b53f3d39fa97}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY P_KinematicsSet : BOOL
]]></Declaration>
      <Get Name="Get" Id="{ddb0a753-0308-444c-b527-ff5908f271b8}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_KinematicsSet := _KinematicsSet;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>