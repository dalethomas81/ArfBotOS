///////////////////////////////////////////////////////////////////////////////
// SixAxisArticulatedTrafo.cpp
#include "TcPch.h"
#pragma hdrstop

#include "SixAxisArticulatedTrafo.h"
#include "TC_DriverVersion.h"

#include <cmath>
#include <vector>
#include <array>

#define M_PI 3.14159265358979323846
#define DEG_TO_RAD(deg) ((deg) * M_PI / 180.0)

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CSixAxisArticulatedTrafo
BEGIN_INTERFACE_MAP(CSixAxisArticulatedTrafo)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcNcTrafo, ITcNcTrafo)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CSixAxisArticulatedTrafo, VID_TC_Driver, CID_TC_DriverCSixAxisArticulatedTrafo)
IMPLEMENT_ITCOMOBJECT(CSixAxisArticulatedTrafo)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CSixAxisArticulatedTrafo)
IMPLEMENT_ITCADI(CSixAxisArticulatedTrafo)
IMPLEMENT_ITCWATCHSOURCE(CSixAxisArticulatedTrafo)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CSixAxisArticulatedTrafo 
BEGIN_SETOBJPARA_MAP(CSixAxisArticulatedTrafo)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmLengthL1, m_ArmLengthL1)
	SETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmLengthL2, m_ArmLengthL2)
	SETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmLengthL3, m_ArmLengthL3)
	SETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmOffsetD1, m_ArmOffsetD1)
	SETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmOffsetD2, m_ArmOffsetD2)
	SETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmOffsetD3, m_ArmOffsetD3)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CSixAxisArticulatedTrafo 
BEGIN_GETOBJPARA_MAP(CSixAxisArticulatedTrafo)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmLengthL1, m_ArmLengthL1)
	GETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmLengthL2, m_ArmLengthL2)
	GETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmLengthL3, m_ArmLengthL3)
	GETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmOffsetD1, m_ArmOffsetD1)
	GETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmOffsetD2, m_ArmOffsetD2)
	GETOBJPARA_VALUE(PID_SixAxisArticulatedTrafoArmOffsetD3, m_ArmOffsetD3)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CSixAxisArticulatedTrafo
BEGIN_OBJPARAWATCH_MAP(CSixAxisArticulatedTrafo)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CSixAxisArticulatedTrafo
BEGIN_OBJDATAAREA_MAP(CSixAxisArticulatedTrafo)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
CSixAxisArticulatedTrafo::CSixAxisArticulatedTrafo() //: m_forwardNbrIn(6), m_forwardNbrOut(6)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_ArmLengthL1 = 0;
	m_ArmLengthL2 = 0;
	m_ArmLengthL3 = 0;
	m_ArmOffsetD1 = 0;
	m_ArmOffsetD2 = 0;
	m_ArmOffsetD3 = 0;
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
CSixAxisArticulatedTrafo::~CSixAxisArticulatedTrafo() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CSixAxisArticulatedTrafo)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CSixAxisArticulatedTrafo::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CSixAxisArticulatedTrafo::SetObjStateSO()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CSixAxisArticulatedTrafo::SetObjStateOS()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CSixAxisArticulatedTrafo::SetObjStateSP()
{
	HRESULT hr = S_OK;
	return hr;
}


















// Define a 4x4 matrix
typedef std::vector<std::vector<double>> Matrix4x4;

// Function to create a transformation matrix using DH parameters
Matrix4x4 createDHMatrix(double theta, double d, double a, double alpha) {
	Matrix4x4 T(4, std::vector<double>(4, 0.0));

	T[0][0] = cos(theta);
	T[0][1] = -sin(theta) * cos(alpha);
	T[0][2] = sin(theta) * sin(alpha);
	T[0][3] = a * cos(theta);

	T[1][0] = sin(theta);
	T[1][1] = cos(theta) * cos(alpha);
	T[1][2] = -cos(theta) * sin(alpha);
	T[1][3] = a * sin(theta);

	T[2][0] = 0;
	T[2][1] = sin(alpha);
	T[2][2] = cos(alpha);
	T[2][3] = d;

	T[3][0] = 0;
	T[3][1] = 0;
	T[3][2] = 0;
	T[3][3] = 1;

	return T;
}

// Function to multiply two 4x4 matrices
Matrix4x4 multiplyMatrices(const Matrix4x4& A, const Matrix4x4& B) {
	Matrix4x4 C(4, std::vector<double>(4, 0.0));

	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			for (int k = 0; k < 4; ++k) {
				C[i][j] += A[i][k] * B[k][j];
			}
		}
	}

	return C;
}

// Function to compute forward kinematics
Matrix4x4 forwardKinematics(const std::vector<double>& jointAngles, const std::vector<std::vector<double>>& dhParameters) {
	Matrix4x4 T = createDHMatrix(jointAngles[0], dhParameters[0][1], dhParameters[0][2], dhParameters[0][3]);

	for (size_t i = 1; i < jointAngles.size(); ++i) {
		Matrix4x4 Ti = createDHMatrix(jointAngles[i], dhParameters[i][1], dhParameters[i][2], dhParameters[i][3]);
		T = multiplyMatrices(T, Ti);
	}

	return T;
}

// Function to compute inverse kinematics
std::vector<double> inverseKinematics(const Matrix4x4& desiredPose, const std::vector<std::vector<double>>& dhParameters) {
	std::vector<double> jointAngles(6, 0.0);

	// Extract the desired position and orientation from the desiredPose matrix
	double px = desiredPose[0][3];
	double py = desiredPose[1][3];
	double pz = desiredPose[2][3];

	// Calculate the wrist center position
	double d6 = dhParameters[5][1];
	double wx = px - d6 * desiredPose[0][2];
	double wy = py - d6 * desiredPose[1][2];
	double wz = pz - d6 * desiredPose[2][2];

	// Solve for joint angles 1, 2, and 3
	jointAngles[0] = atan2(wy, wx);

	double d1 = dhParameters[0][1];
	double a2 = dhParameters[1][2];
	double a3 = dhParameters[2][2];
	double r = sqrt(wx * wx + wy * wy);
	double s = wz - d1;
	double D = (r * r + s * s - a2 * a2 - a3 * a3) / (2 * a2 * a3);
	jointAngles[2] = atan2(sqrt(1 - D * D), D);
	jointAngles[1] = atan2(s, r) - atan2(a3 * sin(jointAngles[2]), a2 + a3 * cos(jointAngles[2]));

	// Extract the rotation matrix R06 from the desiredPose matrix
	Matrix4x4 R06(3, std::vector<double>(3, 0.0));
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 3; ++j) {
			R06[i][j] = desiredPose[i][j];
		}
	}

	// Calculate the rotation matrix R03
	Matrix4x4 T01 = createDHMatrix(jointAngles[0], dhParameters[0][1], dhParameters[0][2], dhParameters[0][3]);
	Matrix4x4 T12 = createDHMatrix(jointAngles[1], dhParameters[1][1], dhParameters[1][2], dhParameters[1][3]);
	Matrix4x4 T23 = createDHMatrix(jointAngles[2], dhParameters[2][1], dhParameters[2][2], dhParameters[2][3]);
	Matrix4x4 T03 = multiplyMatrices(multiplyMatrices(T01, T12), T23);

	Matrix4x4 R03(3, std::vector<double>(3, 0.0));
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 3; ++j) {
			R03[i][j] = T03[i][j];
		}
	}

	// Calculate the rotation matrix R36
	Matrix4x4 R36(3, std::vector<double>(3, 0.0));
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 3; ++j) {
			R36[i][j] = 0.0;
			for (int k = 0; k < 3; ++k) {
				R36[i][j] += R03[i][k] * R06[k][j];
			}
		}
	}

	// Calculate joint angles 4, 5, and 6
	jointAngles[3] = atan2(R36[1][2], R36[0][2]);
	jointAngles[4] = atan2(sqrt(R36[0][2] * R36[0][2] + R36[1][2] * R36[1][2]), R36[2][2]);
	jointAngles[5] = atan2(R36[2][1], -R36[2][0]);

	return jointAngles;
}



























///<AutoGeneratedContent id="ImplementationOf_ITcNcTrafo">
HRESULT CSixAxisArticulatedTrafo::Forward(TcNcTrafoParameter* p)
{
	double ACS[6];
	double MCS[6];

	std::memcpy(ACS, p->i, 6 * sizeof(double));

	switch (p->type) {
	case EcNcTrafoParameter_Invalid:
		break;
	case EcNcTrafoParameter_Base:
		break;
	case EcNcTrafoParameter_Ext:
		break;
	case EcNcTrafoParameter_ExtCnc:
		break;
	}




	// Example DH parameters for a 6-axis robot
	/*
		double m_ArmLengthL1;
		double m_ArmLengthL2;
		double m_ArmLengthL3;
		double m_ArmOffsetD1;
		double m_ArmOffsetD2;
		double m_ArmOffsetD3;
	*/


	/*
	* Annin Robotics AR4
	* theta1=0		d1=169.77	a1=64.2		alpha1=90
	* theta1=90		d2=0		a2=305		alpha2=0
	* theta1=0		d3=0		a3=0		alpha3=90
	* theta1=0		d4=222.63	a4=0		alpha4=90
	* theta1=0		d5=0		a5=0		alpha5=-90
	* theta1=0		d6=36.25	a6=0		alpha6=0
	* 
	DH Parameters 
		( \theta ): Rotation angle around the z-axis (in radians).
		( d ): Offset along the previous z-axis (in millimeters).
		( a ): Length of the common normal (in millimeters).
		( \alpha ): Angle around the common normal (in radians).

		{"theta1", "d1", "a1", "alpha1"},
		{"theta2", "d2", "a2", "alpha2"},
		{"theta3", "d3", "a3", "alpha3"},
		{"theta4", "d4", "a4", "alpha4"},
		{"theta5", "d5", "a5", "alpha5"},
		{"theta6", "d6", "a6", "alpha6"}
	*/

	// Example DH parameters for a 6-axis robot
	std::vector<std::vector<double>> dhParameters = {
		{0,		169.77,		64.2,	M_PI / 2},
		{0,		0,			305,	0},
		{0,		0,			0,		M_PI / 2},
		{0,		222.63,		0,		-M_PI / 2},
		{0,		0,			0,		M_PI / 2},
		{0,		36.25,		0,		0}
	};

	// Example joint angles in degrees
	std::vector<double> jointAnglesDegrees = { ACS[0], ACS[1], ACS[2], ACS[3], ACS[4], ACS[5] };

	// Convert joint angles to radians
	std::vector<double> jointAnglesRadians;
	for (double angle : jointAnglesDegrees) {
		jointAnglesRadians.push_back(DEG_TO_RAD(angle));
	}

	// Compute forward kinematics
	Matrix4x4 T = forwardKinematics(jointAnglesRadians, dhParameters);










	MCS[0] = 7.0;
	MCS[1] = 8.0;
	MCS[2] = 9.0;
	MCS[3] = 10.0;
	MCS[4] = 11.0;
	MCS[5] = 12.0;
	std::memcpy(p->o, MCS, 6 * sizeof(double));

	HRESULT hr = S_OK;
	return hr;
}

HRESULT CSixAxisArticulatedTrafo::Backward(TcNcTrafoParameter* p)
{
	double MCS[6];
	double ACS[6];

	std::memcpy(MCS, p->i, 6 * sizeof(double));

	// Example DH parameters for a 6-axis robot
	/*
		double m_ArmLengthL1;
		double m_ArmLengthL2;
		double m_ArmLengthL3;
		double m_ArmOffsetD1;
		double m_ArmOffsetD2;
		double m_ArmOffsetD3;
	*/
	/*
		* Annin Robotics AR4
		* theta1=0		d1=169.77	a1=64.2		alpha1=90
		* theta1=90		d2=0		a2=305		alpha2=0
		* theta1=0		d3=0		a3=0		alpha3=90
		* theta1=0		d4=222.63	a4=0		alpha4=90
		* theta1=0		d5=0		a5=0		alpha5=-90
		* theta1=0		d6=36.25	a6=0		alpha6=0
		*
	DH Parameters
		( \theta ): Rotation angle around the z-axis (in radians).
		( d ): Offset along the previous z-axis (in millimeters).
		( a ): Length of the common normal (in millimeters).
		( \alpha ): Angle around the common normal (in radians).

		{"theta1", "d1", "a1", "alpha1"},
		{"theta2", "d2", "a2", "alpha2"},
		{"theta3", "d3", "a3", "alpha3"},
		{"theta4", "d4", "a4", "alpha4"},
		{"theta5", "d5", "a5", "alpha5"},
		{"theta6", "d6", "a6", "alpha6"}
	*/
	// Example DH parameters for a 6-axis robot
	std::vector<std::vector<double>> dhParameters = {
		{0,		169.77,		64.2,	M_PI / 2},
		{0,		0,			305,	0},
		{0,		0,			0,		M_PI / 2},
		{0,		222.63,		0,		-M_PI / 2},
		{0,		0,			0,		M_PI / 2},
		{0,		36.25,		0,		0}
	};

	// Desired end-effector pose (example values)
	Matrix4x4 desiredPose = {
		{DEG_TO_RAD(MCS[3]), 0, 0, MCS[0]},  // Rotation part and x position
		{0, DEG_TO_RAD(MCS[4]), 0, MCS[1]},  // Rotation part and y position
		{0, 0, DEG_TO_RAD(MCS[5]), MCS[2]},  // Rotation part and z position
		{0, 0, 0, 1}     // Homogeneous coordinate
	};

	// Compute inverse kinematics
	std::vector<double> jointAngles = inverseKinematics(desiredPose, dhParameters);





	ACS[0] = 1.0;
	ACS[1] = 2.0;
	ACS[2] = 3.0;
	ACS[3] = 4.0;
	ACS[4] = 5.0;
	ACS[5] = 6.0;
	std::memcpy(p->o, ACS, 6 * sizeof(double));

	HRESULT hr = S_OK;
	return hr;
}

HRESULT CSixAxisArticulatedTrafo::TrafoSupported(TcNcTrafoParameter* p, bool fwd)
{
	HRESULT hr = S_OK;
	return hr;
}

HRESULT CSixAxisArticulatedTrafo::GetDimensions(ULONG* pFwdInput, ULONG* pFwdOutput)
{
	*pFwdInput = 6;
	*pFwdOutput = 6;

	HRESULT hr = S_OK;
	return hr;
}
///</AutoGeneratedContent>
