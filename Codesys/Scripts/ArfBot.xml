<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="" productName="CODESYS" productVersion="CODESYS V3.5 SP19 Patch 4" creationDateTime="2024-02-26T21:29:06.3801046" />
  <contentHeader name="ArfBot.project" modificationDateTime="2024-02-26T21:28:27.7609543">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Project" type="string">ArfBot</property>
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous />
  </types>
  <instances>
    <configurations>
      <configuration name="Device">
        <resource name="Application">
          <task name="MainTask" interval="PT0.003S" priority="1">
            <pouInstance name="_00_Main" typeName="">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml" />
              </documentation>
            </pouInstance>
            <pouInstance name="_20_Io" typeName="">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml" />
              </documentation>
            </pouInstance>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
                <TaskSettings KindOfTask="Cyclic" Interval="3" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                  <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
                </TaskSettings>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                <ObjectId>eafe4677-fa00-4970-b015-251c89fffd79</ObjectId>
              </data>
            </addData>
          </task>
          <task name="SoftMotion_PlanningTask" interval="PT0.00005S" priority="15">
            <pouInstance name="_10_Drives" typeName="">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml" />
              </documentation>
            </pouInstance>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
                <TaskSettings KindOfTask="Cyclic" Interval="50" IntervalUnit="µs" WithinSPSTimeSlicing="true">
                  <Watchdog Enabled="false" TimeUnit="ms" />
                </TaskSettings>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                <ObjectId>5a42e1b4-5f13-4f3e-9a38-abed03da7807</ObjectId>
              </data>
            </addData>
          </task>
          <task name="VISU_TASK" interval="PT0.1S" priority="31">
            <pouInstance name="VisuElems.Visu_Prg" typeName="">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml" />
              </documentation>
            </pouInstance>
            <pouInstance name="_30_Visu" typeName="">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml" />
              </documentation>
            </pouInstance>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
                <TaskSettings KindOfTask="Cyclic" Interval="100" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                  <Watchdog Enabled="false" TimeUnit="ms" />
                </TaskSettings>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                <ObjectId>7d686a67-c501-4ade-ac77-336899e42115</ObjectId>
              </data>
            </addData>
          </task>
          <task name="VisionTask" interval="PT0.02S" priority="10">
            <pouInstance name="_40_Vision" typeName="">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml" />
              </documentation>
            </pouInstance>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
                <TaskSettings KindOfTask="Cyclic" Interval="20" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                  <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
                </TaskSettings>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                <ObjectId>38fa2b4a-d999-444c-83ca-1f85ed269224</ObjectId>
              </data>
            </addData>
          </task>
          <globalVars name="GVL" constant="true">
            <variable name="dwMainInterval">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="3000" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
              </documentation>
            </variable>
            <variable name="dwMotionInterval">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
              </documentation>
            </variable>
            <variable name="dwVisionInterval">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="20000" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
              </documentation>
            </variable>
            <variable name="dwVisuInterval">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="100000" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
              </documentation>
            </variable>
            <variable name="DIG_OUT_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> array sizes</xhtml>
              </documentation>
            </variable>
            <variable name="DIG_OUT_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="7" />
              </initialValue>
            </variable>
            <variable name="DIG_IN_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DIG_IN_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="7" />
              </initialValue>
            </variable>
            <variable name="PROG_CMDS_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="PROG_CMDS_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of commands in a program</xhtml>
              </documentation>
            </variable>
            <variable name="PROG_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="PROG_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="19" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of programs </xhtml>
              </documentation>
            </variable>
            <variable name="POS_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="POS_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of stored positions</xhtml>
              </documentation>
            </variable>
            <variable name="VIS_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="VIS_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of vision registers</xhtml>
              </documentation>
            </variable>
            <variable name="FLG_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="FLG_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of flags</xhtml>
              </documentation>
            </variable>
            <variable name="REG_ARR_BEG">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="REG_ARR_END">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of registers</xhtml>
              </documentation>
            </variable>
            <variable name="COMMAND_LEN">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> length of command strings for command processor.
 if this is reduced then commands may stop working.</xhtml>
              </documentation>
            </variable>
            <variable name="POSE_1_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="34" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 1</xhtml>
              </documentation>
            </variable>
            <variable name="POSE_2_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="35" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 2</xhtml>
              </documentation>
            </variable>
            <variable name="POSE_3_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="36" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 3</xhtml>
              </documentation>
            </variable>
            <variable name="POSE_4_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="37" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 4</xhtml>
              </documentation>
            </variable>
            <variable name="POSE_5_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="38" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 5</xhtml>
              </documentation>
            </variable>
            <variable name="HOM_POS_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="44" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> homing offsets</xhtml>
              </documentation>
            </variable>
            <variable name="DEC_START_POS">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="45" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> start position for the nc decoder</xhtml>
              </documentation>
            </variable>
            <variable name="TCP_POS_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="46" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tool center point offset</xhtml>
              </documentation>
            </variable>
            <variable name="PC2_POS_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="47" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> part 2 coordinate system offset</xhtml>
              </documentation>
            </variable>
            <variable name="PC1_POS_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="48" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> part 1 coordinate system offset</xhtml>
              </documentation>
            </variable>
            <variable name="MCS_POS_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> machine (robot) coordinate system offset</xhtml>
              </documentation>
            </variable>
            <variable name="HOM_TO_POSE_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="44" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> vision registers
RESERVED: INT:=VIS_ARR_END-4; // RESERVED
RESERVED: INT:=VIS_ARR_END-3; // RESERVED
RESERVED: INT:=VIS_ARR_END-2; // RESERVED
RESERVED: INT:=VIS_ARR_END-1; // RESERVED
RESERVED: INT:=VIS_ARR_END; // RESERVED
 flags</xhtml>
              </documentation>
            </variable>
            <variable name="HOME_COMPLETE">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="48" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">RESERVED: INT:=45;
RESERVED: INT:=46;
RESERVED: INT:=47;</xhtml>
              </documentation>
            </variable>
            <variable name="INIT_POS_IDX">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="49" />
              </initialValue>
            </variable>
            <variable name="PowerOn">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Homing">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Reset">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DigitalInput">
              <type>
                <array>
                  <dimension lower="DIG_IN_ARR_BEG" upper="DIG_IN_ARR_END" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> command IO</xhtml>
              </documentation>
            </variable>
            <variable name="DigitalOutput">
              <type>
                <array>
                  <dimension lower="DIG_OUT_ARR_BEG" upper="DIG_OUT_ARR_END" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="CmdIO">
              <type>
                <derived name="ST_LogicCmdIO" />
              </type>
            </variable>
            <variable name="g_x">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> feed rate</xhtml>
              </documentation>
            </variable>
            <variable name="g_y">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
            </variable>
            <variable name="g_gripper">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="Servo0Position">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="MoveToPose1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MoveToPose2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Pose1">
              <type>
                <string length="GVL.COMMAND_LEN" />
              </type>
            </variable>
            <variable name="Pose2">
              <type>
                <string length="GVL.COMMAND_LEN" />
              </type>
            </variable>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                <Attributes>
                  <Attribute Name="qualified_only" Value="" />
                </Attributes>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                <InterfaceAsPlainText>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'qualified_only'}

VAR_GLOBAL CONSTANT
	
	// task scan times
	dwMainInterval: DWORD:=3000; // us TODO reference this in task settings
	dwMotionInterval: DWORD:=50; // us TODO reference this in task settings
	dwVisionInterval: DWORD:=20000; // us TODO reference this in task settings
	dwVisuInterval: DWORD:=100000; // us TODO reference this in task settings
	
	// array sizes
	DIG_OUT_ARR_BEG: INT:=0;
	DIG_OUT_ARR_END: INT:=7;
	DIG_IN_ARR_BEG: INT:=0;
	DIG_IN_ARR_END: INT:=7;
	PROG_CMDS_ARR_BEG: INT:=0;
	PROG_CMDS_ARR_END: INT:=49; // total number of commands in a program
	PROG_ARR_BEG: INT:=0;
	PROG_ARR_END: INT:=19; // total number of programs 
	POS_ARR_BEG: INT:=0;
	POS_ARR_END: INT:=49; // total number of stored positions
	VIS_ARR_BEG: INT:=0;
	VIS_ARR_END: INT:=49; // total number of vision registers
	FLG_ARR_BEG: INT:=0;
	FLG_ARR_END: INT:=49; // total number of flags
	REG_ARR_BEG: INT:=0;
	REG_ARR_END: INT:=49; // total number of registers
	
END_VAR

VAR_GLOBAL CONSTANT
	
	// length of command strings for command processor.
	// if this is reduced then commands may stop working.
	COMMAND_LEN: UINT:=255;

	// stored positions
	POSE_1_IDX: INT:=34; // coordinates of pose 1
	POSE_2_IDX: INT:=35; // coordinates of pose 2
	POSE_3_IDX: INT:=36; // coordinates of pose 3
	POSE_4_IDX: INT:=37; // coordinates of pose 4
	POSE_5_IDX: INT:=38; // coordinates of pose 5
	//RESERVED: INT:=39; // RESERVED
	//RESERVED: INT:=40; // RESERVED
	//RESERVED: INT:=41; // RESERVED
	//RESERVED: INT:=42; // RESERVED
	//RESERVED: INT:=43; // RESERVED
	HOM_POS_IDX: INT:=44; // homing offsets
	DEC_START_POS: INT:=45; // start position for the nc decoder
	TCP_POS_IDX: INT:=46; // tool center point offset
	PC2_POS_IDX: INT:=47; // part 2 coordinate system offset
	PC1_POS_IDX: INT:=48; // part 1 coordinate system offset
	MCS_POS_IDX: INT:=49; // machine (robot) coordinate system offset
	
	// vision registers
	//RESERVED: INT:=VIS_ARR_END-4; // RESERVED
	//RESERVED: INT:=VIS_ARR_END-3; // RESERVED
	//RESERVED: INT:=VIS_ARR_END-2; // RESERVED
	//RESERVED: INT:=VIS_ARR_END-1; // RESERVED
	//RESERVED: INT:=VIS_ARR_END; // RESERVED
	
	// flags
	HOM_TO_POSE_IDX: INT:=44;
	//RESERVED: INT:=45;
	//RESERVED: INT:=46;
	//RESERVED: INT:=47;
	HOME_COMPLETE: INT:=48;
	INIT_POS_IDX: INT:=49;
	
END_VAR

VAR_GLOBAL
	
	//
	PowerOn:BOOL;
	Homing: BOOL;
	Reset: BOOL;
	
	// command IO
	DigitalInput: ARRAY [DIG_IN_ARR_BEG..DIG_IN_ARR_END] OF BOOL;
	DigitalOutput: ARRAY [DIG_OUT_ARR_BEG..DIG_OUT_ARR_END] OF BOOL;
	CmdIO: ST_LogicCmdIO;
	
	// cnc (testing)
	g_x: REAL:=50; // feed rate
	g_y: REAL:=50;
	g_gripper: INT:=0;
	Servo0Position: BYTE;
	
	//
	MoveToPose1: BOOL;
	MoveToPose2: BOOL;
	Pose1: STRING(GVL.COMMAND_LEN);
	Pose2: STRING(GVL.COMMAND_LEN);
	
END_VAR</xhtml>
                </InterfaceAsPlainText>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                <ObjectId>1430d1bd-aa92-442c-bf72-190d0e907494</ObjectId>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/mixedattrsvarlist" handleUnknown="implementation">
                <MixedAttrsVarList>
                  <globalVars name="GVL" constant="true">
                    <variable name="dwMainInterval">
                      <type>
                        <DWORD />
                      </type>
                      <initialValue>
                        <simpleValue value="3000" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
                      </documentation>
                    </variable>
                    <variable name="dwMotionInterval">
                      <type>
                        <DWORD />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
                      </documentation>
                    </variable>
                    <variable name="dwVisionInterval">
                      <type>
                        <DWORD />
                      </type>
                      <initialValue>
                        <simpleValue value="20000" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
                      </documentation>
                    </variable>
                    <variable name="dwVisuInterval">
                      <type>
                        <DWORD />
                      </type>
                      <initialValue>
                        <simpleValue value="100000" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> us TODO reference this in task settings</xhtml>
                      </documentation>
                    </variable>
                    <variable name="DIG_OUT_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> array sizes</xhtml>
                      </documentation>
                    </variable>
                    <variable name="DIG_OUT_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="7" />
                      </initialValue>
                    </variable>
                    <variable name="DIG_IN_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="DIG_IN_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="7" />
                      </initialValue>
                    </variable>
                    <variable name="PROG_CMDS_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="PROG_CMDS_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of commands in a program</xhtml>
                      </documentation>
                    </variable>
                    <variable name="PROG_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="PROG_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="19" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of programs </xhtml>
                      </documentation>
                    </variable>
                    <variable name="POS_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="POS_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of stored positions</xhtml>
                      </documentation>
                    </variable>
                    <variable name="VIS_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="VIS_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of vision registers</xhtml>
                      </documentation>
                    </variable>
                    <variable name="FLG_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="FLG_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of flags</xhtml>
                      </documentation>
                    </variable>
                    <variable name="REG_ARR_BEG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="REG_ARR_END">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> total number of registers</xhtml>
                      </documentation>
                    </variable>
                    <variable name="COMMAND_LEN">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="255" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> length of command strings for command processor.
 if this is reduced then commands may stop working.</xhtml>
                      </documentation>
                    </variable>
                    <variable name="POSE_1_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="34" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 1</xhtml>
                      </documentation>
                    </variable>
                    <variable name="POSE_2_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="35" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 2</xhtml>
                      </documentation>
                    </variable>
                    <variable name="POSE_3_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="36" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 3</xhtml>
                      </documentation>
                    </variable>
                    <variable name="POSE_4_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="37" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 4</xhtml>
                      </documentation>
                    </variable>
                    <variable name="POSE_5_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="38" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinates of pose 5</xhtml>
                      </documentation>
                    </variable>
                    <variable name="HOM_POS_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="44" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> homing offsets</xhtml>
                      </documentation>
                    </variable>
                    <variable name="DEC_START_POS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="45" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> start position for the nc decoder</xhtml>
                      </documentation>
                    </variable>
                    <variable name="TCP_POS_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="46" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> tool center point offset</xhtml>
                      </documentation>
                    </variable>
                    <variable name="PC2_POS_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="47" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> part 2 coordinate system offset</xhtml>
                      </documentation>
                    </variable>
                    <variable name="PC1_POS_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="48" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> part 1 coordinate system offset</xhtml>
                      </documentation>
                    </variable>
                    <variable name="MCS_POS_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> machine (robot) coordinate system offset</xhtml>
                      </documentation>
                    </variable>
                    <variable name="HOM_TO_POSE_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="44" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> vision registers
RESERVED: INT:=VIS_ARR_END-4; // RESERVED
RESERVED: INT:=VIS_ARR_END-3; // RESERVED
RESERVED: INT:=VIS_ARR_END-2; // RESERVED
RESERVED: INT:=VIS_ARR_END-1; // RESERVED
RESERVED: INT:=VIS_ARR_END; // RESERVED
 flags</xhtml>
                      </documentation>
                    </variable>
                    <variable name="HOME_COMPLETE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="48" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">RESERVED: INT:=45;
RESERVED: INT:=46;
RESERVED: INT:=47;</xhtml>
                      </documentation>
                    </variable>
                    <variable name="INIT_POS_IDX">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="49" />
                      </initialValue>
                    </variable>
                  </globalVars>
                  <globalVars name="GVL">
                    <variable name="PowerOn">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Homing">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Reset">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="DigitalInput">
                      <type>
                        <array>
                          <dimension lower="DIG_IN_ARR_BEG" upper="DIG_IN_ARR_END" />
                          <baseType>
                            <BOOL />
                          </baseType>
                        </array>
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> command IO</xhtml>
                      </documentation>
                    </variable>
                    <variable name="DigitalOutput">
                      <type>
                        <array>
                          <dimension lower="DIG_OUT_ARR_BEG" upper="DIG_OUT_ARR_END" />
                          <baseType>
                            <BOOL />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="CmdIO">
                      <type>
                        <derived name="ST_LogicCmdIO" />
                      </type>
                    </variable>
                    <variable name="g_x">
                      <type>
                        <REAL />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> feed rate</xhtml>
                      </documentation>
                    </variable>
                    <variable name="g_y">
                      <type>
                        <REAL />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                    </variable>
                    <variable name="g_gripper">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="Servo0Position">
                      <type>
                        <BYTE />
                      </type>
                    </variable>
                    <variable name="MoveToPose1">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="MoveToPose2">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Pose1">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <variable name="Pose2">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                  </globalVars>
                </MixedAttrsVarList>
              </data>
            </addData>
          </globalVars>
          <globalVars name="PersistentVars" retain="true" persistent="true">
            <variable name="StoredPositions">
              <type>
                <array>
                  <dimension lower="GVL.POS_ARR_BEG" upper="GVL.POS_ARR_END" />
                  <baseType>
                    <derived name="DUT_StoredPosition" />
                  </baseType>
                </array>
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="order_in_persistent_editor" Value="1" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="VisionRegisters">
              <type>
                <array>
                  <dimension lower="GVL.VIS_ARR_BEG" upper="GVL.VIS_ARR_END" />
                  <baseType>
                    <derived name="DUT_VisionRegister" />
                  </baseType>
                </array>
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="order_in_persistent_editor" Value="2" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Flags">
              <type>
                <array>
                  <dimension lower="GVL.FLG_ARR_BEG" upper="GVL.FLG_ARR_END" />
                  <baseType>
                    <derived name="DUT_Flags" />
                  </baseType>
                </array>
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="order_in_persistent_editor" Value="3" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="Programs">
              <type>
                <array>
                  <dimension lower="GVL.PROG_ARR_BEG" upper="GVL.PROG_ARR_END" />
                  <baseType>
                    <derived name="DUT_Program" />
                  </baseType>
                </array>
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="order_in_persistent_editor" Value="0" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                <Attributes>
                  <Attribute Name="qualified_only" Value="" />
                  <Attribute Name="checksumnoinit_override" Value="3161106809" />
                  <Attribute Name="init_related_code" Value="bac351e4-1440-4031-887f-c3d65d99e6dc" />
                </Attributes>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                <InterfaceAsPlainText>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'qualified_only'}
VAR_GLOBAL PERSISTENT RETAIN
	Programs: ARRAY [GVL.PROG_ARR_BEG..GVL.PROG_ARR_END] OF DUT_Program;
	StoredPositions: ARRAY [GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
	VisionRegisters: ARRAY[GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister;
	Flags: ARRAY[GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags;
END_VAR</xhtml>
                </InterfaceAsPlainText>
              </data>
              <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                <ObjectId>3ec4e751-fd63-4486-9e96-20e1d2f269ab</ObjectId>
              </data>
            </addData>
          </globalVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_CncCmd">
                <baseType>
                  <struct>
                    <variable name="StartPos">
                      <type>
                        <derived name="SMC_PosInfo" />
                      </type>
                    </variable>
                    <variable name="OriConvention">
                      <type>
                        <derived name="SMC_ORI_CONVENTION" />
                      </type>
                      <initialValue>
                        <simpleValue value="SMC_ORI_CONVENTION.ZYX" />
                      </initialValue>
                    </variable>
                    <variable name="Filename">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'CNC_FromFile.cnc'" />
                      </initialValue>
                    </variable>
                    <variable name="CoordinateType">
                      <type>
                        <derived name="DUT_Command_CoordinateType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_CoordinateType.Variable" />
                      </initialValue>
                    </variable>
                    <variable name="ArrayIndex">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="GVL.DEC_START_POS" />
                      </initialValue>
                    </variable>
                    <variable name="ArrayType">
                      <type>
                        <derived name="DUT_Command_ArrayType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_ArrayType.StoredPosition" />
                      </initialValue>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_CncCmd :
STRUCT
	StartPos: 		SMC_PosInfo;				
	OriConvention: 	SMC_ORI_CONVENTION:=SMC_ORI_CONVENTION.ZYX;
	Filename: 		STRING:='CNC_FromFile.cnc';
	CoordinateType: DUT_Command_CoordinateType:=DUT_Command_CoordinateType.Variable;
	ArrayIndex: 	INT:=GVL.DEC_START_POS;
	ArrayType: 		DUT_Command_ArrayType:=DUT_Command_ArrayType.StoredPosition;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>bfbed99a-036f-4373-a7be-6feb43a2d296</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="DUT_Command">
                <baseType>
                  <struct>
                    <variable name="CommandType">
                      <type>
                        <derived name="DUT_CommandType" />
                      </type>
                    </variable>
                    <variable name="CommandString">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE DUT_Command :
STRUCT
	CommandType: DUT_CommandType;
	CommandString: STRING(GVL.COMMAND_LEN);
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>bc90f47c-5d1d-4a76-b85b-4fab785a8038</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="DUT_Program">
                <baseType>
                  <struct>
                    <variable name="ProgramName">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="Commands">
                      <type>
                        <array>
                          <dimension lower="GVL.PROG_CMDS_ARR_BEG" upper="GVL.PROG_CMDS_ARR_END" />
                          <baseType>
                            <derived name="DUT_Command" />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE DUT_Program :
STRUCT
	ProgramName: STRING;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>6dbc7d5e-b88c-421e-a648-117a087040e6</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="DUT_StoredPosition">
                <baseType>
                  <struct>
                    <variable name="Comment">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="Position">
                      <type>
                        <derived name="MC_COORD_REF" />
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE DUT_StoredPosition :
STRUCT
	Comment: STRING;
	Position: MC_COORD_REF;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>66e85fd8-6344-4340-a216-0e3ccb4605b3</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_VisionLocate">
                <baseType>
                  <struct>
                    <variable name="MaxParts">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="1" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> max number of parts to locate</xhtml>
                      </documentation>
                    </variable>
                    <variable name="MaxOverlap">
                      <type>
                        <REAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0.0" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> max overlap of parts. only needed if MaxParts is greater than zero.</xhtml>
                      </documentation>
                    </variable>
                    <variable name="Score">
                      <type>
                        <REAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0.6" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> min score</xhtml>
                      </documentation>
                    </variable>
                    <variable name="ToleranceAngle">
                      <type>
                        <REAL />
                      </type>
                      <initialValue>
                        <simpleValue value="90.0" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> max angle +/- to search</xhtml>
                      </documentation>
                    </variable>
                    <variable name="ResultPosition">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> location to store the results in the vision register array</xhtml>
                      </documentation>
                    </variable>
                    <variable name="TemplateName">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'Template.jpg'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> name of the template to search</xhtml>
                      </documentation>
                    </variable>
                    <variable name="ScriptFilename">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'FastTemplateMatching.py'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> name of the script that runs the vision program</xhtml>
                      </documentation>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_VisionLocate :
STRUCT
    MaxParts: 		UINT:=1; // max number of parts to locate
    MaxOverlap: 	REAL:=0.0; // max overlap of parts. only needed if MaxParts is greater than zero.
    Score: 			REAL:=0.6; // min score
    ToleranceAngle: REAL:=90.0; // max angle +/- to search
	ResultPosition: UINT:=0; // location to store the results in the vision register array
	TemplateName: 	STRING:='Template.jpg'; // name of the template to search
	ScriptFilename: STRING:='FastTemplateMatching.py'; // name of the script that runs the vision program
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>979edabc-249c-4294-9a6b-583c609d1013</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_VisionCalibrate">
                <baseType>
                  <struct>
                    <variable name="CheckerSize">
                      <type>
                        <REAL />
                      </type>
                      <initialValue>
                        <simpleValue value="25.0" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> this value is in user units ex mm</xhtml>
                      </documentation>
                    </variable>
                    <variable name="CheckerXCount">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="6" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> count of checker blocks in x coordinate</xhtml>
                      </documentation>
                    </variable>
                    <variable name="CheckerYCount">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="9" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> count of checker blocks in y coordinate</xhtml>
                      </documentation>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_VisionCalibrate :
STRUCT
    CheckerSize: REAL:=25.0; // this value is in user units ex mm
    CheckerXCount: UINT:=6; // count of checker blocks in x coordinate
    CheckerYCount: UINT:=9; // count of checker blocks in y coordinate
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>182d3d19-8ffc-4b3a-943b-f60486efdc5a</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_VisionCmd">
                <baseType>
                  <struct>
                    <variable name="CommandType">
                      <type>
                        <derived name="DUT_Command_VisionType" />
                      </type>
                    </variable>
                    <variable name="ImageWidth">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="640" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> pixel count in x direction (must be supported by camera)</xhtml>
                      </documentation>
                    </variable>
                    <variable name="ImageHeight">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="400" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> pixel coutn in y direction (must be supported by camera)</xhtml>
                      </documentation>
                    </variable>
                    <variable name="Calibrate">
                      <type>
                        <derived name="ST_VisionCalibrate" />
                      </type>
                    </variable>
                    <variable name="Locate">
                      <type>
                        <derived name="ST_VisionLocate" />
                      </type>
                    </variable>
                    <variable name="Timeout">
                      <type>
                        <UDINT />
                      </type>
                      <initialValue>
                        <simpleValue value="60" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> timeout in seconds</xhtml>
                      </documentation>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_VisionCmd :
STRUCT
    CommandType: DUT_Command_VisionType;
    ImageWidth: UINT:=640; // pixel count in x direction (must be supported by camera)
    ImageHeight: UINT:=400; // pixel coutn in y direction (must be supported by camera)
    Calibrate: ST_VisionCalibrate;
    Locate: ST_VisionLocate;
	Timeout: UDINT:=60; // timeout in seconds
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>bbefe0b0-9a20-4826-9638-01ab457504e9</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="DUT_VisionRegister">
                <baseType>
                  <struct>
                    <variable name="Scaling">
                      <type>
                        <REAL />
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>DUT_StoredPosition</Extends>
                    </Inheritance>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE DUT_VisionRegister EXTENDS DUT_StoredPosition :
STRUCT
	Scaling: REAL;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>183abbbc-75ca-4f97-a156-9832c2bf8b79</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="DUT_Flags">
                <baseType>
                  <struct>
                    <variable name="Comment">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <variable name="Value">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE DUT_Flags :
STRUCT
	Comment: STRING:='';
	Value: BOOL:=FALSE;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>22f963af-e04a-45ab-913c-8ad1ec5e38d9</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_MoveCmd">
                <baseType>
                  <struct>
                    <variable name="MoveType">
                      <type>
                        <derived name="DUT_Command_MoveType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_MoveType.DirectMove" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> common</xhtml>
                      </documentation>
                    </variable>
                    <variable name="Speed">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0.0" />
                      </initialValue>
                    </variable>
                    <variable name="CoordSystem">
                      <type>
                        <derived name="SMC_COORD_SYSTEM" />
                      </type>
                      <initialValue>
                        <simpleValue value="SMC_COORD_SYSTEM.ACS" />
                      </initialValue>
                    </variable>
                    <variable name="PositionType">
                      <type>
                        <derived name="DUT_Command_PositionType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_PositionType.AbsolutePosition" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> direct/linear moves</xhtml>
                      </documentation>
                    </variable>
                    <variable name="CoordinateType">
                      <type>
                        <derived name="DUT_Command_CoordinateType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_CoordinateType.Literal" />
                      </initialValue>
                    </variable>
                    <variable name="ArrayIndex">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="ArrayType">
                      <type>
                        <derived name="DUT_Command_ArrayType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_ArrayType.StoredPosition" />
                      </initialValue>
                    </variable>
                    <variable name="CoordRef">
                      <type>
                        <derived name="MC_COORD_REF" />
                      </type>
                      <initialValue>
                        <structValue>
                          <value member="X">
                            <simpleValue value="0" />
                          </value>
                          <value member="Y">
                            <simpleValue value="0" />
                          </value>
                          <value member="Z">
                            <simpleValue value="0" />
                          </value>
                          <value member="A">
                            <simpleValue value="0" />
                          </value>
                          <value member="B">
                            <simpleValue value="0" />
                          </value>
                          <value member="C">
                            <simpleValue value="0" />
                          </value>
                        </structValue>
                      </initialValue>
                    </variable>
                    <variable name="CircularCoordinateType">
                      <type>
                        <derived name="DUT_Command_CoordinateType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_CoordinateType.Literal" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> circular moves</xhtml>
                      </documentation>
                    </variable>
                    <variable name="CircularArrayIndex">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="CircularArrayType">
                      <type>
                        <derived name="DUT_Command_ArrayType" />
                      </type>
                      <initialValue>
                        <simpleValue value="DUT_Command_ArrayType.StoredPosition" />
                      </initialValue>
                    </variable>
                    <variable name="CircleMode">
                      <type>
                        <derived name="SMC_CIRC_MODE" />
                      </type>
                      <initialValue>
                        <simpleValue value="SMC_CIRC_MODE.CENTER" />
                      </initialValue>
                    </variable>
                    <variable name="PathChoice">
                      <type>
                        <derived name="MC_CIRC_PATHCHOICE" />
                      </type>
                      <initialValue>
                        <simpleValue value="MC_CIRC_PATHCHOICE.CLOCKWISE" />
                      </initialValue>
                    </variable>
                    <variable name="CoordRef2">
                      <type>
                        <derived name="MC_COORD_REF" />
                      </type>
                      <initialValue>
                        <structValue>
                          <value member="X">
                            <simpleValue value="0" />
                          </value>
                          <value member="Y">
                            <simpleValue value="0" />
                          </value>
                          <value member="Z">
                            <simpleValue value="0" />
                          </value>
                          <value member="A">
                            <simpleValue value="0" />
                          </value>
                          <value member="B">
                            <simpleValue value="0" />
                          </value>
                          <value member="C">
                            <simpleValue value="0" />
                          </value>
                        </structValue>
                      </initialValue>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_MoveCmd :
STRUCT
	// common
	MoveType: 					DUT_Command_MoveType:=DUT_Command_MoveType.DirectMove;
	Speed: 						LREAL:=0.0;
	CoordSystem: 				SMC_COORD_SYSTEM:=SMC_COORD_SYSTEM.ACS;
	
	// direct/linear moves
	PositionType: 				DUT_Command_PositionType:=DUT_Command_PositionType.AbsolutePosition;
	CoordinateType: 			DUT_Command_CoordinateType:=DUT_Command_CoordinateType.Literal;
	ArrayIndex: 				UINT:=0;
	ArrayType: 					DUT_Command_ArrayType:=DUT_Command_ArrayType.StoredPosition;
	CoordRef: 					MC_COORD_REF:=(X:=0, Y:=0, Z:=0, A:=0, B:=0, C:=0);
	
	// circular moves
	CircularCoordinateType: 	DUT_Command_CoordinateType:=DUT_Command_CoordinateType.Literal;
	CircularArrayIndex: 		UINT:=0;
	CircularArrayType: 			DUT_Command_ArrayType:=DUT_Command_ArrayType.StoredPosition;
	CircleMode: 				SMC_CIRC_MODE:=SMC_CIRC_MODE.CENTER;
	PathChoice: 				MC_CIRC_PATHCHOICE:=MC_CIRC_PATHCHOICE.CLOCKWISE;
	CoordRef2: 					MC_COORD_REF:=(X:=0, Y:=0, Z:=0, A:=0, B:=0, C:=0);
	
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>f71cc9b7-cb4b-485a-9aed-2944bbd084ca</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_OutputCmd">
                <baseType>
                  <struct>
                    <variable name="OutputType">
                      <type>
                        <derived name="DUT_OutputType" />
                      </type>
                    </variable>
                    <variable name="OutputTarget">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="OutputValue1">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <variable name="OutputValue2">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_OutputCmd :
STRUCT
	OutputType: DUT_OutputType;
	OutputTarget: INT;
	OutputValue1: LREAL;
	OutputValue2: LREAL;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>8d0742ed-4361-441a-8bce-40feb4d004c2</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_PauseCmd">
                <baseType>
                  <struct>
                    <variable name="PauseTime">
                      <type>
                        <TIME />
                      </type>
                      <initialValue>
                        <simpleValue value="TIME#1s0ms" />
                      </initialValue>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_PauseCmd :
STRUCT
	PauseTime: TIME:=T#1S;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>be976acf-5a13-4a9d-8d9f-61e2df7de507</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_VarSetCmd">
                <baseType>
                  <struct>
                    <variable name="ArrayType">
                      <type>
                        <derived name="DUT_Command_ArrayType" />
                      </type>
                    </variable>
                    <variable name="ArrayIndex">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="Coordinates">
                      <type>
                        <derived name="MC_COORD_REF" />
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_VarSetCmd :
STRUCT
	ArrayType: DUT_Command_ArrayType;
	ArrayIndex: INT;
	Coordinates: MC_COORD_REF;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>0b1a37a4-4123-4a33-84fb-db1ab5afd1a7</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_LogicCmdIO">
                <baseType>
                  <struct>
                    <variable name="Input">
                      <type>
                        <array>
                          <dimension lower="GVL.DIG_IN_ARR_BEG" upper="GVL.DIG_IN_ARR_END" />
                          <baseType>
                            <BOOL />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="Output">
                      <type>
                        <array>
                          <dimension lower="GVL.DIG_OUT_ARR_BEG" upper="GVL.DIG_OUT_ARR_END" />
                          <baseType>
                            <BOOL />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="Register">
                      <type>
                        <array>
                          <dimension lower="GVL.REG_ARR_BEG" upper="GVL.REG_ARR_END" />
                          <baseType>
                            <UDINT />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="Counter">
                      <type>
                        <array>
                          <dimension lower="GVL.REG_ARR_BEG" upper="GVL.REG_ARR_END" />
                          <baseType>
                            <UDINT />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_LogicCmdIO :
STRUCT
	Input: ARRAY [GVL.DIG_IN_ARR_BEG..GVL.DIG_IN_ARR_END] OF BOOL;
	Output: ARRAY [GVL.DIG_OUT_ARR_BEG..GVL.DIG_OUT_ARR_END] OF BOOL;
	Register: ARRAY [GVL.REG_ARR_BEG..GVL.REG_ARR_END] OF UDINT;
	Counter: ARRAY [GVL.REG_ARR_BEG..GVL.REG_ARR_END] OF UDINT;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>d9e4da03-9627-4669-97eb-9d4d80e11f49</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
              <dataType name="ST_LogicCmd">
                <baseType>
                  <struct>
                    <variable name="IF_Condition">
                      <type>
                        <derived name="E_LogicIfCondition" />
                      </type>
                    </variable>
                    <variable name="IF_Condition_Idx">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="IF_Condition_Operator">
                      <type>
                        <derived name="E_LogicIfConditionOperator" />
                      </type>
                    </variable>
                    <variable name="IF_Condition_Operator_Value">
                      <type>
                        <UDINT />
                      </type>
                    </variable>
                    <variable name="THEN_Function">
                      <type>
                        <derived name="E_LogicFunction" />
                      </type>
                    </variable>
                    <variable name="THEN_Function_Value">
                      <type>
                        <UDINT />
                      </type>
                    </variable>
                    <variable name="THEN_Function_Idx">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="ELSE_Function">
                      <type>
                        <derived name="E_LogicFunction" />
                      </type>
                    </variable>
                    <variable name="ELSE_Function_Idx">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="ELSE_Function_Value">
                      <type>
                        <UDINT />
                      </type>
                    </variable>
                  </struct>
                </baseType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE ST_LogicCmd :
STRUCT
	IF_Condition : E_LogicIfCondition;
	IF_Condition_Idx: INT;
	IF_Condition_Operator: E_LogicIfConditionOperator;
	IF_Condition_Operator_Value: UDINT;
	THEN_Function: E_LogicFunction;
	THEN_Function_Value: UDINT;
	THEN_Function_Idx: INT;
	ELSE_Function: E_LogicFunction;
	ELSE_Function_Idx: INT;
	ELSE_Function_Value: UDINT;
END_STRUCT
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>c4e12c65-0b92-43d3-a6f5-ab4569642ec6</ObjectId>
                  </data>
                </addData>
              </dataType>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
              <Interface name="ITFModule" ObjectId="83e2f220-b628-4cc1-8425-5ccb3ca1431d">
                <Methods>
                  <Method name="M_Start" ObjectId="ede511b9-4a8a-4fd7-9a81-92329944db01">
                    <interface />
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_Start
VAR_INPUT
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Method>
                  <Method name="M_Stop" ObjectId="b5172065-9e2b-4628-992b-67cbdd66121e">
                    <interface />
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_Stop
VAR_INPUT
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Method>
                  <Method name="M_Home" ObjectId="fa5ae12d-e278-43b8-b9fb-522a2f8363df">
                    <interface />
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_Home
VAR_INPUT
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Method>
                  <Method name="M_Abort" ObjectId="d4b36388-2c40-4a2a-840c-a7558cccf32c">
                    <interface />
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_Abort
VAR_INPUT
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Method>
                  <Method name="M_Hold" ObjectId="74dca715-0832-4e57-bd11-fa5482a40ca4">
                    <interface />
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_Hold
VAR_INPUT
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Method>
                </Methods>
                <Properties>
                  <Property name="PropCurrentState" ObjectId="4900066d-af26-4295-98da-8b49be553787">
                    <interface>
                      <returnType>
                        <derived name="PACK_ML.State" />
                      </returnType>
                      <Attributes>
                        <Attribute Name="monitoring" Value="variable" />
                      </Attributes>
                    </interface>
                    <GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                    </GetAccessor>
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropCurrentState : PACK_ML.State</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Property>
                  <Property name="PropBusy" ObjectId="826777bf-f2fe-40ca-a5f3-f2f24fef4c48">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <Attributes>
                        <Attribute Name="monitoring" Value="variable" />
                      </Attributes>
                    </interface>
                    <GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                      </InterfaceAsPlainText>
                    </GetAccessor>
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropBusy : BOOL</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Property>
                  <Property name="PropError" ObjectId="8b3b149d-5bc9-492d-bf03-7c656df23d5f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <Attributes>
                        <Attribute Name="monitoring" Value="variable" />
                      </Attributes>
                    </interface>
                    <GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                      </InterfaceAsPlainText>
                    </GetAccessor>
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropError : BOOL</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Property>
                  <Property name="PropErrDescription" ObjectId="c91c07e4-f8e0-4585-a6d3-d7b49542a264">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <Attributes>
                        <Attribute Name="monitoring" Value="variable" />
                      </Attributes>
                    </interface>
                    <GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                      </InterfaceAsPlainText>
                    </GetAccessor>
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropErrDescription : STRING</xhtml>
                    </InterfaceAsPlainText>
                    <addData />
                  </Property>
                </Properties>
                <InterfaceAsPlainText>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">INTERFACE ITFModule
</xhtml>
                </InterfaceAsPlainText>
                <addData />
              </Interface>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="_00_Main" pouType="program">
                <interface>
                  <localVars>
                    <variable name="SMC_Homing_J1">
                      <type>
                        <derived name="SMC_Homing" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> drive parameters
SM_Drive_PosControl_J1.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J2.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J3.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J4.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J5.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J6.controller.fDeadTime := 2.0;
 homing</xhtml>
                      </documentation>
                    </variable>
                    <variable name="SMC_Homing_J2">
                      <type>
                        <derived name="SMC_Homing" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> drive parameters
SM_Drive_PosControl_J1.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J2.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J3.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J4.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J5.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J6.controller.fDeadTime := 2.0;
 homing</xhtml>
                      </documentation>
                    </variable>
                    <variable name="SMC_Homing_J3">
                      <type>
                        <derived name="SMC_Homing" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> drive parameters
SM_Drive_PosControl_J1.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J2.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J3.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J4.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J5.controller.fDeadTime := 2.0;
SM_Drive_PosControl_J6.controller.fDeadTime := 2.0;
 homing</xhtml>
                      </documentation>
                    </variable>
                    <variable name="SMC_Homing_J4">
                      <type>
                        <derived name="SMC_Homing" />
                      </type>
                    </variable>
                    <variable name="SMC_Homing_J5">
                      <type>
                        <derived name="SMC_Homing" />
                      </type>
                    </variable>
                    <variable name="SMC_Homing_J6">
                      <type>
                        <derived name="SMC_Homing" />
                      </type>
                    </variable>
                    <variable name="HomingSequence">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="SMC_GroupPower_J">
                      <type>
                        <derived name="SMC_GroupPower" />
                      </type>
                    </variable>
                    <variable name="MC_GroupReset_J">
                      <type>
                        <derived name="MC_GroupReset" />
                      </type>
                    </variable>
                    <variable name="MC_GroupEnable_J">
                      <type>
                        <derived name="MC_GroupEnable" />
                      </type>
                    </variable>
                    <variable name="MC_GroupDisable_J">
                      <type>
                        <derived name="MC_GroupDisable" />
                      </type>
                    </variable>
                    <variable name="HomingVelocityFast">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="20.0" />
                      </initialValue>
                    </variable>
                    <variable name="HomingAcceleration">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="100.0" />
                      </initialValue>
                    </variable>
                    <variable name="ProcessJog">
                      <type>
                        <derived name="JogProcessor" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> jogging</xhtml>
                      </documentation>
                    </variable>
                    <variable name="JogStatusText">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="VisuStruct3DControl_J">
                      <type>
                        <derived name="VisuStruct3DControl" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> cnc</xhtml>
                      </documentation>
                    </variable>
                    <variable name="TrackPosition">
                      <type>
                        <derived name="PositionTracker" />
                      </type>
                    </variable>
                    <variable name="PowerOn">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> command processor</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_MoveCommandParser">
                      <type>
                        <derived name="ParseMoveCmd" />
                      </type>
                    </variable>
                    <variable name="ProcessMoveCommand">
                      <type>
                        <derived name="MoveCmdProcessor" />
                      </type>
                    </variable>
                    <variable name="ProcessMoveCommand_Execute">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ProcessMoveCommand_Reset">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ProcessMoveStatusText">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="ProcessCommands">
                      <type>
                        <derived name="CommandProcessor" />
                      </type>
                    </variable>
                    <variable name="ProcessCommands_Execute">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ProcessCommand_Cancel">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ProcessCommand_Reset">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ProcessCommand_ActiveProgram">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="StMoveCmdPose1">
                      <type>
                        <derived name="ST_MoveCmd" />
                      </type>
                    </variable>
                    <variable name="StMoveCmdPose2">
                      <type>
                        <derived name="ST_MoveCmd" />
                      </type>
                    </variable>
                    <variable name="Abort">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_pResultRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> vision</xhtml>
                      </documentation>
                    </variable>
                    <variable name="Vision_BitmapVersion">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="Vision_CaptureImage">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_CapImgCmdAccepted">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_RunCalibration">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_RunCalCmdAccepted">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_LocatePart">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_LocPartCmdAccepted">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_StreamCamera">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_StrCamCmdAccepted">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_Cancel">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Vision_Reset">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="BuildTests">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                    <variable name="FirstScan">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="TRUE" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _00_Main
VAR
	// drive parameters
	//SM_Drive_PosControl_J1.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J2.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J3.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J4.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J5.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J6.controller.fDeadTime := 2.0;
	
	// homing
	SMC_Homing_J1,SMC_Homing_J2,SMC_Homing_J3: SMC_Homing;
	SMC_Homing_J4,SMC_Homing_J5,SMC_Homing_J6: SMC_Homing;
	HomingSequence: INT := 0;
	SMC_GroupPower_J: SMC_GroupPower;
	MC_GroupReset_J: MC_GroupReset;
	MC_GroupEnable_J : MC_GroupEnable;
	MC_GroupDisable_J : MC_GroupDisable;
	HomingVelocityFast: LREAL:= 20.0;
	HomingAcceleration: LREAL:= 100.0;
	
	// jogging
	ProcessJog: JogProcessor;
	JogStatusText: STRING(255);
	
	// cnc
	VisuStruct3DControl_J: VisuStruct3DControl;
	TrackPosition: PositionTracker;
	
	// command processor
	PowerOn: BOOL:=FALSE;
	_MoveCommandParser: ParseMoveCmd;
	ProcessMoveCommand: MoveCmdProcessor;
	ProcessMoveCommand_Execute: BOOL;
	ProcessMoveCommand_Reset: BOOL;
	ProcessMoveStatusText: STRING(255);
	ProcessCommands: CommandProcessor;
	ProcessCommands_Execute: BOOL;
	ProcessCommand_Cancel: BOOL;
	ProcessCommand_Reset: BOOL;
	ProcessCommand_ActiveProgram: UINT := 0;
	StMoveCmdPose1: ST_MoveCmd;
	StMoveCmdPose2: ST_MoveCmd;
	Abort: BOOL;
	
	// vision
	Vision_pResultRtrig: R_TRIG;
	Vision_BitmapVersion: INT;
	Vision_CaptureImage: BOOL;
	Vision_CapImgCmdAccepted: BOOL;
	Vision_RunCalibration: BOOL;
	Vision_RunCalCmdAccepted: BOOL;
	Vision_LocatePart: BOOL;
	Vision_LocPartCmdAccepted: BOOL;
	Vision_StreamCamera: BOOL;
	Vision_StrCamCmdAccepted: BOOL;
	Vision_Cancel: BOOL;
	Vision_Reset: BOOL;
	
	//
	BuildTests: BOOL:=FALSE;
	FirstScan: BOOL:=TRUE;

END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <actions>
                  <action name="A_Homing">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT GVL.PowerOn AND HomingSequence &gt; 0 AND HomingSequence &lt; 999  THEN
	HomingSequence := 999;
END_IF

CASE HomingSequence OF
  999: //
		SMC_GroupPower_J.Enable := FALSE;
		SMC_GroupPower_J.bDriveStart := FALSE;
		SMC_GroupPower_J.bRegulatorOn := FALSE;
		MC_GroupEnable_J.Execute := FALSE;
		MC_GroupDisable_J.Execute := FALSE;
		ProcessMoveCommand_Execute := FALSE;
		SMC_Homing_J1.bExecute := FALSE;
		SMC_Homing_J2.bExecute := FALSE;
		SMC_Homing_J3.bExecute := FALSE;
		SMC_Homing_J4.bExecute := FALSE;
		SMC_Homing_J5.bExecute := FALSE;
		SMC_Homing_J6.bExecute := FALSE;
		SM_Drive_PosControl_J1.bSWLimitEnable := TRUE;
		SM_Drive_PosControl_J2.bSWLimitEnable := TRUE;
		SM_Drive_PosControl_J3.bSWLimitEnable := TRUE;
		SM_Drive_PosControl_J4.bSWLimitEnable := TRUE;
		SM_Drive_PosControl_J5.bSWLimitEnable := TRUE;
		SM_Drive_PosControl_J6.bSWLimitEnable := TRUE;
  		HomingSequence := 0;
		
	0: //
		IF GVL.Homing AND GVL.PowerOn THEN
			GVL.Homing := FALSE;
			SMC_GroupPower_J.Enable := TRUE;
			SMC_GroupPower_J.bDriveStart := TRUE;
			SMC_GroupPower_J.bRegulatorOn := TRUE;
			PersistentVars.Flags[GVL.HOME_COMPLETE].Value := FALSE;
			HomingSequence := 5;
		END_IF
		
	5:
		IF SMC_GroupPower_J.Status THEN
			MC_GroupEnable_J.Execute := TRUE;
			HomingSequence := 10;
		END_IF
		
	10:
		IF NOT MC_GroupEnable_J.Busy THEN
			HomingSequence := 20;
		END_IF
		
	20: //
		SMC_Homing_J1.bExecute := TRUE;
		SMC_Homing_J2.bExecute := TRUE;
		SMC_Homing_J3.bExecute := TRUE;
		SMC_Homing_J4.bExecute := TRUE;
		SMC_Homing_J5.bExecute := TRUE;
		SMC_Homing_J6.bExecute := TRUE;
		SMC_Homing_J1.bReturnToZero := FALSE;
		SMC_Homing_J2.bReturnToZero := FALSE;
		SMC_Homing_J3.bReturnToZero := FALSE;
		SMC_Homing_J4.bReturnToZero := FALSE;
		SMC_Homing_J5.bReturnToZero := FALSE;
		SMC_Homing_J6.bReturnToZero := FALSE;
		SMC_Homing_J1.fVelocitySlow := 10.0;
		SMC_Homing_J2.fVelocitySlow := 10.0;
		SMC_Homing_J3.fVelocitySlow := 10.0;
		SMC_Homing_J4.fVelocitySlow := 10.0;
		SMC_Homing_J5.fVelocitySlow := 10.0;
		SMC_Homing_J6.fVelocitySlow := 10.0;
		SM_Drive_PosControl_J1.bSWLimitEnable := FALSE;
		SM_Drive_PosControl_J2.bSWLimitEnable := FALSE;
		SM_Drive_PosControl_J3.bSWLimitEnable := FALSE;
		SM_Drive_PosControl_J4.bSWLimitEnable := FALSE;
		SM_Drive_PosControl_J5.bSWLimitEnable := FALSE;
		SM_Drive_PosControl_J6.bSWLimitEnable := FALSE;
		HomingSequence := 30;
		
	30: //
		IF SMC_Homing_J1.bDone
			AND SMC_Homing_J2.bDone
			AND SMC_Homing_J3.bDone
			AND SMC_Homing_J4.bDone
			AND SMC_Homing_J5.bDone
			AND SMC_Homing_J6.bDone THEN
				SMC_Homing_J1.bExecute := FALSE;
				SMC_Homing_J2.bExecute := FALSE;
				SMC_Homing_J3.bExecute := FALSE;
				SMC_Homing_J4.bExecute := FALSE;
				SMC_Homing_J5.bExecute := FALSE;
				SMC_Homing_J6.bExecute := FALSE;
				HomingSequence := 40;
		END_IF
		
	40: //
		SMC_Homing_J1.bExecute := TRUE;
		SMC_Homing_J2.bExecute := TRUE;
		SMC_Homing_J3.bExecute := TRUE;
		SMC_Homing_J4.bExecute := TRUE;
		SMC_Homing_J5.bExecute := TRUE;
		SMC_Homing_J6.bExecute := TRUE;
		IF NOT PersistentVars.Flags[GVL.HOM_TO_POSE_IDX].Value THEN
			SMC_Homing_J1.bReturnToZero := TRUE;
			SMC_Homing_J2.bReturnToZero := TRUE;
			SMC_Homing_J3.bReturnToZero := TRUE;
			SMC_Homing_J4.bReturnToZero := TRUE;
			SMC_Homing_J5.bReturnToZero := TRUE;
			SMC_Homing_J6.bReturnToZero := TRUE;
		END_IF
		SMC_Homing_J1.fVelocitySlow := 2.0;
		SMC_Homing_J2.fVelocitySlow := 2.0;
		SMC_Homing_J3.fVelocitySlow := 2.0;
		SMC_Homing_J4.fVelocitySlow := 2.0;
		SMC_Homing_J5.fVelocitySlow := 2.0;
		SMC_Homing_J6.fVelocitySlow := 2.0;
		HomingSequence := 50;
		
	50: //
		IF SMC_Homing_J1.bDone
			AND SMC_Homing_J2.bDone
			AND SMC_Homing_J3.bDone
			AND SMC_Homing_J4.bDone
			AND SMC_Homing_J5.bDone
			AND SMC_Homing_J6.bDone THEN
				SMC_Homing_J1.bExecute := FALSE;
				SMC_Homing_J2.bExecute := FALSE;
				SMC_Homing_J3.bExecute := FALSE;
				SMC_Homing_J4.bExecute := FALSE;
				SMC_Homing_J5.bExecute := FALSE;
				SMC_Homing_J6.bExecute := FALSE;
				IF NOT PersistentVars.Flags[GVL.HOM_TO_POSE_IDX].Value THEN
					HomingSequence := 60;
				ELSE
					HomingSequence := 100;
				END_IF
				PersistentVars.Flags[GVL.HOME_COMPLETE].Value := TRUE;
		END_IF
		
	60:
		MC_GroupDisable_J.Execute := TRUE;
		HomingSequence := 70;
		
	70:
		IF NOT MC_GroupDisable_J.Busy THEN
			HomingSequence := 999;
		END_IF
		
	100: //
		ProcessMoveCommand.Command := GVL.Pose2;
		ProcessMoveCommand.M_Start();
		HomingSequence := 110;
		
	110: //
		IF ProcessMoveCommand.ItfUnitMode.CurrentState = PACK_ML.State.Idle 
			OR NOT ProcessMoveCommand_Execute THEN
				ProcessMoveCommand_Execute := FALSE;
				HomingSequence := 999;
		END_IF

END_CASE

SMC_Homing_J1(
	Axis:=SM_Drive_PosControl_J1 , 
	bExecute:= ,
	fHomePosition:= PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.X, 
	fVelocitySlow:= , 
	fVelocityFast:= HomingVelocityFast, 
	fAcceleration:= HomingAcceleration, 
	fDeceleration:= HomingAcceleration, 
	fJerk:= 1000.0, 
	nDirection:= MC_direction.negative, 
	bReferenceSwitch:= NOT _10_Drives.rx_j1_limit, 
	fSignalDelay:= , 
	nHomingMode:= , 
	bReturnToZero:= , 
	bIndexOccured:= , 
	fIndexPosition:= , 
	bIgnoreHWLimit:= TRUE, 
	bDone=&gt; , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	nErrorID=&gt; , 
	bStartLatchingIndex=&gt; );
	
SMC_Homing_J2(
	Axis:=SM_Drive_PosControl_J2 , 
	bExecute:= , 
	fHomePosition:= PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.Y,  
	fVelocitySlow:= , 
	fVelocityFast:= HomingVelocityFast, 
	fAcceleration:= HomingAcceleration, 
	fDeceleration:= HomingAcceleration,
	fJerk:= 1000.0, 
	nDirection:= MC_Direction.negative, 
	bReferenceSwitch:= NOT _10_Drives.rx_j2_limit, 
	fSignalDelay:= , 
	nHomingMode:= , 
	bReturnToZero:= , 
	bIndexOccured:= , 
	fIndexPosition:= , 
	bIgnoreHWLimit:= TRUE, 
	bDone=&gt; , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	nErrorID=&gt; , 
	bStartLatchingIndex=&gt; );
	
SMC_Homing_J3(
	Axis:=SM_Drive_PosControl_J3 , 
	bExecute:= , 
	fHomePosition:= PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.Z, 
	fVelocitySlow:= , 
	fVelocityFast:= HomingVelocityFast, 
	fAcceleration:= HomingAcceleration, 
	fDeceleration:= HomingAcceleration,
	fJerk:= 1000.0, 
	nDirection:= MC_Direction.positive, 
	bReferenceSwitch:= NOT _10_Drives.rx_j3_limit, 
	fSignalDelay:= , 
	nHomingMode:= , 
	bReturnToZero:= , 
	bIndexOccured:= , 
	fIndexPosition:= , 
	bIgnoreHWLimit:= TRUE, 
	bDone=&gt; , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	nErrorID=&gt; , 
	bStartLatchingIndex=&gt; );
	
SMC_Homing_J4(
	Axis:=SM_Drive_PosControl_J4 , 
	bExecute:= ,
	fHomePosition:= PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.A, 
	fVelocitySlow:= , 
	fVelocityFast:= HomingVelocityFast, 
	fAcceleration:= HomingAcceleration, 
	fDeceleration:= HomingAcceleration,
	fJerk:= 1000.0, 
	nDirection:= MC_Direction.positive, 
	bReferenceSwitch:= NOT _10_Drives.rx_j4_limit, 
	fSignalDelay:= , 
	nHomingMode:= , 
	bReturnToZero:= , 
	bIndexOccured:= , 
	fIndexPosition:= , 
	bIgnoreHWLimit:= TRUE, 
	bDone=&gt; , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	nErrorID=&gt; , 
	bStartLatchingIndex=&gt; );
	
SMC_Homing_J5(
	Axis:=SM_Drive_PosControl_J5 , 
	bExecute:= , 
	fHomePosition:= PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.B,  
	fVelocitySlow:= , 
	fVelocityFast:= HomingVelocityFast, 
	fAcceleration:= HomingAcceleration, 
	fDeceleration:= HomingAcceleration,
	fJerk:= 1000, 
	nDirection:= MC_Direction.positive, 
	bReferenceSwitch:= NOT _10_Drives.rx_j5_limit, 
	fSignalDelay:= , 
	nHomingMode:= , 
	bReturnToZero:= , 
	bIndexOccured:= , 
	fIndexPosition:= , 
	bIgnoreHWLimit:= TRUE, 
	bDone=&gt; , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	nErrorID=&gt; , 
	bStartLatchingIndex=&gt; );
	
SMC_Homing_J6(
	Axis:=SM_Drive_PosControl_J6 , 
	bExecute:= , 
	fHomePosition:= PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.C, 
	fVelocitySlow:= , 
	fVelocityFast:= HomingVelocityFast, 
	fAcceleration:= HomingAcceleration, 
	fDeceleration:= HomingAcceleration,
	fJerk:= 1000.0, 
	nDirection:= MC_Direction.negative, 
	bReferenceSwitch:= NOT _10_Drives.rx_j6_limit, 
	fSignalDelay:= , 
	nHomingMode:= , 
	bReturnToZero:= , 
	bIndexOccured:= , 
	fIndexPosition:= , 
	bIgnoreHWLimit:= TRUE, 
	bDone=&gt; , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	nErrorID=&gt; , 
	bStartLatchingIndex=&gt; );

SMC_GroupPower_J(
	AxisGroup:= ArfBotAxisGroup, 
	Enable:=,
	bRegulatorOn:= SMC_GroupPower_J.Enable,
	bDriveStart:= SMC_GroupPower_J.Enable, 
	Status=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
		 
MC_GroupEnable_J(
	AxisGroup:=ArfBotAxisGroup,
	Execute:=,
	CompatibilityOptions:=,
	Done=&gt;,
	Busy=&gt;,
	Error=&gt;,
	ErrorID=&gt;);
		 
MC_GroupDisable_J(
	AxisGroup:=ArfBotAxisGroup,
	Execute:=,
	Done=&gt;,
	Busy=&gt;,
	Error=&gt;,
	ErrorID=&gt;);	
		 
MC_GroupReset_J(
	AxisGroup:=ArfBotAxisGroup , 
	Execute:= GVL.Reset, 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>f2e63d02-3be2-41b0-9585-ce3f612286f3</ObjectId>
                      </data>
                    </addData>
                  </action>
                  <action name="A_Processor">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
//	TODO need to get this removed and instead build a program for the poses
IF GVL.MoveToPose1 THEN
	GVL.MoveToPose1 := FALSE;
	IF GVL.PowerOn AND PersistentVars.Flags[GVL.HOME_COMPLETE].Value THEN
		ProcessMoveCommand.Command := GVL.Pose1;
		ProcessMoveCommand.M_Start();
	END_IF
ELSIF GVL.MoveToPose2 THEN
	GVL.MoveToPose2 := FALSE;
	IF GVL.PowerOn AND PersistentVars.Flags[GVL.HOME_COMPLETE].Value THEN
		ProcessMoveCommand.Command := GVL.Pose2;
		ProcessMoveCommand.M_Start();
	END_IF
END_IF

// TODO need to get this removed and instead build a program for the poses
ProcessMoveCommand(
	StoredPositions:= PersistentVars.StoredPositions,
	VisionRegisters:= PersistentVars.VisionRegisters,
	Flags:= PersistentVars.Flags,
	AxisGroup:= ArfBotAxisGroup, 
	Acceleration:= 1000, 
	AccFactor:= 0.05,
	Jerk:= 1000,
	JerkFactor:= 1, 
	Position=&gt; ,
	ItfUnitMode=&gt; , 
	Error=&gt; );
IF ProcessMoveCommand_Reset OR GVL.Reset THEN
	ProcessMoveCommand_Reset := FALSE;
	ProcessMoveStatusText := '';
	ProcessMoveCommand.M_Home();
END_IF
IF ProcessMoveCommand.Error THEN
	ProcessMoveStatusText := CONCAT('Move Processor Error: ',ProcessMoveCommand.ErrorDescription) ;
END_IF

//
IF Abort THEN
	Abort := FALSE;
	IF NOT GVL.PowerOn THEN
		ProcessCommands.M_Abort();
		ProcessMoveCommand.M_Abort();
	END_IF
END_IF
IF ProcessCommands_Execute THEN
	ProcessCommands_Execute := FALSE;
	ProcessCommands.Commands := PersistentVars.Programs[ProcessCommand_ActiveProgram].Commands;
	ProcessCommands.M_Start();
END_IF
IF ProcessCommand_Cancel THEN
	ProcessCommand_Cancel := FALSE;
	ProcessCommands.M_Stop();
END_IF
IF ProcessCommand_Reset OR GVL.Reset THEN
	ProcessCommand_Reset := FALSE;
	ProcessCommands.M_Home();
END_IF
ProcessCommands(
	StoredPositions:=PersistentVars.StoredPositions,
	VisionRegisters:=PersistentVars.VisionRegisters,
	Flags:=PersistentVars.Flags,
	AxisGroup:= ArfBotAxisGroup,
	Servo1:= AdafruitPwm01,
	Servo2:= AdafruitPwm02,
	Enable:= GVL.PowerOn AND PersistentVars.Flags[GVL.HOME_COMPLETE].Value,
	Commands:= , 
	ActiveCommand =&gt; ,
	Error=&gt; ,
	StatusText=&gt;);	</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>ae5380b9-92ad-46ee-9c84-91a9f5dcdbb0</ObjectId>
                      </data>
                    </addData>
                  </action>
                  <action name="A_CNC">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// track position of robot end effector to display on hmi
TrackPosition(
	AxisGroup:=ArfBotAxisGroup,
	SM3_Drive_PosControl_J1:=SM_Drive_PosControl_J1,
	SM3_Drive_PosControl_J2:=SM_Drive_PosControl_J2,
	SM3_Drive_PosControl_J3:=SM_Drive_PosControl_J3,
	SM3_Drive_PosControl_J4:=SM_Drive_PosControl_J4,
	SM3_Drive_PosControl_J5:=SM_Drive_PosControl_J5,
	SM3_Drive_PosControl_J6:=SM_Drive_PosControl_J6,
	VisuStruct3DTrack=&gt;,
	Arm=&gt;,
	Elbow=&gt;,
	Hand=&gt;);
	
(*ProcessCnc(
	AxisGroup:=ArfBotAxisGroup,
	SM3_Drive_PosControl_J1:=SM_Drive_PosControl_J1,
	SM3_Drive_PosControl_J2:=SM_Drive_PosControl_J2,
	SM3_Drive_PosControl_J3:=SM_Drive_PosControl_J3,
	SM3_Drive_PosControl_J4:=SM_Drive_PosControl_J4,
	SM3_Drive_PosControl_J5:=SM_Drive_PosControl_J5,
	SM3_Drive_PosControl_J6:=SM_Drive_PosControl_J6,
	GapVelocity:= , 
	AvoidGaps:= , 
	GapAccel:= );*)

// set the start position for the MC_NCDecoder
// alternatively, we can set this in the CNC program properties
(*GVL.StartPos.dX:=PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.X;
GVL.StartPos.dY:=PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.Y;
GVL.StartPos.dZ:=PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.Z;
GVL.StartPos.dA:=PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.A;
GVL.StartPos.dB:=PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.B;
GVL.StartPos.dC:=PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.C;

IF TestExecute THEN
	TestExecute := FALSE;
	ProcessCnc.M_Execute(	FileName:='CNC_FromFile.cnc', 
							StartPos:=GVL.StartPos); // TODO 
END_IF
IF TestReset THEN
	TestReset := FALSE;
	ProcessCnc.M_Reset();
END_IF
IF TestCancel THEN
	TestCancel := FALSE;
	ProcessCnc.M_Cancel();
END_IF*)</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>97687326-e3d4-419e-86a9-0dab28668222</ObjectId>
                      </data>
                    </addData>
                  </action>
                  <action name="A_Jogging">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
ProcessJog(
	AxisGroup:= ArfBotAxisGroup,
	Enable:= GVL.PowerOn,
	Reset:= GVL.Reset,
	ABC_as_ACS=&gt;,
	CoordSystem=&gt;, 
	Position=&gt;, 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
IF ProcessJog.Reset THEN
	JogStatusText := '';
END_IF
IF ProcessJog.Error THEN
	JogStatusText := CONCAT('Jog Processor Error: ',
						CONCAT(TO_STRING(ProcessJog.ErrorID),
						CONCAT(' ', SMC_ErrorString(ProcessJog.ErrorID,
									SMC_Language_Type.english)))) ;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>bdfecab8-b622-4af2-a993-25405a7b80c0</ObjectId>
                      </data>
                    </addData>
                  </action>
                  <action name="A_Vision">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// tell HMI to update image
//Vision_pResultRtrig(clk := _40_Vision.ProcessVisionCommand.ItfUnitMode.CurrentState = PACK_ML.State.Idle); TODO this causes an exception because ProcessVisionCommand has not went through first scan yet
Vision_pResultRtrig(clk := NOT _40_Vision.ProcessVisionCommand.Busy);
IF Vision_pResultRtrig.Q THEN
	Vision_BitmapVersion := Vision_BitmapVersion + 1;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>f2c55615-3530-4e9e-a8ec-f4e8c8b52d04</ObjectId>
                      </data>
                    </addData>
                  </action>
                  <action name="A_Init">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// check if arfbot has been initialized
IF NOT PersistentVars.Flags[GVL.INIT_POS_IDX].Value THEN
	// poses
	PersistentVars.Flags[GVL.HOM_TO_POSE_IDX].Value := FALSE;
	PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position.X := 0.0;
	PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position.Y := 0.0;
	PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position.Z := -30.0;
	PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position.A := 0.0;
	PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position.B := -30.0;
	PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position.C := 0.0;
	PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position.X := 0.0;
	PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position.Y := 30.0;
	PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position.Z := -30.0;
	PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position.A := 0.0;
	PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position.B := 30.0;
	PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position.C := 0.0;
		 
	// decoder
	PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.X := 300.0; // TODO need to verify all 6 of these
	PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.Y := 0.0;
	PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.Z := -400.0;
	PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.A := 0.0;
	PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.B := 0.0;
	PersistentVars.StoredPositions[GVL.DEC_START_POS].Position.C := 0.0;
		 
	
	// set homing offsets
	PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.X := 167.0; // J1 initial home offset
	PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.Y := 42.41; // J2 initial home offset
	PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.Z := -57.35; // J3 initial home offset
	PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.A := -169.66; // J4 initial home offset
	PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.B := -94.106; // J5 initial home offset
	PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Position.C := 171.581; // J6 initial home offset
	
	//
	M_BuildTests();
		 
	// indicate initialized
	PersistentVars.Flags[GVL.INIT_POS_IDX].Value := TRUE;
END_IF

// 
PersistentVars.StoredPositions[GVL.HOM_POS_IDX].Comment := 'Home Offsets J1, J2, J3, J4, J5, J6';
PersistentVars.StoredPositions[GVL.DEC_START_POS].Comment := 'NC Decoder Start Position';
PersistentVars.StoredPositions[GVL.TCP_POS_IDX].Comment := 'TCP Offset';
PersistentVars.StoredPositions[GVL.PC2_POS_IDX].Comment := 'PCS 2 Offset';
PersistentVars.StoredPositions[GVL.PC1_POS_IDX].Comment := 'PCS 1 Offset';
PersistentVars.StoredPositions[GVL.MCS_POS_IDX].Comment := 'MCS Offset';

//	 
PersistentVars.StoredPositions[GVL.POSE_1_IDX].Comment := 'Pose 1 coordinates';
PersistentVars.StoredPositions[GVL.POSE_2_IDX].Comment := 'Pose 2 coordinates';
PersistentVars.StoredPositions[GVL.POSE_3_IDX].Comment := 'Pose 3 coordinates';
PersistentVars.StoredPositions[GVL.POSE_4_IDX].Comment := 'Pose 4 coordinates';
PersistentVars.StoredPositions[GVL.POSE_5_IDX].Comment := 'Pose 5 coordinates';

//
PersistentVars.Flags[GVL.HOM_TO_POSE_IDX].Comment := 'Finish home at Pose';

//
PersistentVars.Flags[GVL.HOME_COMPLETE].Comment := 'Indicates all axes are homed';
PersistentVars.Flags[GVL.HOME_COMPLETE].Value := FALSE;

// build pose commands
//
StMoveCmdPose1.MoveType 		:= DUT_Command_MoveType.DirectMove;
StMoveCmdPose1.PositionType 	:= DUT_Command_PositionType.AbsolutePosition;
StMoveCmdPose1.CoordinateType 	:= DUT_Command_CoordinateType.Literal;
StMoveCmdPose1.Speed 			:= 20;
StMoveCmdPose1.CoordSystem 		:= SMC_COORD_SYSTEM.ACS;
StMoveCmdPose1.CoordRef 		:= PersistentVars.StoredPositions[GVL.POSE_1_IDX].Position;
GVL.Pose1 := BuildMoveCmd(StMoveCmdPose1);
//
StMoveCmdPose2.MoveType 		:= DUT_Command_MoveType.DirectMove;
StMoveCmdPose2.PositionType 	:= DUT_Command_PositionType.AbsolutePosition;
StMoveCmdPose2.CoordinateType 	:= DUT_Command_CoordinateType.Literal;
StMoveCmdPose2.Speed 			:= 20;
StMoveCmdPose2.CoordSystem 		:= SMC_COORD_SYSTEM.ACS;
StMoveCmdPose2.CoordRef 		:= PersistentVars.StoredPositions[GVL.POSE_2_IDX].Position;
GVL.Pose2 := BuildMoveCmd(StMoveCmdPose2);</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>f17eeeaa-a471-4fe9-bca4-92d5f0a69acd</ObjectId>
                      </data>
                    </addData>
                  </action>
                </actions>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">
{region "utility"}
		 
	IF FirstScan THEN
		A_Init();	
	END_IF
	
	IF BuildTests THEN
		BuildTests := FALSE;
		M_BuildTests();
	END_IF
	
{endregion}
     
{region "methods"}

    A_Jogging();
    A_Homing();
    A_CNC();
    A_Processor();
    A_Vision();
    
{endregion}

FirstScan:=FALSE;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_BuildTests" ObjectId="9a5607a2-ed23-4572-beb3-b80fd95846d5">
                      <interface>
                        <localVars>
                          <variable name="_i">
                            <type>
                              <INT />
                            </type>
                          </variable>
                          <variable name="_j">
                            <type>
                              <INT />
                            </type>
                          </variable>
                          <variable name="_k">
                            <type>
                              <INT />
                            </type>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_BuildTests
VAR_INPUT
END_VAR
VAR
	_i, _j, _k: INT;
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </localVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">
//
FOR _i := GVL.PROG_CMDS_ARR_BEG TO GVL.PROG_CMDS_ARR_END BY 1 DO
	PersistentVars.Programs[1].Commands[_i].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[1].Commands[_i].CommandString := '';
END_FOR
PersistentVars.Programs[1].ProgramName := 'Vision Pick and Place';
PersistentVars.Programs[1].Commands[0].CommandType := DUT_CommandType.VarSetCommand;
PersistentVars.Programs[1].Commands[0].CommandString := 'STO 0046 +0000.00 +0000.00 +0000.00 +0090.00 +0000.00 +0000.00';
PersistentVars.Programs[1].Commands[1].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[1].Commands[1].CommandString := 'DIR ABS 020 ACS LIT 00000.00 00030.00 -0030.00 00000.00 00030.00 00000.00';
PersistentVars.Programs[1].Commands[2].CommandType := DUT_CommandType.OutputCommand;
PersistentVars.Programs[1].Commands[2].CommandString := 'DIG 1 1';
PersistentVars.Programs[1].Commands[3].CommandType := DUT_CommandType.VisionCommand;
PersistentVars.Programs[1].Commands[3].CommandString := 'LOC 640 400 0060 001 000.0 0.8 030.0 000 Template.jpg FastTemplateMatching.py';
PersistentVars.Programs[1].Commands[4].CommandType := DUT_CommandType.OutputCommand;
PersistentVars.Programs[1].Commands[4].CommandString := 'DIG 1 0';
PersistentVars.Programs[1].Commands[5].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[1].Commands[5].CommandString := 'DIR ABS 050 PC1 LIT 00000.00 00000.00 -0010.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[1].Commands[6].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[1].Commands[6].CommandString := 'DIR ABS 050 PC1 VAR VIS 000';
PersistentVars.Programs[1].Commands[7].CommandType := DUT_CommandType.OutputCommand;
PersistentVars.Programs[1].Commands[7].CommandString := 'SRV 1 30.0 360.0';
PersistentVars.Programs[1].Commands[8].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[1].Commands[8].CommandString := 'LIN REL 050 TCS LIT 00000.00 00000.00 00010.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[1].Commands[9].CommandType := DUT_CommandType.OutputCommand;
PersistentVars.Programs[1].Commands[9].CommandString := 'SRV 1 0.0 360.0';
PersistentVars.Programs[1].Commands[10].CommandType := DUT_CommandType.PauseCommand;
PersistentVars.Programs[1].Commands[10].CommandString := 'T#1s';
PersistentVars.Programs[1].Commands[11].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[1].Commands[11].CommandString := 'LIN REL 050 TCS LIT 00000.00 00000.00 -0010.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[1].Commands[12].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[1].Commands[12].CommandString := 'DIR ABS 050 PC1 LIT 00000.00 00000.00 -0050.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[1].Commands[13].CommandType := DUT_CommandType.OutputCommand;
PersistentVars.Programs[1].Commands[13].CommandString := 'SRV 1 30.0 360.0';

//
FOR _i := GVL.PROG_CMDS_ARR_BEG TO GVL.PROG_CMDS_ARR_END BY 1 DO
	PersistentVars.Programs[2].Commands[_i].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[2].Commands[_i].CommandString := '';
END_FOR
PersistentVars.Programs[2].ProgramName := 'PCS1 Corners';
PersistentVars.Programs[2].Commands[0].CommandType := DUT_CommandType.VarSetCommand;
PersistentVars.Programs[2].Commands[0].CommandString := 'STO 0046 +0000.00 +0000.00 +0000.00 +0090.00 +0000.00 +0000.00';
PersistentVars.Programs[2].Commands[1].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[2].Commands[1].CommandString := 'DIR ABS 050 PC1 LIT 0 0 0 0 0 0';
PersistentVars.Programs[2].Commands[2].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[2].Commands[2].CommandString := 'LIN REL 100 TCS LIT 0.0 200.0 0.0 0.0 0.0 0.0';
PersistentVars.Programs[2].Commands[3].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[2].Commands[3].CommandString := 'LIN REL 100 TCS LIT 00125.00 00000.00 00000.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[2].Commands[4].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[2].Commands[4].CommandString := 'LIN REL 100 TCS LIT 00000.00 -0200.00 00000.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[2].Commands[5].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[2].Commands[5].CommandString := 'LIN REL 100 TCS LIT -0125.00 00000.00 00000.00 00000.00 00000.00 00000.00';
PersistentVars.Programs[2].Commands[6].CommandType := DUT_CommandType.MoveCommand;
PersistentVars.Programs[2].Commands[6].CommandString := 'DIR ABS 050 ACS LIT +00 +30 -30 +00 +30 +00';

//
FOR _i := GVL.PROG_CMDS_ARR_BEG TO GVL.PROG_CMDS_ARR_END BY 1 DO
	PersistentVars.Programs[3].Commands[_i].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[3].Commands[_i].CommandString := '';
END_FOR
PersistentVars.Programs[3].ProgramName := 'Cnc Validation';
PersistentVars.Programs[3].Commands[0].CommandType := DUT_CommandType.CncCommand;
PersistentVars.Programs[3].Commands[0].CommandString := 'CNC_FromFile.cnc XYZ VAR STO 45';
PersistentVars.Programs[3].Commands[1].CommandType := DUT_CommandType.CncCommand;
PersistentVars.Programs[3].Commands[1].CommandString := 'CNC_FromFile.cnc XYZ LIT +0300.00 +0000.00 -0300.00 +0000.00 +0000.00 +0000.00';

//
FOR _i := GVL.PROG_CMDS_ARR_BEG TO GVL.PROG_CMDS_ARR_END BY 1 DO
	PersistentVars.Programs[4].Commands[_i].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[4].Commands[_i].CommandString := '';
END_FOR
PersistentVars.Programs[4].ProgramName := 'Vision Validation';
PersistentVars.Programs[4].Commands[0].CommandType := DUT_CommandType.VisionCommand;
PersistentVars.Programs[4].Commands[0].CommandString := 'LOC 640 400 60 1 0.0 0.8 30.0 10 Template.jpg FastTemplateMatching.py';
PersistentVars.Programs[4].Commands[1].CommandType := DUT_CommandType.VisionCommand;
PersistentVars.Programs[4].Commands[1].CommandString := 'LOC 640 400 60 1 0.0 0.8 30.0 4 strippers2.jpg FastTemplateMatching.py';

//
FOR _i := GVL.PROG_CMDS_ARR_BEG TO GVL.PROG_CMDS_ARR_END BY 1 DO
	PersistentVars.Programs[5].Commands[_i].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[5].Commands[_i].CommandString := '';
END_FOR
PersistentVars.Programs[5].ProgramName := 'VarSet Validation';
PersistentVars.Programs[5].Commands[0].CommandType := DUT_CommandType.VarSetCommand;
PersistentVars.Programs[5].Commands[0].CommandString := 'STO 1 6.0 5.0 4.0 3.0 2.0 1.0 ';
PersistentVars.Programs[5].Commands[1].CommandType := DUT_CommandType.VarSetCommand;
PersistentVars.Programs[5].Commands[1].CommandString := 'VIS 2 1 2 3 4 5 6';
PersistentVars.Programs[5].Commands[2].CommandType := DUT_CommandType.VarSetCommand;
PersistentVars.Programs[5].Commands[2].CommandString := 'FLG 3 1';


//
FOR _i := GVL.PROG_CMDS_ARR_BEG TO GVL.PROG_CMDS_ARR_END BY 1 DO
	PersistentVars.Programs[6].Commands[_i].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[6].Commands[_i].CommandString := '';
END_FOR
PersistentVars.Programs[6].ProgramName := 'Logic Validation';
PersistentVars.Programs[6].Commands[0].CommandType := DUT_CommandType.LogicCommand;
PersistentVars.Programs[6].Commands[0].CommandString := 'IF INPUT 1 EQU 1 THEN OUTPUT 1 1 ELSE OUTPUT 1 0';
PersistentVars.Programs[6].Commands[1].CommandType := DUT_CommandType.LogicCommand;
PersistentVars.Programs[6].Commands[1].CommandString := 'IF INPUT 1 EQU 1 THEN CNTUP 1 ELSE CNTUP 2';
PersistentVars.Programs[6].Commands[2].CommandType := DUT_CommandType.LogicCommand;
PersistentVars.Programs[6].Commands[2].CommandString := 'IF COUNTER 2 GRE 10 THEN NOP ELSE JUMP 0';















</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD M_BuildTests
VAR_INPUT
END_VAR
VAR
	_i, _j, _k: INT;
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _00_Main
VAR
	// drive parameters
	//SM_Drive_PosControl_J1.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J2.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J3.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J4.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J5.controller.fDeadTime := 2.0;
	//SM_Drive_PosControl_J6.controller.fDeadTime := 2.0;
	
	// homing
	SMC_Homing_J1,SMC_Homing_J2,SMC_Homing_J3: SMC_Homing;
	SMC_Homing_J4,SMC_Homing_J5,SMC_Homing_J6: SMC_Homing;
	HomingSequence: INT := 0;
	SMC_GroupPower_J: SMC_GroupPower;
	MC_GroupReset_J: MC_GroupReset;
	MC_GroupEnable_J : MC_GroupEnable;
	MC_GroupDisable_J : MC_GroupDisable;
	HomingVelocityFast: LREAL:= 20.0;
	HomingAcceleration: LREAL:= 100.0;
	
	// jogging
	ProcessJog: JogProcessor;
	JogStatusText: STRING(255);
	
	// cnc
	VisuStruct3DControl_J: VisuStruct3DControl;
	TrackPosition: PositionTracker;
	
	// command processor
	PowerOn: BOOL:=FALSE;
	_MoveCommandParser: ParseMoveCmd;
	ProcessMoveCommand: MoveCmdProcessor;
	ProcessMoveCommand_Execute: BOOL;
	ProcessMoveCommand_Reset: BOOL;
	ProcessMoveStatusText: STRING(255);
	ProcessCommands: CommandProcessor;
	ProcessCommands_Execute: BOOL;
	ProcessCommand_Cancel: BOOL;
	ProcessCommand_Reset: BOOL;
	ProcessCommand_ActiveProgram: UINT := 0;
	StMoveCmdPose1: ST_MoveCmd;
	StMoveCmdPose2: ST_MoveCmd;
	Abort: BOOL;
	
	// vision
	Vision_pResultRtrig: R_TRIG;
	Vision_BitmapVersion: INT;
	Vision_CaptureImage: BOOL;
	Vision_CapImgCmdAccepted: BOOL;
	Vision_RunCalibration: BOOL;
	Vision_RunCalCmdAccepted: BOOL;
	Vision_LocatePart: BOOL;
	Vision_LocPartCmdAccepted: BOOL;
	Vision_StreamCamera: BOOL;
	Vision_StrCamCmdAccepted: BOOL;
	Vision_Cancel: BOOL;
	Vision_Reset: BOOL;
	
	//
	BuildTests: BOOL:=FALSE;
	FirstScan: BOOL:=TRUE;

END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>f495872a-eb99-4e62-a111-ca71535b5152</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="_10_Drives" pouType="program">
                <interface>
                  <localVars>
                    <variable name="SetVelocity">
                      <type>
                        <array>
                          <dimension lower="0" upper="5" />
                          <baseType>
                            <REAL />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="EncPosition">
                      <type>
                        <array>
                          <dimension lower="0" upper="5" />
                          <baseType>
                            <DINT />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="bufferIdx">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="jointIdx">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="HeartbeatOn">
                      <type>
                        <derived name="TON" />
                      </type>
                    </variable>
                    <variable name="HeartbeatOff">
                      <type>
                        <derived name="TON" />
                      </type>
                    </variable>
                    <variable name="HeartbeatPt">
                      <type>
                        <TIME />
                      </type>
                      <initialValue>
                        <simpleValue value="TIME#1s0ms" />
                      </initialValue>
                    </variable>
                    <variable name="SysLTime">
                      <type>
                        <derived name="LTIME" />
                      </type>
                    </variable>
                    <variable name="SysLTimeLast">
                      <type>
                        <derived name="LTIME" />
                      </type>
                    </variable>
                    <variable name="TransferTime">
                      <type>
                        <derived name="LTIME" />
                      </type>
                      <initialValue>
                        <simpleValue value="LTIME#100us0ns" />
                      </initialValue>
                    </variable>
                    <variable name="TransferTrigger">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="pabyTxBuffer">
                      <type>
                        <array>
                          <dimension lower="0" upper="31" />
                          <baseType>
                            <BYTE />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="pabyRxBuffer">
                      <type>
                        <array>
                          <dimension lower="0" upper="31" />
                          <baseType>
                            <BYTE />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="transferlentx">
                      <type>
                        <UDINT />
                      </type>
                      <initialValue>
                        <simpleValue value="32" />
                      </initialValue>
                    </variable>
                    <variable name="transferlenrx">
                      <type>
                        <UDINT />
                      </type>
                      <initialValue>
                        <simpleValue value="32" />
                      </initialValue>
                    </variable>
                    <variable name="i2caddress">
                      <type>
                        <USINT />
                      </type>
                      <initialValue>
                        <simpleValue value="8" />
                      </initialValue>
                    </variable>
                    <variable name="rx_heartbeat">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_en">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="tx_en">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_alarm">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_heartbeat_lost">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_j1_limit">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_j2_limit">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_j3_limit">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_j4_limit">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_j5_limit">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="rx_j6_limit">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="TestMove_J6">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="PosStart1_J6">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="PosStart2_J6">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="PosEnd1_J6">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="PosEnd2_J6">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="TestMoveWaitTimer">
                      <type>
                        <derived name="TON" />
                      </type>
                    </variable>
                    <variable name="TestMoveWaitTimerPT">
                      <type>
                        <TIME />
                      </type>
                      <initialValue>
                        <simpleValue value="TIME#2s0ms" />
                      </initialValue>
                    </variable>
                    <variable name="TestMoveStep">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _10_Drives
VAR	
	SetVelocity: ARRAY [0..5] OF REAL;
	EncPosition: ARRAY [0..5] OF DINT;
	
	bufferIdx: INT;
	jointIdx: INT;
	
	HeartbeatOn: TON;
	HeartbeatOff: TON;
	HeartbeatPt: TIME:=T#1000MS;
	SysLTime, SysLTimeLast: LTIME;
	TransferTime: LTIME:=LTIME#100US;
	TransferTrigger: BOOL;
	
	pabyTxBuffer: ARRAY [0..31] OF BYTE;
	pabyRxBuffer: ARRAY [0..31] OF BYTE;
	
	transferlentx: UDINT:=32;
	transferlenrx: UDINT:=32;
	i2caddress: USINT:=8;
	
	rx_heartbeat: BOOL;
	rx_en, tx_en: BOOL;
	rx_alarm: BOOL;
	rx_heartbeat_lost: BOOL;
	rx_j1_limit, rx_j2_limit, rx_j3_limit: BOOL;
	rx_j4_limit, rx_j5_limit, rx_j6_limit: BOOL;
	
	
	
	
	
	
	TestMove_J6:BOOL;
	PosStart1_J6: DINT;
	PosStart2_J6: DINT;
	PosEnd1_J6: DINT;
	PosEnd2_J6: DINT;
	TestMoveWaitTimer: TON;
	TestMoveWaitTimerPT: TIME:=T#2S;
	
	TestMoveStep: INT;
	
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">
HeartbeatOn(in:=NOT HeartbeatOff.Q,PT:=HeartbeatPt);
HeartbeatOff(in:=HeartbeatOn.Q,PT:=HeartbeatPt);

// need to use system time to transfer faster than 1ms
SysLTime := LTIME();
IF SysLTime - SysLTimeLast &gt; TransferTime THEN
	SysLTimeLast := SysLTime;
	TransferTrigger := NOT TransferTrigger;
END_IF

// handle outputs
// index 0 is for system outputs
pabyTxBuffer[0].0:=HeartbeatOn.Q; 	// heartbeat
pabyTxBuffer[0].1:=tx_en; 			// enable drives
//pabyTxBuffer[0].2:=GVL.Homing;		// homing sts
// pabyTxBuffer[0].3:=; //
// pabyTxBuffer[0].4:=; //
// pabyTxBuffer[0].5:=; //
// pabyTxBuffer[0].6:=; //
// pabyTxBuffer[0].7:=; //

// index 1 through 24 is for velocity to drive
bufferIdx := 1;
FOR jointIdx := 0 TO 5 BY 1 DO
	MEMUtils.MemCpy(pbyDest:=ADR(pabyTxBuffer[bufferIdx]), 
					pbySrc:=ADR(SetVelocity[jointIdx]), 
					dwSize:=SIZEOF(SetVelocity[jointIdx]));
	bufferIdx := bufferIdx + 4;
END_FOR
//pabyTxBuffer[25]:=;
//pabyTxBuffer[26]:=;
//pabyTxBuffer[27]:=;
//pabyTxBuffer[28]:=;
//pabyTxBuffer[29]:=;
//pabyTxBuffer[30]:=;

// index 31 will be for gpio byte (bits 0 through 7)
pabyTxBuffer[31].0 := GVL.DigitalOutput[0];
pabyTxBuffer[31].1 := GVL.DigitalOutput[1];
pabyTxBuffer[31].2 := GVL.DigitalOutput[2];
pabyTxBuffer[31].3 := GVL.DigitalOutput[3];
pabyTxBuffer[31].4 := GVL.DigitalOutput[4];
pabyTxBuffer[31].5 := GVL.DigitalOutput[5];
pabyTxBuffer[31].6 := GVL.DigitalOutput[6];
pabyTxBuffer[31].7 := GVL.DigitalOutput[7];

// read and write to drive
IF TransferTrigger THEN
	I2C_master.write(usiAddress:=i2caddress,
					pbyBuffer:=ADR(pabyTxBuffer),
					nBufferLen:=transferlentx);
	I2C_master.read(usiAddress:=i2caddress,
					pbyBuffer:=ADR(pabyRxBuffer),
					nBufferLen:=transferlenrx);
END_IF

// handle inputs
// index 0 is for system inputs
rx_heartbeat 		:= pabyRxBuffer[0].0;
rx_en 				:= pabyRxBuffer[0].1;
rx_alarm 			:= pabyRxBuffer[0].2;
//rx_ 				:= pabyRxBuffer[0].3;
//rx_ 				:= pabyRxBuffer[0].4;
//rx_ 				:= pabyRxBuffer[0].5;
//rx_ 				:= pabyRxBuffer[0].6;
rx_heartbeat_lost 	:= pabyRxBuffer[0].7;

// index 1 through 24 is for encoder data from drive
bufferIdx := 1;
FOR jointIdx := 0 TO 5 BY 1 DO
	MEMUtils.MemCpy(pbyDest:=ADR(EncPosition[jointIdx]), 
					pbySrc:=ADR(pabyRxBuffer[bufferIdx]), 
					dwSize:=SIZEOF(EncPosition[jointIdx]));
	bufferIdx := bufferIdx + 4;
END_FOR

// index 25 will be for limit switch inputs
rx_j1_limit := pabyRxBuffer[25].0;
rx_j2_limit := pabyRxBuffer[25].1;
rx_j3_limit := pabyRxBuffer[25].2;
rx_j4_limit := pabyRxBuffer[25].3;
rx_j5_limit := pabyRxBuffer[25].4;
rx_j6_limit := pabyRxBuffer[25].5;
//rx_ := pabyRxBuffer[25].6;
//rx_ := pabyRxBuffer[25].7;

//rx_ := pabyRxBuffer[27];
//rx_ := pabyRxBuffer[28];
//rx_ := pabyRxBuffer[29];
//rx_ := pabyRxBuffer[30];
//rx_ := pabyRxBuffer[31];

// index 31 will be for gpio byte (bits 0 through 7)
GVL.DigitalInput[0] := pabyRxBuffer[31].0;
GVL.DigitalInput[1] := pabyRxBuffer[31].1;
GVL.DigitalInput[2] := pabyRxBuffer[31].2;
GVL.DigitalInput[3] := pabyRxBuffer[31].3;
GVL.DigitalInput[4] := pabyRxBuffer[31].4;
GVL.DigitalInput[5] := pabyRxBuffer[31].5;
GVL.DigitalInput[6] := pabyRxBuffer[31].6;
GVL.DigitalInput[7] := pabyRxBuffer[31].7;

M_HandleDriveIO();</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_HandleDriveIO" ObjectId="1f105a3e-ae48-4de4-9cd3-fada08b1a872">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">(*                    DMT542T Stepper Driver
	Pulse and Direction Connection:
	(1) Optically isolated, high level 4.5-5V or 24V, low voltage 0-0.5V
	(2) Maximum 200 KHz input frequency
	(3) The width of PUL signal is at least 2.5μs, duty cycle is recommended 50%
	(4) DIR signal requires advance PUL signal minimum 5 μs in single pulse mode
	(5) The factory setting of control signal voltage is 24V, must need to set S2 (figure 2) if it is 5V
	
	Enable Connection: (default no connection)
	(1) Optically isolated, differential.
	(2) Disable the drive by 4.5- 24V input connection; enable the drive by 0-0.5V connection (3) ENA signal requires advance DIR signal minimum 5μs in single pulse mode
	(4) Enable time to be at least 200ms
*)
(*
	J1 - 400 steps per revolution
	J2 - 400 steps per revolution
	J3 - 400 steps per revolution
	J4 - 400 steps per revolution
	J5 - 800 steps per revolution
	J6 - 400 steps per revolution
*)

SM_Drive_PosControl_J1.in.dwActPosition := DINT_TO_DWORD(EncPosition[0]);
SM_Drive_PosControl_J2.in.dwActPosition := DINT_TO_DWORD(EncPosition[1]);
SM_Drive_PosControl_J3.in.dwActPosition := DINT_TO_DWORD(EncPosition[2]);
SM_Drive_PosControl_J4.in.dwActPosition := DINT_TO_DWORD(-EncPosition[3]);
SM_Drive_PosControl_J5.in.dwActPosition := DINT_TO_DWORD(EncPosition[4]);
SM_Drive_PosControl_J6.in.dwActPosition := DINT_TO_DWORD(EncPosition[5]);

SM_Drive_PosControl_J1.bHWLimitEnable := NOT _00_Main.SMC_Homing_J1.bBusy;
SM_Drive_PosControl_J2.bHWLimitEnable := NOT _00_Main.SMC_Homing_J2.bBusy;
SM_Drive_PosControl_J3.bHWLimitEnable := NOT _00_Main.SMC_Homing_J3.bBusy;
SM_Drive_PosControl_J4.bHWLimitEnable := NOT _00_Main.SMC_Homing_J4.bBusy;
SM_Drive_PosControl_J5.bHWLimitEnable := NOT _00_Main.SMC_Homing_J5.bBusy;
SM_Drive_PosControl_J6.bHWLimitEnable := NOT _00_Main.SMC_Homing_J6.bBusy;

SM_Drive_PosControl_J1.in.bLimitNeg := TRUE;
SM_Drive_PosControl_J2.in.bLimitNeg := TRUE;
SM_Drive_PosControl_J3.in.bLimitNeg := rx_j3_limit;
SM_Drive_PosControl_J4.in.bLimitNeg := rx_j4_limit;
SM_Drive_PosControl_J5.in.bLimitNeg := rx_j5_limit;
SM_Drive_PosControl_J6.in.bLimitNeg := TRUE;

SM_Drive_PosControl_J1.in.bLimitPos := rx_j1_limit;
SM_Drive_PosControl_J2.in.bLimitPos := rx_j2_limit;
SM_Drive_PosControl_J3.in.bLimitPos := TRUE;
SM_Drive_PosControl_J4.in.bLimitPos := TRUE;
SM_Drive_PosControl_J5.in.bLimitPos := TRUE;
SM_Drive_PosControl_J6.in.bLimitPos := rx_j6_limit;

SM_Drive_PosControl_J1.in.bDriveStartRealState := rx_en;
SM_Drive_PosControl_J1.in.bRegulatorRealState := rx_en;
SM_Drive_PosControl_J2.in.bDriveStartRealState := rx_en;
SM_Drive_PosControl_J2.in.bRegulatorRealState := rx_en;
SM_Drive_PosControl_J3.in.bDriveStartRealState := rx_en;
SM_Drive_PosControl_J3.in.bRegulatorRealState := rx_en;
SM_Drive_PosControl_J4.in.bDriveStartRealState := rx_en;
SM_Drive_PosControl_J4.in.bRegulatorRealState := rx_en;
SM_Drive_PosControl_J5.in.bDriveStartRealState := rx_en;
SM_Drive_PosControl_J5.in.bRegulatorRealState := rx_en;
SM_Drive_PosControl_J6.in.bDriveStartRealState := rx_en;
SM_Drive_PosControl_J6.in.bRegulatorRealState := rx_en;

// convert degrees per second to revolutions per second as that is what the drives take
SetVelocity[0] := LREAL_TO_REAL(-SM_Drive_PosControl_J1.out.fSetVelocity / 360.0); 
SetVelocity[1] := LREAL_TO_REAL(SM_Drive_PosControl_J2.out.fSetVelocity / 360.0);
SetVelocity[2] := LREAL_TO_REAL(SM_Drive_PosControl_J3.out.fSetVelocity / 360.0);
SetVelocity[3] := LREAL_TO_REAL(SM_Drive_PosControl_J4.out.fSetVelocity / 360.0);
SetVelocity[4] := LREAL_TO_REAL(SM_Drive_PosControl_J5.out.fSetVelocity / 360.0);
SetVelocity[5] := LREAL_TO_REAL(SM_Drive_PosControl_J6.out.fSetVelocity / 360.0);

tx_en := GVL.PowerOn;
</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_HandleDriveIO

VAR
END_VAR

VAR_INPUT
END_VAR

VAR_OUTPUT
END_VAR

VAR CONSTANT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _10_Drives
VAR	
	SetVelocity: ARRAY [0..5] OF REAL;
	EncPosition: ARRAY [0..5] OF DINT;
	
	bufferIdx: INT;
	jointIdx: INT;
	
	HeartbeatOn: TON;
	HeartbeatOff: TON;
	HeartbeatPt: TIME:=T#1000MS;
	SysLTime, SysLTimeLast: LTIME;
	TransferTime: LTIME:=LTIME#100US;
	TransferTrigger: BOOL;
	
	pabyTxBuffer: ARRAY [0..31] OF BYTE;
	pabyRxBuffer: ARRAY [0..31] OF BYTE;
	
	transferlentx: UDINT:=32;
	transferlenrx: UDINT:=32;
	i2caddress: USINT:=8;
	
	rx_heartbeat: BOOL;
	rx_en, tx_en: BOOL;
	rx_alarm: BOOL;
	rx_heartbeat_lost: BOOL;
	rx_j1_limit, rx_j2_limit, rx_j3_limit: BOOL;
	rx_j4_limit, rx_j5_limit, rx_j6_limit: BOOL;
	
	
	
	
	
	
	TestMove_J6:BOOL;
	PosStart1_J6: DINT;
	PosStart2_J6: DINT;
	PosEnd1_J6: DINT;
	PosEnd2_J6: DINT;
	TestMoveWaitTimer: TON;
	TestMoveWaitTimerPT: TIME:=T#2S;
	
	TestMoveStep: INT;
	
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>3256c2f0-e8a8-4738-aa1a-395ceff25c60</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="JogProcessor" pouType="functionBlock">
                <interface>
                  <inOutVars>
                    <variable name="AxisGroup">
                      <type>
                        <derived name="AXIS_GROUP_REF_SM3" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK JogProcessor
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR

VAR_INPUT
	Enable: BOOL;
	Reset: BOOL;
END_VAR

VAR_OUTPUT
	ABC_as_ACS: BOOL;
	CoordSystem: SMC_COORD_SYSTEM;
	Position: SMC_POS_REF;
	Done: BOOL;
	Busy: BOOL;
	Error: BOOL;
	ErrorID: SMC_ERROR;
END_VAR

VAR
	_ExecuteRtrig: R_TRIG;
	_ExecuteFtrig: F_TRIG;
	_ResetRtrig: R_TRIG;
	_ErrorRtrig: R_TRIG;
	
	_SequenceMain: INT;
	
	_SMC_GroupJog2: SMC_GroupJog2;
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_FirstScan: BOOL:=TRUE;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_JOG:				INT := 0080;
	STEP_WAIT_JOG:			INT := 0090;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <inputVars>
                    <variable name="Enable">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Reset">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK JogProcessor
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR

VAR_INPUT
	Enable: BOOL;
	Reset: BOOL;
END_VAR

VAR_OUTPUT
	ABC_as_ACS: BOOL;
	CoordSystem: SMC_COORD_SYSTEM;
	Position: SMC_POS_REF;
	Done: BOOL;
	Busy: BOOL;
	Error: BOOL;
	ErrorID: SMC_ERROR;
END_VAR

VAR
	_ExecuteRtrig: R_TRIG;
	_ExecuteFtrig: F_TRIG;
	_ResetRtrig: R_TRIG;
	_ErrorRtrig: R_TRIG;
	
	_SequenceMain: INT;
	
	_SMC_GroupJog2: SMC_GroupJog2;
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_FirstScan: BOOL:=TRUE;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_JOG:				INT := 0080;
	STEP_WAIT_JOG:			INT := 0090;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="ABC_as_ACS">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="CoordSystem">
                      <type>
                        <derived name="SMC_COORD_SYSTEM" />
                      </type>
                    </variable>
                    <variable name="Position">
                      <type>
                        <derived name="SMC_POS_REF" />
                      </type>
                    </variable>
                    <variable name="Done">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Busy">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorID">
                      <type>
                        <derived name="SMC_ERROR" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK JogProcessor
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR

VAR_INPUT
	Enable: BOOL;
	Reset: BOOL;
END_VAR

VAR_OUTPUT
	ABC_as_ACS: BOOL;
	CoordSystem: SMC_COORD_SYSTEM;
	Position: SMC_POS_REF;
	Done: BOOL;
	Busy: BOOL;
	Error: BOOL;
	ErrorID: SMC_ERROR;
END_VAR

VAR
	_ExecuteRtrig: R_TRIG;
	_ExecuteFtrig: F_TRIG;
	_ResetRtrig: R_TRIG;
	_ErrorRtrig: R_TRIG;
	
	_SequenceMain: INT;
	
	_SMC_GroupJog2: SMC_GroupJog2;
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_FirstScan: BOOL:=TRUE;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_JOG:				INT := 0080;
	STEP_WAIT_JOG:			INT := 0090;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_ExecuteRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_ExecuteFtrig">
                      <type>
                        <derived name="F_TRIG" />
                      </type>
                    </variable>
                    <variable name="_ResetRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_ErrorRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_SequenceMain">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SMC_GroupJog2">
                      <type>
                        <derived name="SMC_GroupJog2" />
                      </type>
                    </variable>
                    <variable name="_SMC_GroupPower">
                      <type>
                        <derived name="SMC_GroupPower" />
                      </type>
                    </variable>
                    <variable name="_GroupPower">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_MC_GroupEnable">
                      <type>
                        <derived name="MC_GroupEnable" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupDisable">
                      <type>
                        <derived name="MC_GroupDisable" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupReset">
                      <type>
                        <derived name="MC_GroupReset" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupReadActualPosition">
                      <type>
                        <derived name="MC_GroupReadActualPosition" />
                      </type>
                    </variable>
                    <variable name="_SMC_SetKinConfiguration">
                      <type>
                        <derived name="SMC_SetKinConfiguration" />
                      </type>
                    </variable>
                    <variable name="_FirstScan">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="TRUE" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK JogProcessor
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR

VAR_INPUT
	Enable: BOOL;
	Reset: BOOL;
END_VAR

VAR_OUTPUT
	ABC_as_ACS: BOOL;
	CoordSystem: SMC_COORD_SYSTEM;
	Position: SMC_POS_REF;
	Done: BOOL;
	Busy: BOOL;
	Error: BOOL;
	ErrorID: SMC_ERROR;
END_VAR

VAR
	_ExecuteRtrig: R_TRIG;
	_ExecuteFtrig: F_TRIG;
	_ResetRtrig: R_TRIG;
	_ErrorRtrig: R_TRIG;
	
	_SequenceMain: INT;
	
	_SMC_GroupJog2: SMC_GroupJog2;
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_FirstScan: BOOL:=TRUE;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_JOG:				INT := 0080;
	STEP_WAIT_JOG:			INT := 0090;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_GROUP_POWER_ON">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="22" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_WAIT_POWER_ON">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="24" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_GROUP_ENABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_WAIT_ENABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="35" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_READ_POSITION">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="40" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_WAIT_POSITION">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_SET_KINEMATICS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="60" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_WAIT_KINEMATICS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="70" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_JOG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="80" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_WAIT_JOG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="90" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_GROUP_DISABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="100" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_WAIT_DISABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="110" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_GROUP_POWER_OFF">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="120" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK JogProcessor
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR

VAR_INPUT
	Enable: BOOL;
	Reset: BOOL;
END_VAR

VAR_OUTPUT
	ABC_as_ACS: BOOL;
	CoordSystem: SMC_COORD_SYSTEM;
	Position: SMC_POS_REF;
	Done: BOOL;
	Busy: BOOL;
	Error: BOOL;
	ErrorID: SMC_ERROR;
END_VAR

VAR
	_ExecuteRtrig: R_TRIG;
	_ExecuteFtrig: F_TRIG;
	_ResetRtrig: R_TRIG;
	_ErrorRtrig: R_TRIG;
	
	_SequenceMain: INT;
	
	_SMC_GroupJog2: SMC_GroupJog2;
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_FirstScan: BOOL:=TRUE;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_JOG:				INT := 0080;
	STEP_WAIT_JOG:			INT := 0090;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">_ExecuteRtrig(CLK:=_SMC_GroupJog2.Enable);
_ExecuteFtrig(CLK:=_SMC_GroupJog2.Enable);
_ResetRtrig(CLK:=Reset);

IF _FirstScan THEN
	_FirstScan := FALSE;
	_SMC_GroupJog2.Velocity := 10.0;
	_SMC_GroupJog2.Acceleration := 300.0;
	_SMC_GroupJog2.Deceleration := 300.0;
	_SMC_GroupJog2.Jerk := 1000.0;
	_SMC_GroupJog2.MaxAngularDistance := 90.0;
	_SMC_GroupJog2.MaxLinearDistance := 100.0;
	_SMC_GroupJog2.AccFactor := 1.0;
	_SMC_GroupJog2.VelFactor := 0.1;
	_SMC_GroupJog2.JerkFactor := 1.0;
	_SMC_GroupJog2.TorqueFactor := 1.0;
	_SMC_GroupJog2.CoordSystem := SMC_COORD_SYSTEM.MCS;
	
END_IF

CASE _SequenceMain OF
	STEP_DONE: // done
		_GroupPower := FALSE;
  		_MC_GroupEnable.Execute := FALSE;
  		_MC_GroupDisable.Execute := FALSE;
		_MC_GroupReset.Execute := FALSE;
  		_MC_GroupReadActualPosition.Enable := FALSE;
		_SMC_SetKinConfiguration.Execute := FALSE;
		Busy := FALSE;
		Done := TRUE;
		_SequenceMain := STEP_IDLE;
		
	STEP_IDLE: // IDLE
		IF _ExecuteRtrig.Q AND Enable THEN
			Busy := TRUE;
			Done := FALSE;
			_SequenceMain := STEP_GROUP_POWER_ON;
		END_IF
		
	STEP_GROUP_POWER_ON:
		_GroupPower := TRUE;
		_SequenceMain := STEP_WAIT_POWER_ON;
		
	STEP_WAIT_POWER_ON:
		IF _SMC_GroupPower.Error THEN
			Error := TRUE;
			ErrorID := _SMC_GroupPower.ErrorID;
		ELSIF _SMC_GroupPower.Status THEN
			_SequenceMain := STEP_GROUP_ENABLE;
		END_IF
		
	STEP_GROUP_ENABLE:
		_MC_GroupEnable.Execute := TRUE;
		_SequenceMain := STEP_WAIT_ENABLE;
		
	STEP_WAIT_ENABLE:
		IF NOT _MC_GroupEnable.Busy THEN // this is a hack. we need to figure out is the group is already enabled first
			_SequenceMain := STEP_READ_POSITION;
		END_IF;
		
	STEP_READ_POSITION: // read group position
		_MC_GroupReadActualPosition.Enable := TRUE;
		_SequenceMain := STEP_WAIT_POSITION;
		
	STEP_WAIT_POSITION: // wait for group read position
		IF _MC_GroupReadActualPosition.Error THEN
			Error := TRUE;
			ErrorID := _MC_GroupReadActualPosition.ErrorID;
		ELSIF _MC_GroupReadActualPosition.Valid THEN
			_SequenceMain := STEP_SET_KINEMATICS;
		END_IF
		
	STEP_SET_KINEMATICS: // set kinematics
		_SMC_SetKinConfiguration.Execute := TRUE;
		_SequenceMain := STEP_WAIT_KINEMATICS;
		
	STEP_WAIT_KINEMATICS: // wait for set kinematics
		IF _SMC_SetKinConfiguration.Error THEN
			Error := TRUE;
			ErrorID := _SMC_SetKinConfiguration.ErrorID;
		ELSIF _SMC_SetKinConfiguration.Done THEN
			_SMC_SetKinConfiguration.Execute := FALSE;
			_SequenceMain := STEP_JOG;
		END_IF
		
	STEP_JOG: //
		_SequenceMain := STEP_WAIT_JOG;
		
	STEP_WAIT_JOG: //
		IF _SMC_GroupJog2.Error THEN
			Error := TRUE;
			ErrorID := _SMC_GroupJog2.ErrorID;
		END_IF
		IF _ExecuteFtrig.Q THEN
			_SequenceMain := STEP_GROUP_DISABLE;
		END_IF
		
	STEP_GROUP_DISABLE:
		_MC_GroupDisable.Execute := TRUE;
		_SequenceMain := STEP_WAIT_DISABLE;
		
	STEP_WAIT_DISABLE:
		IF NOT _MC_GroupDisable.Busy THEN // this is a hack. we need to figure out is the group is already disabled first
			_SequenceMain := STEP_GROUP_POWER_OFF;
		END_IF
		
	STEP_GROUP_POWER_OFF:
		_GroupPower := FALSE;
		_SequenceMain := STEP_DONE;
	
END_CASE

IF _ResetRtrig.Q AND Error THEN
	Error := FALSE;
	ErrorID := SMC_NO_ERROR;
	_MC_GroupReset.Execute := TRUE;
	_MC_GroupDisable.Execute := TRUE;
	_SequenceMain := STEP_DONE;
END_IF

_SMC_GroupPower(
	AxisGroup:= AxisGroup, 
	Enable:= _GroupPower, 
	bRegulatorOn:= _GroupPower, 
	bDriveStart:= _GroupPower, 
	Status=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_MC_GroupEnable(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	CompatibilityOptions:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
	
_MC_GroupDisable(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_MC_GroupReset(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_MC_GroupReadActualPosition(
	AxisGroup:= AxisGroup, 
	Enable:= , 
	CoordSystem:= _SMC_GroupJog2.CoordSystem, 
	Valid=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	Position=&gt; , 
	KinematicConfig=&gt; );
	
_SMC_SetKinConfiguration(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	ConfigData:= _MC_GroupReadActualPosition.KinematicConfig, 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_SMC_GroupJog2(
	AxisGroup:= AxisGroup, 
	Enable:= , 
	Forward:= , 
	Backward:= , 
	MaxLinearDistance:= , 
	MaxAngularDistance:= , 
	Velocity:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	VelFactor:= , //_SMC_GroupJog2.Velocity / 100.0, 
	AccFactor:= , 
	JerkFactor:= , 
	TorqueFactor:= , 
	CoordSystem:= , 
	ABC_as_ACS:= , 
	Active=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	CurrentPosition=&gt; Position);
	CoordSystem := _SMC_GroupJog2.CoordSystem;
	ABC_as_ACS := _SMC_GroupJog2.ABC_as_ACS;
	
_ErrorRtrig(CLK:=_SMC_GroupPower.Error
				OR _MC_GroupReadActualPosition.Error
				OR _SMC_SetKinConfiguration.Error
				OR _SMC_GroupJog2.Error);
				
IF _ErrorRtrig.Q THEN
	Error := TRUE;
END_IF
</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK JogProcessor
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR

VAR_INPUT
	Enable: BOOL;
	Reset: BOOL;
END_VAR

VAR_OUTPUT
	ABC_as_ACS: BOOL;
	CoordSystem: SMC_COORD_SYSTEM;
	Position: SMC_POS_REF;
	Done: BOOL;
	Busy: BOOL;
	Error: BOOL;
	ErrorID: SMC_ERROR;
END_VAR

VAR
	_ExecuteRtrig: R_TRIG;
	_ExecuteFtrig: F_TRIG;
	_ResetRtrig: R_TRIG;
	_ErrorRtrig: R_TRIG;
	
	_SequenceMain: INT;
	
	_SMC_GroupJog2: SMC_GroupJog2;
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_FirstScan: BOOL:=TRUE;
	
END_VAR

VAR CONSTANT
	STEP_DONE: 				INT := 1000;
	STEP_IDLE: 				INT := 0000;
	STEP_GROUP_POWER_ON: 	INT := 0022;
	STEP_WAIT_POWER_ON: 	INT := 0024;
	STEP_GROUP_ENABLE: 		INT := 0030;
	STEP_WAIT_ENABLE: 		INT := 0035;
	STEP_READ_POSITION: 	INT := 0040;
	STEP_WAIT_POSITION: 	INT := 0050;
	STEP_SET_KINEMATICS: 	INT := 0060;
	STEP_WAIT_KINEMATICS: 	INT := 0070;
	STEP_JOG:				INT := 0080;
	STEP_WAIT_JOG:			INT := 0090;
	STEP_GROUP_DISABLE: 	INT := 0100;
	STEP_WAIT_DISABLE: 		INT := 0110;
	STEP_GROUP_POWER_OFF: 	INT := 0120;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>9ad0dd5a-e160-4345-8eee-ad9cf9bfb3eb</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="CommandProcessor" pouType="functionBlock">
                <interface>
                  <inOutVars>
                    <variable name="AxisGroup">
                      <type>
                        <derived name="AXIS_GROUP_REF_SM3" />
                      </type>
                    </variable>
                    <variable name="Servo1">
                      <type>
                        <derived name="AXIS_REF_SM3" />
                      </type>
                    </variable>
                    <variable name="Servo2">
                      <type>
                        <derived name="AXIS_REF_SM3" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CommandProcessor EXTENDS Module
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
END_VAR
VAR_INPUT
	Enable: BOOL;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_VAR
VAR_OUTPUT
	ItfActiveProcessorUnitMode	: PACK_ML.IUnitMode;
	ItfActiveModule: ItfModule;
	ActiveCommand: DUT_Command;
	StatusText: STRING(255);
END_VAR
VAR
	_Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
	_DummyUnitMode: PACK_ML.UnitMode;
	_UnitModeCurrentState: PACK_ML.State;
	//_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;
	_CurrentCmdIdx: UINT;
	_ProcessMoveCommand: MoveCmdProcessor;
	_ProcessPauseCommand: PauseCmdProcessor;
	//_ProcessInputCommand: InputCommandProcessor;
	_ProcessOutputCommand: OutputCmdProcessor;
	_ProcessorDoneRtrig: R_TRIG;
    _ProcessVisionCommand: REFERENCE TO VisionCmdProcessor; // keep vision in separate task
	_ProcessVarSetCommand: VarSetCmdProcessor;
	_ProcessCncCommand: CncCmdProcessor;
	_ProcessLogicCommand: LogicCmdProcessor;
	_FirstScan: BOOL:=TRUE;
END_VAR

VAR CONSTANT
	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_CMD:				INT := 0010;
	_STEP_WAIT:				INT := 0020;
	_STEP_ERR:              INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <inputVars>
                    <variable name="Enable">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Commands">
                      <type>
                        <array>
                          <dimension lower="GVL.PROG_CMDS_ARR_BEG" upper="GVL.PROG_CMDS_ARR_END" />
                          <baseType>
                            <derived name="DUT_Command" />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CommandProcessor EXTENDS Module
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
END_VAR
VAR_INPUT
	Enable: BOOL;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_VAR
VAR_OUTPUT
	ItfActiveProcessorUnitMode	: PACK_ML.IUnitMode;
	ItfActiveModule: ItfModule;
	ActiveCommand: DUT_Command;
	StatusText: STRING(255);
END_VAR
VAR
	_Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
	_DummyUnitMode: PACK_ML.UnitMode;
	_UnitModeCurrentState: PACK_ML.State;
	//_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;
	_CurrentCmdIdx: UINT;
	_ProcessMoveCommand: MoveCmdProcessor;
	_ProcessPauseCommand: PauseCmdProcessor;
	//_ProcessInputCommand: InputCommandProcessor;
	_ProcessOutputCommand: OutputCmdProcessor;
	_ProcessorDoneRtrig: R_TRIG;
    _ProcessVisionCommand: REFERENCE TO VisionCmdProcessor; // keep vision in separate task
	_ProcessVarSetCommand: VarSetCmdProcessor;
	_ProcessCncCommand: CncCmdProcessor;
	_ProcessLogicCommand: LogicCmdProcessor;
	_FirstScan: BOOL:=TRUE;
END_VAR

VAR CONSTANT
	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_CMD:				INT := 0010;
	_STEP_WAIT:				INT := 0020;
	_STEP_ERR:              INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="ItfActiveProcessorUnitMode">
                      <type>
                        <derived name="PACK_ML.IUnitMode" />
                      </type>
                    </variable>
                    <variable name="ItfActiveModule">
                      <type>
                        <derived name="ItfModule" />
                      </type>
                    </variable>
                    <variable name="ActiveCommand">
                      <type>
                        <derived name="DUT_Command" />
                      </type>
                    </variable>
                    <variable name="StatusText">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CommandProcessor EXTENDS Module
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
END_VAR
VAR_INPUT
	Enable: BOOL;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_VAR
VAR_OUTPUT
	ItfActiveProcessorUnitMode	: PACK_ML.IUnitMode;
	ItfActiveModule: ItfModule;
	ActiveCommand: DUT_Command;
	StatusText: STRING(255);
END_VAR
VAR
	_Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
	_DummyUnitMode: PACK_ML.UnitMode;
	_UnitModeCurrentState: PACK_ML.State;
	//_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;
	_CurrentCmdIdx: UINT;
	_ProcessMoveCommand: MoveCmdProcessor;
	_ProcessPauseCommand: PauseCmdProcessor;
	//_ProcessInputCommand: InputCommandProcessor;
	_ProcessOutputCommand: OutputCmdProcessor;
	_ProcessorDoneRtrig: R_TRIG;
    _ProcessVisionCommand: REFERENCE TO VisionCmdProcessor; // keep vision in separate task
	_ProcessVarSetCommand: VarSetCmdProcessor;
	_ProcessCncCommand: CncCmdProcessor;
	_ProcessLogicCommand: LogicCmdProcessor;
	_FirstScan: BOOL:=TRUE;
END_VAR

VAR CONSTANT
	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_CMD:				INT := 0010;
	_STEP_WAIT:				INT := 0020;
	_STEP_ERR:              INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_Commands">
                      <type>
                        <array>
                          <dimension lower="GVL.PROG_CMDS_ARR_BEG" upper="GVL.PROG_CMDS_ARR_END" />
                          <baseType>
                            <derived name="DUT_Command" />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="_DummyUnitMode">
                      <type>
                        <derived name="PACK_ML.UnitMode" />
                      </type>
                    </variable>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_CurrentCmdIdx">
                      <type>
                        <UINT />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_ProcessMoveCommand">
                      <type>
                        <derived name="MoveCmdProcessor" />
                      </type>
                    </variable>
                    <variable name="_ProcessPauseCommand">
                      <type>
                        <derived name="PauseCmdProcessor" />
                      </type>
                    </variable>
                    <variable name="_ProcessOutputCommand">
                      <type>
                        <derived name="OutputCmdProcessor" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">_ProcessInputCommand: InputCommandProcessor;</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_ProcessorDoneRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_ProcessVisionCommand">
                      <type>
                        <derived name="REFERENCE TO VisionCmdProcessor" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> keep vision in separate task</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_ProcessVarSetCommand">
                      <type>
                        <derived name="VarSetCmdProcessor" />
                      </type>
                    </variable>
                    <variable name="_ProcessCncCommand">
                      <type>
                        <derived name="CncCmdProcessor" />
                      </type>
                    </variable>
                    <variable name="_ProcessLogicCommand">
                      <type>
                        <derived name="LogicCmdProcessor" />
                      </type>
                    </variable>
                    <variable name="_FirstScan">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="TRUE" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CommandProcessor EXTENDS Module
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
END_VAR
VAR_INPUT
	Enable: BOOL;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_VAR
VAR_OUTPUT
	ItfActiveProcessorUnitMode	: PACK_ML.IUnitMode;
	ItfActiveModule: ItfModule;
	ActiveCommand: DUT_Command;
	StatusText: STRING(255);
END_VAR
VAR
	_Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
	_DummyUnitMode: PACK_ML.UnitMode;
	_UnitModeCurrentState: PACK_ML.State;
	//_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;
	_CurrentCmdIdx: UINT;
	_ProcessMoveCommand: MoveCmdProcessor;
	_ProcessPauseCommand: PauseCmdProcessor;
	//_ProcessInputCommand: InputCommandProcessor;
	_ProcessOutputCommand: OutputCmdProcessor;
	_ProcessorDoneRtrig: R_TRIG;
    _ProcessVisionCommand: REFERENCE TO VisionCmdProcessor; // keep vision in separate task
	_ProcessVarSetCommand: VarSetCmdProcessor;
	_ProcessCncCommand: CncCmdProcessor;
	_ProcessLogicCommand: LogicCmdProcessor;
	_FirstScan: BOOL:=TRUE;
END_VAR

VAR CONSTANT
	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_CMD:				INT := 0010;
	_STEP_WAIT:				INT := 0020;
	_STEP_ERR:              INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_CMD">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CommandProcessor EXTENDS Module
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
END_VAR
VAR_INPUT
	Enable: BOOL;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_VAR
VAR_OUTPUT
	ItfActiveProcessorUnitMode	: PACK_ML.IUnitMode;
	ItfActiveModule: ItfModule;
	ActiveCommand: DUT_Command;
	StatusText: STRING(255);
END_VAR
VAR
	_Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
	_DummyUnitMode: PACK_ML.UnitMode;
	_UnitModeCurrentState: PACK_ML.State;
	//_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;
	_CurrentCmdIdx: UINT;
	_ProcessMoveCommand: MoveCmdProcessor;
	_ProcessPauseCommand: PauseCmdProcessor;
	//_ProcessInputCommand: InputCommandProcessor;
	_ProcessOutputCommand: OutputCmdProcessor;
	_ProcessorDoneRtrig: R_TRIG;
    _ProcessVisionCommand: REFERENCE TO VisionCmdProcessor; // keep vision in separate task
	_ProcessVarSetCommand: VarSetCmdProcessor;
	_ProcessCncCommand: CncCmdProcessor;
	_ProcessLogicCommand: LogicCmdProcessor;
	_FirstScan: BOOL:=TRUE;
END_VAR

VAR CONSTANT
	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_CMD:				INT := 0010;
	_STEP_WAIT:				INT := 0020;
	_STEP_ERR:              INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// keep this reference at the top in case we reference this somewhere else first
// hint: originally this was an issue because of the done and reset bits being referenced first
_ProcessVisionCommand REF= _40_Vision.ProcessVisionCommand;

//
SUPER^();

//
IF _FirstScan THEN
	// will exception if we don't set this on first scan
	_DummyUnitMode(sName := 'Active Processor', 
					eInitialState := PACK_ML.State.Idle,
					xActive := TRUE);
	ItfActiveProcessorUnitMode := _DummyUnitMode;
END_IF

// this is at best a hack and needs to be rethought out.
// we logically cant assign a process as the active unit mode 
// at start up so we use this dummy one
CASE _DummyUnitMode.CurrentState OF
	PACK_ML.State.Stopped,
	PACK_ML.State.Aborted,
	PACK_ML.State.Held,
	PACK_ML.State.Suspended,
	PACK_ML.State.Complete,
	PACK_ML.State.Idle:
		//
	PACK_ML.State.Resetting,
	PACK_ML.State.Starting,
	PACK_ML.State.Execute,
	PACK_ML.State.Suspending,
	PACK_ML.State.UnSuspending,
	PACK_ML.State.Holding,
	PACK_ML.State.UnHolding,
	PACK_ML.State.Completing,
	PACK_ML.State.Aborting,
	PACK_ML.State.Stopping,
	PACK_ML.State.Clearing:
		_DummyUnitMode.ActingStateCompleted();
END_CASE

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
IF _ProcessMoveCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('Move Error: ', _ProcessMoveCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF
IF _ProcessPauseCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('Pause Error: ', _ProcessPauseCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF
(*IF _ProcessInputCommand.Error THEN
	SUPER^._M_Error(Description:=CONCAT('Input Error: ', _ProcessInputCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF*)
IF _ProcessOutputCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('Output Error: ', _ProcessOutputCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF       
IF _ProcessVisionCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('Vision Error: ', _ProcessVisionCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF
IF _ProcessVarSetCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('Variable Error: ', _ProcessVarSetCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF
IF _ProcessCncCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('CNC Error: ', _ProcessCncCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF
IF _ProcessLogicCommand.Error THEN
	SUPER^.M_Error(Description:=CONCAT('Logic Error: ', _ProcessLogicCommand.ErrorDescription));
	StatusText:=SUPER^.ErrorDescription;
END_IF

_ProcessMoveCommand(
	StoredPositions:= SUPER^.StoredPositions,
	VisionRegisters:= SUPER^.VisionRegisters,
	Flags:= SUPER^.Flags,
	AxisGroup:= AxisGroup, 
	Acceleration:= 1000, 
	AccFactor:= 0.05,
	Jerk:= 1000,
	JerkFactor:= 1, 
	Position=&gt; ,
	ItfUnitMode=&gt;, 
	Error=&gt; );

_ProcessPauseCommand(
	StoredPositions:= SUPER^.StoredPositions,
	VisionRegisters:= SUPER^.VisionRegisters,
	Flags:= SUPER^.Flags, 
	ElapsedTime=&gt; , 
	RemainingTime=&gt; , 
	ItfUnitMode=&gt;, 
	Error=&gt; );

//_ProcessInputCommand();
_ProcessOutputCommand(
	StoredPositions:= SUPER^.StoredPositions,
	VisionRegisters:= SUPER^.VisionRegisters,
	Flags:= SUPER^.Flags,
	Outputs:= GVL.DigitalOutput,
	Servo1:= Servo1, 
	Servo2:= Servo2, 
	Enable:= Enable,
	ItfUnitMode=&gt;, 
	Error=&gt; );
	
_ProcessVarSetCommand( 
	StoredPositions:= SUPER^.StoredPositions,
	VisionRegisters:= SUPER^.VisionRegisters,
	Flags:= SUPER^.Flags,
	ItfUnitMode=&gt;, 
	Error=&gt; , 
	ErrorDescription=&gt; );

_ProcessCncCommand(
	StoredPositions:= SUPER^.StoredPositions,
	VisionRegisters:= SUPER^.VisionRegisters,
	Flags:= SUPER^.Flags,
	AxisGroup:= AxisGroup, 
	SM3_Drive_PosControl_J1:=SM_Drive_PosControl_J1,
	SM3_Drive_PosControl_J2:=SM_Drive_PosControl_J2,
	SM3_Drive_PosControl_J3:=SM_Drive_PosControl_J3,
	SM3_Drive_PosControl_J4:=SM_Drive_PosControl_J4,
	SM3_Drive_PosControl_J5:=SM_Drive_PosControl_J5,
	SM3_Drive_PosControl_J6:=SM_Drive_PosControl_J6,
	GapVelocity:= , 
	AvoidGaps:= , 
	GapAccel:= , 
	ItfUnitMode=&gt;, 
	Error=&gt; , 
	ErrorDescription=&gt; );
	
_ProcessLogicCommand(
	StoredPositions:= SUPER^.StoredPositions,
	VisionRegisters:= SUPER^.VisionRegisters,
	Flags:= SUPER^.Flags,
	CmdProcessor:= THIS^,
	ItfUnitMode=&gt;, 
	Error=&gt; , 
	ErrorDescription=&gt; , 
	CmdIO:= GVL.CmdIO);
	
	_FirstScan := FALSE;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="642c5013-51df-4c85-a867-73cd18842e60">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="b97773af-d3db-4ff8-bc09-d39e6c9c165a">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqResetting OF
	0:
		_ProcessMoveCommand.M_Home();
		_ProcessPauseCommand.M_Home();
		//_ProcessInputCommand.M_Home();
		_ProcessOutputCommand.M_Home();
		_ProcessVisionCommand.M_Home();
		_ProcessVarSetCommand.M_Home();
		_ProcessCncCommand.M_Home();
		_ProcessLogicCommand.M_Home();
		_SeqResetting := _SeqResetting + 1;
	1:
		IF _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Idle
			AND _ProcessPauseCommand.PropCurrentState = PACK_ML.State.Idle 
			//AND _ProcessInputCommand.PropCurrentState = PACK_ML.State.Idle
			AND _ProcessOutputCommand.PropCurrentState = PACK_ML.State.Idle
			AND _ProcessVisionCommand.PropCurrentState = PACK_ML.State.Idle
			AND _ProcessVarSetCommand.PropCurrentState = PACK_ML.State.Idle
			AND _ProcessCncCommand.PropCurrentState = PACK_ML.State.Idle
			AND _ProcessLogicCommand.PropCurrentState = PACK_ML.State.Idle THEN
				_SeqResetting := 0;
				SUPER^.M_StateComplete();
		END_IF
		
END_CASE

SUPER^.M_Reset();

(*IF ItfActiveModule &lt;&gt; 0 THEN
	CASE _Seq OF
		0:
			IF NOT ItfActiveModule.PropCurrentState = PACK_ML.State.Idle THEN
				ItfActiveModule.M_Home();
				_Seq := 1;
			ELSE
				SUPER^.M_StateComplete();
			END_IF
		1:
			IF ItfActiveModule.PropCurrentState = PACK_ML.State.Idle THEN
				_Seq := 0;
			END_IF
			
	END_CASE
	
ELSE
	SUPER^.M_StateComplete();
	_Seq := 0;
	
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetNextCommand" ObjectId="7318a297-a063-4ac2-856c-165720d821a4">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="CommandNumber">
                            <type>
                              <UINT />
                            </type>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_SetNextCommand : BOOL // returns true if successful
VAR_INPUT
	CommandNumber: UINT;
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IF CommandNumber &lt;= GVL.PROG_CMDS_ARR_END AND CommandNumber &gt;= GVL.PROG_CMDS_ARR_BEG THEN
	_CurrentCmdIdx := CommandNumber;
	M_SetNextCommand := TRUE;
ELSE
	M_SetNextCommand := FALSE;
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_SetNextCommand : BOOL // returns true if successful
VAR_INPUT
	CommandNumber: UINT;
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Idle" ObjectId="a8790f5b-e067-4003-a446-4302e4343c80">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// in this state, we want to reset all the function blocks and hang out
_SeqMain := _STEP_IDLE;
_SeqAborting := 0;
_SeqClearing := 0;
_SeqResetting := 0;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Idle : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="95b94fb2-14e3-4b3b-8405-e444036b8980">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// SUPER already does this but the default is eInitialState:=PACK_ML.State.Idle 
// and we want PACK_ML.State.Aborted for the Orchestrator
SUPER^._UnitMode(sName := 'Orchestrator',
				eInitialState := PACK_ML.State.Aborted,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="9c738675-c279-409c-92e2-b6bbcd05e321">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// we can consider this the "INIT" state
_CurrentCmdIdx := 0;
_SeqMain := _STEP_CMD;
_Commands := Commands;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="9d44a219-dd62-4e0a-8b38-07968243ee03">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
//
CASE _SeqMain OF
  	_STEP_DONE:
		_SeqMain := _STEP_IDLE;
		
	_STEP_IDLE:
		// hang out here until called to run
		_CurrentCmdIdx := 0;
		SUPER^.M_StateComplete();
		
	_STEP_CMD: //
		IF _CurrentCmdIdx &lt;= GVL.PROG_CMDS_ARR_END AND _CurrentCmdIdx &gt;= GVL.PROG_CMDS_ARR_BEG THEN
			//
			IF Commands[_CurrentCmdIdx].CommandType = DUT_CommandType.Disabled THEN
				// want to increment here so that we can disable some commands 
				// in the program and it continue to execute
				_CurrentCmdIdx := _CurrentCmdIdx + 1;
				_SeqMain := _STEP_CMD;
				
			ELSE
				CASE Commands[_CurrentCmdIdx].CommandType OF
					DUT_CommandType.MoveCommand: //
						StatusText := 'Move Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessMoveCommand.ItfUnitMode;
						ItfActiveModule := _ProcessMoveCommand;
						_ProcessMoveCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
					
					DUT_CommandType.PauseCommand: //
						StatusText := 'Pause Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessPauseCommand.ItfUnitMode;
						ItfActiveModule := _ProcessPauseCommand;
						_ProcessPauseCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
					
					DUT_CommandType.InputCommand: //
						StatusText := 'Input Command in Progress.';
						//ActiveUnitMode := _ProcessInputCommand.ItfUnitMode;
						//ItfActiveModule := _ProcessInputCommand;
						//_ProcessInputCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						//ItfActiveModule.M_Start();
					
					DUT_CommandType.OutputCommand: //
						StatusText := 'Output Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessOutputCommand.ItfUnitMode;
						ItfActiveModule := _ProcessOutputCommand;
						_ProcessOutputCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
					
					DUT_CommandType.VisionCommand: //
						StatusText := 'Vision Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessVisionCommand.ItfUnitMode;
						ItfActiveModule := _ProcessVisionCommand;
						_ProcessVisionCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
					
					DUT_CommandType.VarSetCommand: //
						StatusText := 'VarSet Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessVarsetCommand.ItfUnitMode;
						ItfActiveModule := _ProcessVarsetCommand;
						_ProcessVarsetCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
					
					DUT_CommandType.CncCommand: //
						StatusText := 'CNC Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessCncCommand.ItfUnitMode;
						ItfActiveModule := _ProcessCncCommand;
						_ProcessCncCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
					
					DUT_CommandType.LogicCommand: //
						StatusText := 'Logic Command in Progress.';
						ItfActiveProcessorUnitMode := _ProcessLogicCommand.ItfUnitMode;
						ItfActiveModule := _ProcessLogicCommand;
						_ProcessLogicCommand.Command := Commands[_CurrentCmdIdx].CommandString;
						ItfActiveModule.M_Start();
						
				ELSE
					_SeqMain := _STEP_CMD;
					
				END_CASE
				
				// wait for executing
				IF ItfActiveModule.PropCurrentState = PACK_ML.State.Execute THEN
					ActiveCommand := Commands[_CurrentCmdIdx];
					_CurrentCmdIdx := _CurrentCmdIdx + 1;
					_SeqMain := _STEP_WAIT;
				END_IF
			END_IF
				
		ELSE
			_SeqMain := _STEP_DONE;
		END_IF
		
	_STEP_WAIT: // wait for command to finish
		//
		IF _ProcessorDoneRtrig.Q THEN
			_SeqMain := _STEP_CMD;
		END_IF
		//
		IF ItfActiveModule.PropError THEN
			SUPER^._UnitMode.Suspend();
			_SeqMain := _STEP_ERR;
		END_IF
		
	_STEP_ERR: //
	
END_CASE

// watch for rising edge of idle state. this was done for all processors since 
// the vision processor runs in a separate task and isnt guaranteed to start in the same 
// PLC scan.
_ProcessorDoneRtrig(clk:=ItfActiveProcessorUnitMode.CurrentState = PACK_ML.State.Idle);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Suspending" ObjectId="59fc01db-f06d-4b70-9e04-ba20bd9ce6b9">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ItfActiveModule &lt;&gt; 0 THEN
	IF ItfActiveModule.PropCurrentState = PACK_ML.State.Execute THEN
		ItfActiveModule.M_Hold();
		IF ItfActiveModule.PropCurrentState = PACK_ML.State.Held THEN
			SUPER^.M_StateComplete();
		END_IF
	ELSE
		SUPER^.M_StateComplete();
	END_IF
	
ELSE
	SUPER^.M_StateComplete();
	
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Suspending : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_UnSuspending" ObjectId="d8134748-b5a7-4257-9a4e-3b1612d98833">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">//
IF ItfActiveModule &lt;&gt; 0 THEN
	ItfActiveModule.M_Start();
	IF ItfActiveModule.PropCurrentState = PACK_ML.State.Execute THEN
		SUPER^.M_StateComplete();
	END_IF
	
ELSE
	SUPER^.M_StateComplete();
	
END_IF

//
_SeqMain := _STEP_WAIT;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_UnSuspending : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Holding" ObjectId="e05e442b-e0e4-4e0a-9099-5c3c862a429f">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ItfActiveModule &lt;&gt; 0 THEN
	ItfActiveModule.M_Hold();
	IF ItfActiveModule.PropCurrentState = PACK_ML.State.Held THEN
		SUPER^.M_StateComplete();
	END_IF
ELSE
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Holding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_UnHolding" ObjectId="4a0b543c-927e-400a-b5da-ba002055cdd0">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">//
IF ItfActiveModule &lt;&gt; 0 THEN
	ItfActiveModule.M_Start();
	IF ItfActiveModule.PropCurrentState = PACK_ML.State.Execute THEN
		SUPER^.M_StateComplete();
	END_IF
	
ELSE
	SUPER^.M_StateComplete();
	
END_IF

//
_SeqMain := _STEP_WAIT;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Unholding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Aborting" ObjectId="f73e1a47-970e-47c3-b986-e1fe2eaafd0c">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqAborting OF
	0:
		_ProcessMoveCommand.M_Abort();
		_ProcessPauseCommand.M_Abort();
		//_ProcessInputCommand.M_Abort();
		_ProcessOutputCommand.M_Abort();
		_ProcessVisionCommand.M_Abort();
		_ProcessVarSetCommand.M_Abort();
		_ProcessCncCommand.M_Abort();
		_ProcessLogicCommand.M_Abort();
		_SeqAborting := _SeqAborting + 1;
	1:
		IF _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Aborted
			AND _ProcessPauseCommand.PropCurrentState = PACK_ML.State.Aborted 
			//AND _ProcessInputCommand.PropCurrentState = PACK_ML.State.Aborted
			AND _ProcessOutputCommand.PropCurrentState = PACK_ML.State.Aborted
			AND _ProcessVisionCommand.PropCurrentState = PACK_ML.State.Aborted
			AND _ProcessVarSetCommand.PropCurrentState = PACK_ML.State.Aborted
			AND _ProcessCncCommand.PropCurrentState = PACK_ML.State.Aborted
			AND _ProcessLogicCommand.PropCurrentState = PACK_ML.State.Aborted THEN
				_SeqAborting := 0;
				SUPER^.M_StateComplete();
		END_IF
		
END_CASE

(*IF ItfActiveModule &lt;&gt; 0 THEN
	ItfActiveModule.M_Abort();
	IF ItfActiveModule.PropCurrentState = PACK_ML.State.Aborted THEN
		SUPER^.M_StateComplete();
	END_IF
ELSE
	SUPER^.M_StateComplete();
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Aborting : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Stopping" ObjectId="b76b8c76-e672-465e-b5bc-a2cc80d6ee6f">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ItfActiveModule &lt;&gt; 0 THEN
	ItfActiveModule.M_Stop();
	IF ItfActiveModule.PropCurrentState = PACK_ML.State.Idle 
		OR ItfActiveModule.PropCurrentState = PACK_ML.State.Stopped 
		OR ItfActiveModule.PropCurrentState = PACK_ML.State.Aborted 
		OR ItfActiveModule.PropCurrentState = PACK_ML.State.Complete THEN
			SUPER^.M_StateComplete();
	END_IF
	
ELSE
	SUPER^.M_StateComplete();
	
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Stopping : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Clearing" ObjectId="766fbc5b-b0ec-40a6-bc48-5f02adefd0a5">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.M_StateComplete();

(*IF SUPER^.Flags[GVL.HOME_COMPLETE].Value THEN
	CASE _SeqClearing OF
		0:
			_ProcessMoveCommand.M_Home();
			_SeqClearing := _SeqClearing + 1;
		1:
			IF _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Idle THEN
				_SeqClearing := _SeqClearing + 1;
			END_IF
		2:
			IF NOT _ProcessMoveCommand.Error THEN
				_ProcessMoveCommand.Command := GVL.Pose2;
				_ProcessMoveCommand.M_Start();
				_SeqClearing := _SeqClearing + 1;
			ELSE
				SUPER^._M_Error(Description:='Move processor errored. Please reset and try again');
				_SeqClearing := -1;
			END_IF
		3:
			IF _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Execute THEN
				_SeqClearing := _SeqClearing + 1;
			END_IF
		4:
			IF _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Complete 
				OR _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Stopped 
				OR _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Aborted
				OR _ProcessMoveCommand.PropCurrentState = PACK_ML.State.Idle  THEN
					SUPER^.M_StateComplete();
					_SeqClearing := 0;
			END_IF
	END_CASE
ELSE
	SUPER^._M_Error(Description:='Drives are not homed. Please home and try again');
	_SeqClearing := -1;
END_IF

IF _ProcessMoveCommand.Error THEN
	SUPER^._M_Error(Description:='Move processor in error state. Please reset and try again');
	_SeqClearing := -1;
END_IF
*)

(*
IF ItfActiveModule &lt;&gt; 0 THEN
	//
	CASE _Seq OF
		0:
			IF NOT ItfActiveModule.PropCurrentState = PACK_ML.State.Stopped THEN
				ItfActiveModule.M_Abort();
				_Seq := 1;
			ELSE
				SUPER^.M_StateComplete();
			END_IF
		1:
			CASE ItfActiveModule.PropCurrentState OF
				PACK_ML.State.Aborted:
					ItfActiveModule.Clear();
				PACK_ML.State.Stopped:
					_Seq := 0;
			END_CASE
			
	END_CASE
ELSE
	_Seq := 0;
	SUPER^.M_StateComplete();
END_IF
*)
</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Clearing : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CommandProcessor EXTENDS Module
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
END_VAR
VAR_INPUT
	Enable: BOOL;
	Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
END_VAR
VAR_OUTPUT
	ItfActiveProcessorUnitMode	: PACK_ML.IUnitMode;
	ItfActiveModule: ItfModule;
	ActiveCommand: DUT_Command;
	StatusText: STRING(255);
END_VAR
VAR
	_Commands: ARRAY [GVL.PROG_CMDS_ARR_BEG..GVL.PROG_CMDS_ARR_END] OF DUT_Command;
	_DummyUnitMode: PACK_ML.UnitMode;
	_UnitModeCurrentState: PACK_ML.State;
	//_SequenceMain, _SeqAborting, _SeqClearing, _SeqResetting: INT;
	_CurrentCmdIdx: UINT;
	_ProcessMoveCommand: MoveCmdProcessor;
	_ProcessPauseCommand: PauseCmdProcessor;
	//_ProcessInputCommand: InputCommandProcessor;
	_ProcessOutputCommand: OutputCmdProcessor;
	_ProcessorDoneRtrig: R_TRIG;
    _ProcessVisionCommand: REFERENCE TO VisionCmdProcessor; // keep vision in separate task
	_ProcessVarSetCommand: VarSetCmdProcessor;
	_ProcessCncCommand: CncCmdProcessor;
	_ProcessLogicCommand: LogicCmdProcessor;
	_FirstScan: BOOL:=TRUE;
END_VAR

VAR CONSTANT
	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_CMD:				INT := 0010;
	_STEP_WAIT:				INT := 0020;
	_STEP_ERR:              INT := 0030;
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>97872514-f094-4f4a-8630-59a989ffd663</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParseMoveCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseMoveCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_MoveCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING:='';
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_MoveCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseMoveCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_MoveCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING:='';
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseMoveCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_MoveCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING:='';
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_MoveTypeD">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'DIR'" />
                      </initialValue>
                    </variable>
                    <variable name="_MoveTypeL">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LIN'" />
                      </initialValue>
                    </variable>
                    <variable name="_MoveTypeC">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CIR'" />
                      </initialValue>
                    </variable>
                    <variable name="_ChangeTypeA">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ABS'" />
                      </initialValue>
                    </variable>
                    <variable name="_ChangeTypeR">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'REL'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemAcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ACS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemMcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'MCS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemPc1">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'PC1'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemPc2">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'PC2'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemTcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'TCS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemWcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'WCS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemIcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ICS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordTypeH">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LIT'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordTypeV">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VAR'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeS">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'STO'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeV">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VIS'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeF">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'FLG'" />
                      </initialValue>
                    </variable>
                    <variable name="_CircleModeBor">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'BOR'" />
                      </initialValue>
                    </variable>
                    <variable name="_CircleModeCen">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CEN'" />
                      </initialValue>
                    </variable>
                    <variable name="_CircleModeRad">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'RAD'" />
                      </initialValue>
                    </variable>
                    <variable name="_PathChoiceClw">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CLW'" />
                      </initialValue>
                    </variable>
                    <variable name="_PathChoiceCcw">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CCW'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseMoveCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_MoveCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING:='';
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// D is direct move. L is linear move. C is a circular move
// R is relative position. A is absolute position
// V is variable coordinated. H is a hardcoded coordinated
// S is stored position array. V is vision register array.
// D|L|C R|A Speed CoordSystem X0000.00 Y0000.00 Z0000.00 A0000.00 B0000.00 C0000.00 BOR|CEN|RAD CCW|CLW X0000.00 Y0000.00 Z0000.00 A0000.00 B0000.00 C0000.00
// 'D A 10 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
// 'C R 10 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
// 'D A 10 MCS V S 25'
// 'D A 10 MCS V V 33'
// 'C R 10 MCS V S 2 BOR CLW V S 005'
// 'C R 10 MCS V S 003 BOR CLW V V 006'
// 'C R 10 MCS V S 015 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
// 'C R 10 MCS H 250.0 0.0 500.0 0.0 45.0 180.0 BOR CLW V V 22'

Error := FALSE;
ErrorDescription := '';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

//
IF _CmdParams[0] = _MoveTypeD THEN
	stCommand.MoveType := DUT_Command_MoveType.DirectMove;
ELSIF _CmdParams[0] = _MoveTypeL THEN
	stCommand.MoveType := DUT_Command_MoveType.LinearMove;
ELSIF _CmdParams[0] = _MoveTypeC THEN
	stCommand.MoveType := DUT_Command_MoveType.CircularMove;
ELSE
	Error := TRUE;
	ErrorDescription := 'Incorrect move type';
END_IF

//
IF _CmdParams[1] = _ChangeTypeR THEN
	stCommand.PositionType := DUT_Command_PositionType.RelativePosition;
ELSIF _CmdParams[1] = _ChangeTypeA THEN
	stCommand.PositionType := DUT_Command_PositionType.AbsolutePosition;
ELSE
	Error := TRUE;
	ErrorDescription := 'Incorrect position type';
END_IF

//
stCommand.Speed := STRING_TO_LREAL(_CmdParams[2]);

//
IF _CmdParams[3] = _CoordSystemAcs THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.ACS;
ELSIF _CmdParams[3] = _CoordSystemMcs THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.MCS;
ELSIF _CmdParams[3] = _CoordSystemPc1 THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.PCS_1;
ELSIF _CmdParams[3] = _CoordSystemPc2 THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.PCS_2;
ELSIF _CmdParams[3] = _CoordSystemTcs THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.TCS;
ELSIF _CmdParams[3] = _CoordSystemWcs THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.WCS;
ELSIF _CmdParams[3] = _CoordSystemIcs THEN
	stCommand.CoordSystem := SMC_COORD_SYSTEM.ICS;
ELSE
	Error := TRUE;
	ErrorDescription := 'Incorrect coordinate system type';
END_IF

//
IF _CmdParams[4] = _CoordTypeH THEN
	stCommand.CoordinateType := DUT_Command_CoordinateType.Literal;
ELSIF _CmdParams[4] = _CoordTypeV THEN
	stCommand.CoordinateType := DUT_Command_CoordinateType.Variable;
ELSE
	Error := TRUE;
	ErrorDescription := 'Incorrect coordinate type'; // TODO wow i need a better name for this... wtf was i thinking?
END_IF

//
CASE stCommand.CoordinateType OF 
// 'D A 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
	DUT_Command_CoordinateType.Literal:
		stCommand.CoordRef.X := STRING_TO_LREAL(_CmdParams[5]);
		stCommand.CoordRef.Y := STRING_TO_LREAL(_CmdParams[6]);
		stCommand.CoordRef.Z := STRING_TO_LREAL(_CmdParams[7]);
		stCommand.CoordRef.A := STRING_TO_LREAL(_CmdParams[8]);
		stCommand.CoordRef.B := STRING_TO_LREAL(_CmdParams[9]);
		stCommand.CoordRef.C := STRING_TO_LREAL(_CmdParams[10]);
// 'D A 010 MCS V S 001'
	DUT_Command_CoordinateType.Variable:
		stCommand.ArrayIndex := STRING_TO_UINT(_CmdParams[6]);
		IF stCommand.ArrayIndex &lt;= GVL.POS_ARR_END 
			AND stCommand.ArrayIndex &gt;= GVL.POS_ARR_BEG THEN
				IF _CmdParams[5] = _ArrayTypeS THEN
					stCommand.ArrayType := DUT_Command_ArrayType.StoredPosition;
					stCommand.CoordRef := PersistentVars.StoredPositions[stCommand.ArrayIndex].Position;
				ELSIF _CmdParams[5] = _ArrayTypeV THEN
					stCommand.ArrayType := DUT_Command_ArrayType.VisionRegister;
					stCommand.CoordRef := PersistentVars.VisionRegisters[stCommand.ArrayIndex].Position;
				ELSE
					Error := TRUE;
					ErrorDescription := 'Incorrect array type';
				END_IF
		ELSE
			Error := TRUE;
			ErrorDescription := 'Array index out of bounds';
		END_IF
	
END_CASE

//
CASE stCommand.CoordinateType OF 
// 'C R 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
	DUT_Command_CoordinateType.Literal:
		IF _CmdParams[11] = _CircleModeBor THEN
			stCommand.CircleMode := SMC_CIRC_MODE.BORDER;
		ELSIF _CmdParams[11] = _CircleModeCen THEN
			stCommand.CircleMode := SMC_CIRC_MODE.CENTER;
		ELSIF _CmdParams[11] = _CircleModeRad THEN
			stCommand.CircleMode := SMC_CIRC_MODE.RADIUS;
		ELSE
			Error := TRUE;
			ErrorDescription := 'Incorrect circle mode';
		END_IF
// 'C R 010 MCS V S 001 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
	DUT_Command_CoordinateType.Variable:
		IF _CmdParams[7] = _CircleModeBor THEN
			stCommand.CircleMode := SMC_CIRC_MODE.BORDER;
		ELSIF _CmdParams[7] = _CircleModeCen THEN
			stCommand.CircleMode := SMC_CIRC_MODE.CENTER;
		ELSIF _CmdParams[7] = _CircleModeRad THEN
			stCommand.CircleMode := SMC_CIRC_MODE.RADIUS;
		ELSE
			Error := TRUE;
			ErrorDescription := 'Incorrect circle mode';
		END_IF
	
END_CASE

//
CASE stCommand.CoordinateType OF 
// 'C R 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
	DUT_Command_CoordinateType.Literal:
		IF _CmdParams[12] = _PathChoiceClw THEN
			stCommand.PathChoice := MC_CIRC_PATHCHOICE.CLOCKWISE;
		ELSIF _CmdParams[12] = _PathChoiceCcw THEN
			stCommand.PathChoice := MC_CIRC_PATHCHOICE.COUNTER_CLOCKWISE;
		ELSE
			Error := TRUE;
			ErrorDescription := 'Incorrect circle direction';
		END_IF
		IF _CmdParams[13] = _CoordTypeH THEN
			stCommand.CircularCoordinateType := DUT_Command_CoordinateType.Literal;
		ELSIF _CmdParams[13] = _CoordTypeV THEN
			stCommand.CircularCoordinateType := DUT_Command_CoordinateType.Variable;
		ELSE
			Error := TRUE;
			ErrorDescription := 'Incorrect coordinate type'; // TODO yeah, this needs better naming. "coordinate type" does not fit.
		END_IF
// 'C R 010 MCS V S 001 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
	DUT_Command_CoordinateType.Variable:
		IF _CmdParams[8] = _PathChoiceClw THEN
			stCommand.PathChoice := MC_CIRC_PATHCHOICE.CLOCKWISE;
		ELSIF _CmdParams[8] = _PathChoiceCcw THEN
			stCommand.PathChoice := MC_CIRC_PATHCHOICE.COUNTER_CLOCKWISE;
		ELSE
			Error := TRUE;
			ErrorDescription := 'Incorrect circle direction';
		END_IF
		IF _CmdParams[9] = _CoordTypeH THEN
			stCommand.CircularCoordinateType := DUT_Command_CoordinateType.Literal;
		ELSIF _CmdParams[9] = _CoordTypeV THEN
			stCommand.CircularCoordinateType := DUT_Command_CoordinateType.Variable;
		ELSE
			Error := TRUE;
			ErrorDescription := 'Incorrect coordinate type'; // TODO this naming "coordinate type" needs to go.
		END_IF
	
END_CASE

//
CASE stCommand.CircularCoordinateType OF 
	DUT_Command_CoordinateType.Literal:
		CASE stCommand.CoordinateType OF
// 'C R 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
			DUT_Command_CoordinateType.Literal:
				stCommand.CoordRef2.X := STRING_TO_LREAL(_CmdParams[14]);
				stCommand.CoordRef2.Y := STRING_TO_LREAL(_CmdParams[15]);
				stCommand.CoordRef2.Z := STRING_TO_LREAL(_CmdParams[16]);
				stCommand.CoordRef2.A := STRING_TO_LREAL(_CmdParams[17]);
				stCommand.CoordRef2.B := STRING_TO_LREAL(_CmdParams[18]);
				stCommand.CoordRef2.C := STRING_TO_LREAL(_CmdParams[19]);
// 'C R 010 MCS V S 001 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
			DUT_Command_CoordinateType.Variable:
				stCommand.CoordRef2.X := STRING_TO_LREAL(_CmdParams[10]);
				stCommand.CoordRef2.Y := STRING_TO_LREAL(_CmdParams[11]);
				stCommand.CoordRef2.Z := STRING_TO_LREAL(_CmdParams[12]);
				stCommand.CoordRef2.A := STRING_TO_LREAL(_CmdParams[13]);
				stCommand.CoordRef2.B := STRING_TO_LREAL(_CmdParams[14]);
				stCommand.CoordRef2.C := STRING_TO_LREAL(_CmdParams[15]);
				
		END_CASE
	
	DUT_Command_CoordinateType.Variable:
		CASE stCommand.CoordinateType OF
// 'C R 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW V V 001'
			DUT_Command_CoordinateType.Literal:
				stCommand.CircularArrayIndex := STRING_TO_UINT(_CmdParams[15]);
				IF stCommand.CircularArrayIndex &lt;= GVL.POS_ARR_END 
					AND stCommand.CircularArrayIndex &gt;= GVL.POS_ARR_BEG THEN
						IF _CmdParams[14] = _ArrayTypeS THEN
							stCommand.CircularArrayType := DUT_Command_ArrayType.StoredPosition;
							stCommand.CoordRef2 := PersistentVars.StoredPositions[stCommand.CircularArrayIndex].Position;
						ELSIF _CmdParams[14] = _ArrayTypeV THEN
							stCommand.CircularArrayType := DUT_Command_ArrayType.VisionRegister;
							stCommand.CoordRef2 := PersistentVars.VisionRegisters[stCommand.CircularArrayIndex].Position;
						ELSE
							Error := TRUE;
							ErrorDescription := 'Incorrect array type';
						END_IF
					
				ELSE
					Error:=TRUE;
					ErrorDescription := 'Array index out of bounds';
					
				END_IF
				
// 'C R 010 MCS V S 001 BOR CLW V V 001'
			DUT_Command_CoordinateType.Variable:
				stCommand.CircularArrayIndex := STRING_TO_UINT(_CmdParams[11]);
				IF stCommand.CircularArrayIndex &lt;= GVL.POS_ARR_END 
					AND stCommand.CircularArrayIndex &gt;= GVL.POS_ARR_BEG THEN
						IF _CmdParams[10] = _ArrayTypeS THEN
							stCommand.CircularArrayType := DUT_Command_ArrayType.StoredPosition;
							stCommand.CoordRef2 := PersistentVars.StoredPositions[stCommand.CircularArrayIndex].Position;
						ELSIF _CmdParams[10] = _ArrayTypeV THEN
							stCommand.CircularArrayType := DUT_Command_ArrayType.VisionRegister;
							stCommand.CoordRef2 := PersistentVars.VisionRegisters[stCommand.CircularArrayIndex].Position;
						ELSE
							Error:=TRUE;
							ErrorDescription := 'Incorrect array type';
						END_IF
					
				ELSE
					Error:=TRUE;
					ErrorDescription := 'Array index out of bounds';
				END_IF
				
		END_CASE
	
END_CASE</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseMoveCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_MoveCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING:='';
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>35e49e9e-292d-48d5-910d-e69db317cc55</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="_20_Io" pouType="program">
                <interface>
                  <localVars>
                    <variable name="PowerOn">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Execute_Servo1">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Speed_Servo1">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="360" />
                      </initialValue>
                    </variable>
                    <variable name="Position_Servo1">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="MC_Power_Servo1">
                      <type>
                        <derived name="MC_Power" />
                      </type>
                    </variable>
                    <variable name="MC_MoveAbsolute_Servo1">
                      <type>
                        <derived name="MC_MoveAbsolute" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _20_Io
VAR
	PowerOn: BOOL;
	
	Execute_Servo1: BOOL;
	Speed_Servo1: LREAL := 360;
	Position_Servo1: LREAL := 0;
	MC_Power_Servo1: MC_Power;
	MC_MoveAbsolute_Servo1: MC_MoveAbsolute;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <actions>
                  <action name="A_CmdIoMapping">
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
//
GVL.CmdIO.Input := GVL.DigitalInput;
GVL.DigitalOutput := GVL.CmdIO.Output;

//</xhtml>
                      </ST>
                    </body>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                        <ObjectId>a2f21641-ddf0-4588-b300-185fb18e4bef</ObjectId>
                      </data>
                    </addData>
                  </action>
                </actions>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">//
PowerOn := GVL.PowerOn;

//
A_CmdIoMapping();

// servo 1
MC_Power_Servo1(
	Axis:= AdafruitPwm01, 
	Enable:= PowerOn, 
	bRegulatorOn:= PowerOn, 
	bDriveStart:= PowerOn, 
	Status=&gt; , 
	bRegulatorRealState=&gt; , 
	bDriveStartRealState=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
	
MC_MoveAbsolute_Servo1(
	Axis:= AdafruitPwm01, 
	Execute:= Execute_Servo1, 
	Position:= Position_Servo1, 
	Velocity:= Speed_Servo1, 
	Acceleration:= 1000, 
	Deceleration:= 1000, 
	Jerk:= 1000, 
	Direction:= , 
	BufferMode:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
Execute_Servo1 := FALSE;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _20_Io
VAR
	PowerOn: BOOL;
	
	Execute_Servo1: BOOL;
	Speed_Servo1: LREAL := 360;
	Position_Servo1: LREAL := 0;
	MC_Power_Servo1: MC_Power;
	MC_MoveAbsolute_Servo1: MC_MoveAbsolute;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>c3b19a06-6020-44bc-8c83-cb31670bfa1a</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="_30_Visu" pouType="program">
                <interface>
                  <localVars>
                    <variable name="SelectedProgramNumber">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="SelectedRecipeRowIndex">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="RecipeRowSelected">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="InsertLineAbove">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="InsertLineBelow">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="DeleteLine">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="CopySelectedCommand">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="CopiedCommandType">
                      <type>
                        <derived name="DUT_CommandType" />
                      </type>
                    </variable>
                    <variable name="CopiedCommandString">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <variable name="PasteCommand">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_i">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_j">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_k">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="SetStoredPositionAsCurrent">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="SelectedStoredPosition">
                      <type>
                        <UINT />
                      </type>
                    </variable>
                    <variable name="SetVisionRegisterAsCurrent">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="SelectedVisionRegister">
                      <type>
                        <UINT />
                      </type>
                    </variable>
                    <variable name="SelectedFlag">
                      <type>
                        <UINT />
                      </type>
                    </variable>
                    <variable name="TeachPosition">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="stTeachPosition">
                      <type>
                        <derived name="ST_MoveCmd" />
                      </type>
                    </variable>
                    <variable name="MoveCmdParser">
                      <type>
                        <derived name="ParseMoveCmd" />
                      </type>
                    </variable>
                    <variable name="stMoveCmd">
                      <type>
                        <derived name="ST_MoveCmd" />
                      </type>
                    </variable>
                    <variable name="MoveCmdVisu">
                      <type>
                        <derived name="AddMoveCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="OutputCmdParser">
                      <type>
                        <derived name="ParseOutputCmd" />
                      </type>
                    </variable>
                    <variable name="stOutputCmd">
                      <type>
                        <derived name="ST_OutputCmd" />
                      </type>
                    </variable>
                    <variable name="OutputCmdVisu">
                      <type>
                        <derived name="AddOutputCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="PauseCmdParser">
                      <type>
                        <derived name="ParsePauseCmd" />
                      </type>
                    </variable>
                    <variable name="stPauseCmd">
                      <type>
                        <derived name="ST_PauseCmd" />
                      </type>
                    </variable>
                    <variable name="PauseCmdVisu">
                      <type>
                        <derived name="AddPauseCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="VisionCmdParser">
                      <type>
                        <derived name="ParseVisionCmd" />
                      </type>
                    </variable>
                    <variable name="stVisionCmd">
                      <type>
                        <derived name="ST_VisionCmd" />
                      </type>
                    </variable>
                    <variable name="VisionCmdVisu">
                      <type>
                        <derived name="AddVisionCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="VarSetCmdParser">
                      <type>
                        <derived name="ParseVarSetCmd" />
                      </type>
                    </variable>
                    <variable name="stVarSetCmd">
                      <type>
                        <derived name="ST_VarSetCmd" />
                      </type>
                    </variable>
                    <variable name="VarSetCmdVisu">
                      <type>
                        <derived name="AddVarSetCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="CncCmdParser">
                      <type>
                        <derived name="ParseCncCmd" />
                      </type>
                    </variable>
                    <variable name="stCncCmd">
                      <type>
                        <derived name="ST_CncCmd" />
                      </type>
                    </variable>
                    <variable name="CncCmdVisu">
                      <type>
                        <derived name="AddCncCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="LogicCmdParser">
                      <type>
                        <derived name="ParseLogicCmd" />
                      </type>
                    </variable>
                    <variable name="stLogicCmd">
                      <type>
                        <derived name="ST_LogicCmd" />
                      </type>
                    </variable>
                    <variable name="LogicCmdVisu">
                      <type>
                        <derived name="AddLogicCmd_VISU_STRUCT" />
                      </type>
                    </variable>
                    <variable name="CurrentVisu">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="OpenDialog">
                      <type>
                        <derived name="VU.FbOpenDialogExtended" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _30_Visu
VAR	
	
	SelectedProgramNumber: INT;
	SelectedRecipeRowIndex: INT;
	RecipeRowSelected: BOOL;
	InsertLineAbove: BOOL;
	InsertLineBelow: BOOL;
	DeleteLine: BOOL;
	CopySelectedCommand: BOOL;
	CopiedCommandType: DUT_CommandType;
	CopiedCommandString: STRING(GVL.COMMAND_LEN);
	PasteCommand: BOOL;
	
	_i,_j,_k: INT;
	
	SetStoredPositionAsCurrent: BOOL;
	SelectedStoredPosition: UINT;
	SetVisionRegisterAsCurrent: BOOL;
	SelectedVisionRegister: UINT;
	SelectedFlag: UINT;
	
	//
	TeachPosition: BOOL;
	stTeachPosition: ST_MoveCmd;
	
	//
	MoveCmdParser: ParseMoveCmd;
	stMoveCmd: ST_MoveCmd;
	MoveCmdVisu: AddMoveCmd_VISU_STRUCT;
	
	//
	OutputCmdParser: ParseOutputCmd;
	stOutputCmd: ST_OutputCmd;
	OutputCmdVisu: AddOutputCmd_VISU_STRUCT;
	
	//
	PauseCmdParser: ParsePauseCmd;
	stPauseCmd: ST_PauseCmd;
	PauseCmdVisu: AddPauseCmd_VISU_STRUCT;
	
	//
	VisionCmdParser : ParseVisionCmd;
	stVisionCmd : ST_VisionCmd;
	VisionCmdVisu: AddVisionCmd_VISU_STRUCT;
	
	//
	VarSetCmdParser : ParseVarSetCmd;
	stVarSetCmd : ST_VarSetCmd;
	VarSetCmdVisu: AddVarSetCmd_VISU_STRUCT;
	
	//
	CncCmdParser : ParseCncCmd;
	stCncCmd : ST_CncCmd;
	CncCmdVisu: AddCncCmd_VISU_STRUCT;
	
	//
	LogicCmdParser : ParseLogicCmd;
	stLogicCmd : ST_LogicCmd;
	LogicCmdVisu: AddLogicCmd_VISU_STRUCT;
	
	//
	CurrentVisu: STRING;
	OpenDialog: VU.FbOpenDialogExtended;

END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">
//
IF (InsertLineAbove OR InsertLineBelow) AND RecipeRowSelected THEN
	//
	IF InsertLineAbove THEN
		InsertLineAbove := FALSE;
		_j := SelectedRecipeRowIndex + 1;
	ELSIF InsertLineBelow THEN
		InsertLineBelow := FALSE;
		_j := SelectedRecipeRowIndex + 2;
	END_IF
	//
	FOR _i := GVL.PROG_CMDS_ARR_END TO _j BY -1 DO
		// shift all data
		IF _i &gt;= GVL.PROG_CMDS_ARR_BEG AND _i &lt;= GVL.PROG_CMDS_ARR_END THEN // can never really bo too careful am I right?
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandType := PersistentVars.Programs[SelectedProgramNumber].Commands[_i - 1].CommandType;
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandString := PersistentVars.Programs[SelectedProgramNumber].Commands[_i - 1].CommandString;
		END_IF
	END_FOR
	//
	PersistentVars.Programs[SelectedProgramNumber].Commands[_j - 1].CommandType := DUT_CommandType.Disabled;
	PersistentVars.Programs[SelectedProgramNumber].Commands[_j - 1].CommandString := '';
END_IF

//
IF DeleteLine AND RecipeRowSelected THEN
	DeleteLine := FALSE;
	FOR _i := SelectedRecipeRowIndex TO GVL.PROG_CMDS_ARR_END - 1 BY 1 DO
		IF _i &gt;= GVL.PROG_CMDS_ARR_BEG AND _i &lt;= GVL.PROG_CMDS_ARR_END THEN // can never really bo too careful am I right?
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandType := PersistentVars.Programs[SelectedProgramNumber].Commands[_i + 1].CommandType;
			PersistentVars.Programs[SelectedProgramNumber].Commands[_i].CommandString := PersistentVars.Programs[SelectedProgramNumber].Commands[_i + 1].CommandString;
		END_IF
	END_FOR
END_IF

//
IF SetStoredPositionAsCurrent THEN
	SetStoredPositionAsCurrent := FALSE;
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.X := F_RoundLreal(_00_Main.ProcessJog.Position.v[0],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.Y := F_RoundLreal(_00_Main.ProcessJog.Position.v[1],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.Z := F_RoundLreal(_00_Main.ProcessJog.Position.v[2],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.A := F_RoundLreal(_00_Main.ProcessJog.Position.v[3],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.B := F_RoundLreal(_00_Main.ProcessJog.Position.v[4],2);
	PersistentVars.StoredPositions[SelectedStoredPosition].Position.C := F_RoundLreal(_00_Main.ProcessJog.Position.v[5],2);
END_IF

//
IF TeachPosition THEN
	TeachPosition := FALSE;
	//
	stTeachPosition.MoveType := DUT_Command_MoveType.DirectMove;
	stTeachPosition.Speed := 50;
	stTeachPosition.PositionType := DUT_Command_PositionType.AbsolutePosition;
	stTeachPosition.CoordSystem := _00_Main.ProcessJog.CoordSystem;
	stTeachPosition.CoordRef.X := F_RoundLreal(_00_Main.ProcessJog.Position.v[0],2);
	stTeachPosition.CoordRef.Y := F_RoundLreal(_00_Main.ProcessJog.Position.v[1],2);
	stTeachPosition.CoordRef.Z := F_RoundLreal(_00_Main.ProcessJog.Position.v[2],2);
	stTeachPosition.CoordRef.A := F_RoundLreal(_00_Main.ProcessJog.Position.v[3],2);
	stTeachPosition.CoordRef.B := F_RoundLreal(_00_Main.ProcessJog.Position.v[4],2);
	stTeachPosition.CoordRef.C := F_RoundLreal(_00_Main.ProcessJog.Position.v[5],2);
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType := DUT_CommandType.MoveCommand;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString := BuildMoveCmd(stTeachPosition);
END_IF

//
IF PasteCommand THEN
	PasteCommand := FALSE;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType := CopiedCommandType;
	PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString := CopiedCommandString;
END_IF

//
IF CopySelectedCommand THEN
	CopySelectedCommand := FALSE;
	
	//
	CopiedCommandType := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType;
	CopiedCommandString := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString;
	
	CASE PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandType OF
		DUT_CommandType.Disabled:
			//
			
		DUT_CommandType.MoveCommand:
			MoveCmdParser(Command := PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stMoveCmd := MoveCmdParser.stCommand;
			
		DUT_CommandType.PauseCommand:
			PauseCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stPauseCmd := PauseCmdParser.stCommand;
			
		DUT_CommandType.InputCommand:
			//
			
		DUT_CommandType.OutputCommand:
			OutputCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stOutputCmd := OutputCmdParser.stCommand;
			
		DUT_CommandType.VisionCommand:
			VisionCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stVisionCmd := VisionCmdParser.stCommand;
			
		DUT_CommandType.VarSetCommand:
			VarSetCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stVarSetCmd := VarSetCmdParser.stCommand;
			
		DUT_CommandType.CncCommand:
			CncCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stCncCmd := CncCmdParser.stCommand;
			
		DUT_CommandType.LogicCommand:
			LogicCmdParser(Command:=PersistentVars.Programs[SelectedProgramNumber].Commands[SelectedRecipeRowIndex].CommandString);
			stLogicCmd := LogicCmdParser.stCommand;
			
	END_CASE
	
END_IF

// should be called after CopySelectedCommand case statement
CurrentVisu := VisuElems.CurrentVisu;
OpenDialog(
	xExecute:= , 
	xDone=&gt; , 
	xBusy=&gt; , 
	xError=&gt; , 
	itfClientFilter:= , 
	eError=&gt; , 
	sDialogName:= , 
	xModal:= TRUE, // TRUE - visu in background cannot be used
	pTopLeftPosition:= , 
	itfDialogOpenedListener:= , 
	pbyDialogInterfaceData:= , 
	udiDialogInterfaceDataSize:= , 
	itfDialogCloseListener:= , 
	pbyTagForDialogClosed:= , 
	dwDialogFlags:= );
IF (OpenDialog.xExecute AND OpenDialog.xDone) 
	OR OpenDialog.xError 
	THEN
		OpenDialog.xExecute := FALSE;
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _30_Visu
VAR	
	
	SelectedProgramNumber: INT;
	SelectedRecipeRowIndex: INT;
	RecipeRowSelected: BOOL;
	InsertLineAbove: BOOL;
	InsertLineBelow: BOOL;
	DeleteLine: BOOL;
	CopySelectedCommand: BOOL;
	CopiedCommandType: DUT_CommandType;
	CopiedCommandString: STRING(GVL.COMMAND_LEN);
	PasteCommand: BOOL;
	
	_i,_j,_k: INT;
	
	SetStoredPositionAsCurrent: BOOL;
	SelectedStoredPosition: UINT;
	SetVisionRegisterAsCurrent: BOOL;
	SelectedVisionRegister: UINT;
	SelectedFlag: UINT;
	
	//
	TeachPosition: BOOL;
	stTeachPosition: ST_MoveCmd;
	
	//
	MoveCmdParser: ParseMoveCmd;
	stMoveCmd: ST_MoveCmd;
	MoveCmdVisu: AddMoveCmd_VISU_STRUCT;
	
	//
	OutputCmdParser: ParseOutputCmd;
	stOutputCmd: ST_OutputCmd;
	OutputCmdVisu: AddOutputCmd_VISU_STRUCT;
	
	//
	PauseCmdParser: ParsePauseCmd;
	stPauseCmd: ST_PauseCmd;
	PauseCmdVisu: AddPauseCmd_VISU_STRUCT;
	
	//
	VisionCmdParser : ParseVisionCmd;
	stVisionCmd : ST_VisionCmd;
	VisionCmdVisu: AddVisionCmd_VISU_STRUCT;
	
	//
	VarSetCmdParser : ParseVarSetCmd;
	stVarSetCmd : ST_VarSetCmd;
	VarSetCmdVisu: AddVarSetCmd_VISU_STRUCT;
	
	//
	CncCmdParser : ParseCncCmd;
	stCncCmd : ST_CncCmd;
	CncCmdVisu: AddCncCmd_VISU_STRUCT;
	
	//
	LogicCmdParser : ParseLogicCmd;
	stLogicCmd : ST_LogicCmd;
	LogicCmdVisu: AddLogicCmd_VISU_STRUCT;
	
	//
	CurrentVisu: STRING;
	OpenDialog: VU.FbOpenDialogExtended;

END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>9462f316-faa5-42b7-be46-708f3ef2e1f0</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildOutputCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_OutputCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildOutputCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_OutputCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_OutTypeDig: STRING(3):='DIG';
	_OutTypeAna: STRING(3):='ANA';
	_OutTypeSrv: STRING(3):='SRV';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildOutputCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_OutputCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_OutTypeDig: STRING(3):='DIG';
	_OutTypeAna: STRING(3):='ANA';
	_OutTypeSrv: STRING(3):='SRV';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <variable name="_OutTypeDig">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'DIG'" />
                      </initialValue>
                    </variable>
                    <variable name="_OutTypeAna">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ANA'" />
                      </initialValue>
                    </variable>
                    <variable name="_OutTypeSrv">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'SRV'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildOutputCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_OutputCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_OutTypeDig: STRING(3):='DIG';
	_OutTypeAna: STRING(3):='ANA';
	_OutTypeSrv: STRING(3):='SRV';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// DIG +0001.00 +0001.00 (turn digital input 1 on)
// DIG +0001.00 +0000.00 (turn digital input 1 off)
// SRV +0001.00 +0030.00 +0360.00(set servo 1 to position 30 at speed 360)

// clear the command
_Command:='';

//
CASE stCommand.OutputType OF
	DUT_OutputType.Digital:
		F_AddElement(_Command, _Delimiter, _OutTypeDig);
	DUT_OutputType.Analog:
		F_AddElement(_Command, _Delimiter, _OutTypeAna);
	Dut_OutputType.Servo:
		F_AddElement(_Command, _Delimiter, _OutTypeSrv);
END_CASE

//
F_AddElement(_Command, _Delimiter, INT_TO_STRING(stCommand.OutputTarget));

//
F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.OutputValue1));

// only need if servo
IF stCommand.OutputType = DUT_OutputType.Servo THEN
	F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.OutputValue2));
END_IF

// set function equal to command
BuildOutputCmd := _Command;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildOutputCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_OutputCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_OutTypeDig: STRING(3):='DIG';
	_OutTypeAna: STRING(3):='ANA';
	_OutTypeSrv: STRING(3):='SRV';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>e29ffd53-c60c-4780-9cae-795a42c1806f</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParseOutputCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseOutputCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_OutputCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_OutputType: STRING;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_OutputCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseOutputCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_OutputCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_OutputType: STRING;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="_OutputType">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseOutputCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_OutputCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_OutputType: STRING;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// DIG 1 1 (turn digital input 1 on)
// DIG 1 0 (turn digital input 1 off)
// SRV 1 30.0 360.0(set servo 1 to position 30 at speed 360)

Error:=FALSE;
ErrorDescription:='';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

_OutputType := _CmdParams[0];
IF _OutputType = 'DIG' THEN
	stCommand.OutputType := DUT_OutputType.Digital;
ELSIF _OutputType = 'ANA' THEN
	stCommand.OutputType := DUT_OutputType.Analog;
ELSIF _OutputType = 'SRV' THEN
	stCommand.OutputType := DUT_OutputType.Servo;
END_IF
stCommand.OutputTarget := STRING_TO_INT(_CmdParams[1]);
stCommand.OutputValue1 := STRING_TO_LREAL(_CmdParams[2]);

// only need to parse the second parameter if not digital
IF NOT (stCommand.OutputType = DUT_OutputType.Digital) THEN
	stCommand.OutputValue2 := STRING_TO_LREAL(_CmdParams[3]);
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseOutputCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_OutputCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_OutputType: STRING;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>b67ef6d4-a509-4504-af22-150225e40cd0</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildPauseCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_PauseCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildPauseCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_PauseCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildPauseCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_PauseCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildPauseCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_PauseCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// clear the command
_Command:='';

// build command
F_AddElement(_Command, _Delimiter, TIME_TO_STRING(stCommand.PauseTime));

// set function equal to command
BuildPauseCmd := _Command;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildPauseCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_PauseCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>b7a08d1d-f5e6-4f3c-9f3f-733c40c45429</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParsePauseCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParsePauseCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_PauseCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_PauseCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParsePauseCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_PauseCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParsePauseCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_PauseCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// T#30s

Error:=FALSE;
ErrorDescription:='';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

stCommand.PauseTime := STRING_TO_TIME(_CmdParams[0]);</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParsePauseCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_PauseCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>155e4e57-98df-4f34-8414-c9af1793585b</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="_40_Vision" pouType="program">
                <interface>
                  <localVars>
                    <variable name="ProcessVisionCommand">
                      <type>
                        <derived name="VisionCmdProcessor" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _40_Vision
VAR
	ProcessVisionCommand: VisionCmdProcessor;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">//
ProcessVisionCommand(
	StoredPositions:= PersistentVars.StoredPositions,
	VisionRegisters:= PersistentVars.VisionRegisters,
	Flags:= PersistentVars.Flags,
	ItfUnitMode=&gt; ,
	Error=&gt; , 
	ErrorDescription=&gt; , 
	VisionStateText=&gt; );</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM _40_Vision
VAR
	ProcessVisionCommand: VisionCmdProcessor;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>168c2bce-5a06-487a-a077-28448e10fa0d</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="CncPathPlanner" pouType="functionBlock">
                <interface>
                  <inOutVars>
                    <variable name="VarList">
                      <type>
                        <derived name="SMC_VarList" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncPathPlanner
VAR_IN_OUT
	VarList: SMC_VarList;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	DataOut: POINTER TO SMC_OUTQUEUE;
	Busy: BOOL;
	Done: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_Filename: STRING := '_cnc/CNC_FromFile.cnc';
	_SMC_NCInterpreter: SMC_NCInterpreter;
	_SMC_ReadNCFile2: SMC_ReadNCFile2;
	_SMC_CheckVelocities: SMC_CheckVelocities;
	_SMC_GEOINFO: ARRAY[0..49] OF SMC_GEOINFO;
	_StartPos: SMC_PosInfo;
	_OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
	_ExecuteRtrig: R_TRIG;
	_Execute: BOOL;
	_ResetRtrig: R_TRIG;
	_Reset: BOOL;
	_Sequence: INT:=0;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	_BaseCncDirectory: STRING:='_cnc/'; // before update to 3.5.19.40 '/var/opt/codesys/_cnc/'
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <outputVars>
                    <variable name="DataOut">
                      <type>
                        <pointer>
                          <baseType>
                            <derived name="SMC_OUTQUEUE" />
                          </baseType>
                        </pointer>
                      </type>
                    </variable>
                    <variable name="Busy">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Done">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncPathPlanner
VAR_IN_OUT
	VarList: SMC_VarList;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	DataOut: POINTER TO SMC_OUTQUEUE;
	Busy: BOOL;
	Done: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_Filename: STRING := '_cnc/CNC_FromFile.cnc';
	_SMC_NCInterpreter: SMC_NCInterpreter;
	_SMC_ReadNCFile2: SMC_ReadNCFile2;
	_SMC_CheckVelocities: SMC_CheckVelocities;
	_SMC_GEOINFO: ARRAY[0..49] OF SMC_GEOINFO;
	_StartPos: SMC_PosInfo;
	_OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
	_ExecuteRtrig: R_TRIG;
	_Execute: BOOL;
	_ResetRtrig: R_TRIG;
	_Reset: BOOL;
	_Sequence: INT:=0;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	_BaseCncDirectory: STRING:='_cnc/'; // before update to 3.5.19.40 '/var/opt/codesys/_cnc/'
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_Filename">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'_cnc/CNC_FromFile.cnc'" />
                      </initialValue>
                    </variable>
                    <variable name="_SMC_NCInterpreter">
                      <type>
                        <derived name="SMC_NCInterpreter" />
                      </type>
                    </variable>
                    <variable name="_SMC_ReadNCFile2">
                      <type>
                        <derived name="SMC_ReadNCFile2" />
                      </type>
                    </variable>
                    <variable name="_SMC_CheckVelocities">
                      <type>
                        <derived name="SMC_CheckVelocities" />
                      </type>
                    </variable>
                    <variable name="_SMC_GEOINFO">
                      <type>
                        <array>
                          <dimension lower="0" upper="49" />
                          <baseType>
                            <derived name="SMC_GEOINFO" />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="_StartPos">
                      <type>
                        <derived name="SMC_PosInfo" />
                      </type>
                    </variable>
                    <variable name="_OriConvention">
                      <type>
                        <derived name="SMC_ORI_CONVENTION" />
                      </type>
                      <initialValue>
                        <simpleValue value="SMC_ORI_CONVENTION.XYZ" />
                      </initialValue>
                    </variable>
                    <variable name="_ExecuteRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_Execute">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_ResetRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_Reset">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Sequence">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_ErrorRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncPathPlanner
VAR_IN_OUT
	VarList: SMC_VarList;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	DataOut: POINTER TO SMC_OUTQUEUE;
	Busy: BOOL;
	Done: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_Filename: STRING := '_cnc/CNC_FromFile.cnc';
	_SMC_NCInterpreter: SMC_NCInterpreter;
	_SMC_ReadNCFile2: SMC_ReadNCFile2;
	_SMC_CheckVelocities: SMC_CheckVelocities;
	_SMC_GEOINFO: ARRAY[0..49] OF SMC_GEOINFO;
	_StartPos: SMC_PosInfo;
	_OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
	_ExecuteRtrig: R_TRIG;
	_Execute: BOOL;
	_ResetRtrig: R_TRIG;
	_Reset: BOOL;
	_Sequence: INT:=0;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	_BaseCncDirectory: STRING:='_cnc/'; // before update to 3.5.19.40 '/var/opt/codesys/_cnc/'
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_BaseCncDirectory">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'_cnc/'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> before update to 3.5.19.40 '/var/opt/codesys/_cnc/'</xhtml>
                      </documentation>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncPathPlanner
VAR_IN_OUT
	VarList: SMC_VarList;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	DataOut: POINTER TO SMC_OUTQUEUE;
	Busy: BOOL;
	Done: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_Filename: STRING := '_cnc/CNC_FromFile.cnc';
	_SMC_NCInterpreter: SMC_NCInterpreter;
	_SMC_ReadNCFile2: SMC_ReadNCFile2;
	_SMC_CheckVelocities: SMC_CheckVelocities;
	_SMC_GEOINFO: ARRAY[0..49] OF SMC_GEOINFO;
	_StartPos: SMC_PosInfo;
	_OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
	_ExecuteRtrig: R_TRIG;
	_Execute: BOOL;
	_ResetRtrig: R_TRIG;
	_Reset: BOOL;
	_Sequence: INT:=0;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	_BaseCncDirectory: STRING:='_cnc/'; // before update to 3.5.19.40 '/var/opt/codesys/_cnc/'
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">_ExecuteRtrig(CLK:=_Execute);
IF _ExecuteRtrig.Q THEN
	_Execute:= FALSE;
END_IF
_ResetRtrig(CLK:=_Reset);
IF _ResetRtrig.Q THEN
	_Reset:= FALSE;
	_Sequence:=999;
END_IF

Busy := _Sequence &lt;&gt; 000;

CASE _Sequence OF
	999:
		_SMC_ReadNCFile2.bExecute := FALSE;
		_Sequence := 000;
	000:
		IF _ExecuteRtrig.Q THEN
			_SMC_ReadNCFile2.bExecute := TRUE;
			_Sequence := 1;
		END_IF
	001:
		IF NOT _SMC_CheckVelocities.bBusy THEN
			_Sequence := 999;
			Done := TRUE;
		END_IF
	
END_CASE

_SMC_ReadNCFile2(
	bExecute:= , 
	bAbort:= _Sequence = 999, 
	sFileName:= _Filename, 
	pvl:= ADR(VarList), 
	fDefaultVel:= , 
	fDefaultAccel:= , 
	fDefaultDecel:= , 
	fDefaultVelFF:= , 
	fDefaultAccelFF:= , 
	fDefaultDecelFF:= , 
	b3DMode:= , 
	bStepSuppress:= , 
	aSubProgramDirs:= , 
	bParenthesesAsComments:= , 
	bDisableJumpBuffer:= , 
	pCustomFunTable:= , 
	aTokenModifier:= , 
	aSentenceModifier:= , 
	bBusy=&gt; , 
	bError=&gt; , 
	ErrorID=&gt; , 
	errorPos=&gt; , 
	ErrorProgramName=&gt; , 
	sentences=&gt; , 
	adwFileSize=&gt; , 
	adwPos=&gt; );

_SMC_NCInterpreter(
	sentences:= _SMC_ReadNCFile2.sentences, 
	bExecute:= _SMC_ReadNCFile2.bExecute, 
	bAbort:= _Sequence = 999, 
	bAppend:= , 
	piStartPosition:= _StartPos, 
	vStartToolLength:= , 
	nSizeOutQueue:= SIZEOF(_SMC_GEOINFO), 
	pbyBufferOutQueue:= ADR(_SMC_GEOINFO), 
	bEnableSyntaxChecks:= , 
	eOriConv:= _OriConvention, // SMC_ORI_CONVENTION 
	dCircleTolerance:= , 
	pInterpreterStack:= , 
	nInterpreterStackSizeBytes:= , 
	bDone=&gt; , 
	bBusy=&gt; , 
	bError=&gt; , 
	wErrorID=&gt; , 
	errorPos=&gt; , 
	poqDataOut=&gt; , 
	iStatus=&gt; , 
	iLineNumberDecoded=&gt; , 
	GCodeText=&gt; , 
	CallstackInfo=&gt; , 
	aActivePrograms=&gt; );

_SMC_CheckVelocities(
	bExecute:= _SMC_NCInterpreter.bExecute, 
	bAbort:= _Sequence = 999, 
	poqDataIn:= _SMC_NCInterpreter.poqDataOut, 
	dAngleTol:= , 
	bCheckAddAxVelJump:= , 
	dMaxAddAxVelDifference:= , 
	bBusy=&gt; , 
	bError=&gt; , 
	wErrorID=&gt; , 
	poqDataOut=&gt; DataOut);
	
_ErrorRtrig();
_ErrorRtrig.CLK:= _SMC_ReadNCFile2.bError
				OR _SMC_NCInterpreter.bError
				OR _SMC_CheckVelocities.bError;
IF _ErrorRtrig.Q THEN
	Error := TRUE;
	IF _SMC_ReadNCFile2.bError THEN
		ErrorDescription := CONCAT('ReadNCFile Error: ',
                                CONCAT(TO_STRING(_SMC_ReadNCFile2.ErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ReadNCFile2.ErrorID,
                                            SMC_Language_Type.english)))) ;
	END_IF
	IF _SMC_NCInterpreter.bError THEN
		ErrorDescription := CONCAT(' NCInterpreter Error: ',
                                CONCAT(TO_STRING(_SMC_NCInterpreter.wErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_NCInterpreter.wErrorID,
                                            SMC_Language_Type.english)))) ;
	END_IF
	IF _SMC_CheckVelocities.bError THEN
		ErrorDescription := CONCAT(' CheckVelocities Error: ',
                                CONCAT(TO_STRING(_SMC_CheckVelocities.wErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_CheckVelocities.wErrorID,
                                            SMC_Language_Type.english)))) ;
	END_IF
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="92875761-2fd7-4bb6-bbf7-a117fd98b83f">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="Filename">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'CNC_FromFile.cnc'" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Execute : BOOL
VAR_INPUT
	Filename: STRING := 'CNC_FromFile.cnc';
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Filename := CONCAT(_BaseCncDirectory, Filename);
_Execute:=TRUE;
Done := FALSE;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Execute : BOOL
VAR_INPUT
	Filename: STRING := 'CNC_FromFile.cnc';
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Reset" ObjectId="bcea459e-fa66-4937-b73d-59fec7864ad5">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Reset := TRUE;
Error := FALSE;
ErrorDescription := '';</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Reset : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetStartPosition" ObjectId="deae1c1c-a35f-4dab-a882-870c0dd1bbee">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="StartPos">
                            <type>
                              <derived name="SMC_PosInfo" />
                            </type>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_SetStartPosition : BOOL
VAR_INPUT
	StartPos: SMC_PosInfo;
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StartPos := StartPos;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_SetStartPosition : BOOL
VAR_INPUT
	StartPos: SMC_PosInfo;
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetOriConvention" ObjectId="bc2fe0c5-bb28-4086-a8ef-9e95685b910f">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="OriConvention">
                            <type>
                              <derived name="SMC_ORI_CONVENTION" />
                            </type>
                            <initialValue>
                              <simpleValue value="SMC_ORI_CONVENTION.XYZ" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_SetOriConvention : BOOL
VAR_INPUT
	OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_OriConvention := OriConvention;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_SetOriConvention : BOOL
VAR_INPUT
	OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncPathPlanner
VAR_IN_OUT
	VarList: SMC_VarList;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	DataOut: POINTER TO SMC_OUTQUEUE;
	Busy: BOOL;
	Done: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_Filename: STRING := '_cnc/CNC_FromFile.cnc';
	_SMC_NCInterpreter: SMC_NCInterpreter;
	_SMC_ReadNCFile2: SMC_ReadNCFile2;
	_SMC_CheckVelocities: SMC_CheckVelocities;
	_SMC_GEOINFO: ARRAY[0..49] OF SMC_GEOINFO;
	_StartPos: SMC_PosInfo;
	_OriConvention: SMC_ORI_CONVENTION := SMC_ORI_CONVENTION.XYZ;
	_ExecuteRtrig: R_TRIG;
	_Execute: BOOL;
	_ResetRtrig: R_TRIG;
	_Reset: BOOL;
	_Sequence: INT:=0;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	_BaseCncDirectory: STRING:='_cnc/'; // before update to 3.5.19.40 '/var/opt/codesys/_cnc/'
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>845c01d1-16bd-4c5b-8921-4865a7e07fd2</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildCncCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_CncCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildCncCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_CncCmd;
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildCncCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_CncCmd;
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <variable name="_AddString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ADD'" />
                      </initialValue>
                    </variable>
                    <variable name="_XYZString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'XYZ'" />
                      </initialValue>
                    </variable>
                    <variable name="_ZYXString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ZYX'" />
                      </initialValue>
                    </variable>
                    <variable name="_ZYZString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ZYZ'" />
                      </initialValue>
                    </variable>
                    <variable name="_LiteralString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LIT'" />
                      </initialValue>
                    </variable>
                    <variable name="_VariableString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VAR'" />
                      </initialValue>
                    </variable>
                    <variable name="_StoredPositionsString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'STO'" />
                      </initialValue>
                    </variable>
                    <variable name="_VisionRegistersString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VIS'" />
                      </initialValue>
                    </variable>
                    <variable name="_FlagsString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'FLG'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildCncCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_CncCmd;
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// /path/to/file/with/no/spaces/file.cnc ADD|XYX|ZYX|ZYZ startpos
// file1.cnc XYZ H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00
// file2.cnc ADD A S 025
// file3.cnc ADD A V 015

_Command:='';

//
F_AddElement(_Command, _Delimiter, stCommand.Filename);

//
CASE stCommand.OriConvention OF
	SMC_ORI_CONVENTION.ADDAXES:
		F_AddElement(_Command, _Delimiter, _AddString);
	SMC_ORI_CONVENTION.XYZ:
		F_AddElement(_Command, _Delimiter, _XYZString);
	SMC_ORI_CONVENTION.ZYX:
		F_AddElement(_Command, _Delimiter, _ZYXString);
	SMC_ORI_CONVENTION.ZYZ:
		F_AddElement(_Command, _Delimiter, _ZYZString);
END_CASE

//
CASE stCommand.CoordinateType OF
	DUT_Command_CoordinateType.Literal:
		F_AddElement(_Command, _Delimiter, _LiteralString);
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.StartPos.dX));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.StartPos.dY));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.StartPos.dZ));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.StartPos.dA));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.StartPos.dB));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.StartPos.dC));
		
	DUT_Command_CoordinateType.Variable:
		F_AddElement(_Command, _Delimiter, _VariableString);
		CASE stCommand.ArrayType OF
			DUT_Command_ArrayType.StoredPosition:
				F_AddElement(_Command, _Delimiter, _StoredPositionsString);
			DUT_Command_ArrayType.VisionRegister:
				F_AddElement(_Command, _Delimiter, _VisionRegistersString);
			DUT_Command_ArrayType.Flag:
				F_AddElement(_Command, _Delimiter, _FlagsString);
		END_CASE
		F_AddElement(_Command, _Delimiter, INT_TO_STRING(stCommand.ArrayIndex));
		
END_CASE

BuildCncCmd := _Command;
</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildCncCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_CncCmd;
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>e33aafb8-c7d1-4dab-86cc-41df906bbf07</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="PositionTracker" pouType="functionBlock">
                <interface>
                  <inOutVars>
                    <variable name="AxisGroup">
                      <type>
                        <derived name="AXIS_GROUP_REF_SM3" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J1">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J2">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J3">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J4">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J5">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J6">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PositionTracker
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	VisuStruct3DTrack: VisuStruct3DTrack;
	Arm: SMC_ArticulatedRobot_6DOF_J0_State;
	Elbow: SMC_ArticulatedRobot_6DOF_J1_State;
	Hand: SMC_ArticulatedRobot_6DOF_J4_State;
END_VAR
VAR
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_VisuStruct3DPathPoint: ARRAY [0..10000] OF VisuStruct3DPathPoint;
	_SMC_PositionTracker: SMC_PositionTracker;
	_PositionTrackerClearR_Trig: R_Trig;
	_Clear: BOOL:=FALSE;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <outputVars>
                    <variable name="VisuStruct3DTrack">
                      <type>
                        <derived name="VisuStruct3DTrack" />
                      </type>
                    </variable>
                    <variable name="Arm">
                      <type>
                        <derived name="SMC_ArticulatedRobot_6DOF_J0_State" />
                      </type>
                    </variable>
                    <variable name="Elbow">
                      <type>
                        <derived name="SMC_ArticulatedRobot_6DOF_J1_State" />
                      </type>
                    </variable>
                    <variable name="Hand">
                      <type>
                        <derived name="SMC_ArticulatedRobot_6DOF_J4_State" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PositionTracker
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	VisuStruct3DTrack: VisuStruct3DTrack;
	Arm: SMC_ArticulatedRobot_6DOF_J0_State;
	Elbow: SMC_ArticulatedRobot_6DOF_J1_State;
	Hand: SMC_ArticulatedRobot_6DOF_J4_State;
END_VAR
VAR
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_VisuStruct3DPathPoint: ARRAY [0..10000] OF VisuStruct3DPathPoint;
	_SMC_PositionTracker: SMC_PositionTracker;
	_PositionTrackerClearR_Trig: R_Trig;
	_Clear: BOOL:=FALSE;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_SMC_Trafof_ArticulatedRobot_6DOF">
                      <type>
                        <derived name="SMC_Trafof_ArticulatedRobot_6DOF" />
                      </type>
                    </variable>
                    <variable name="_SMC_TrafoConfig_ArticulatedRobot_6DOF">
                      <type>
                        <derived name="SMC_TrafoConfig_ArticulatedRobot_6DOF" />
                      </type>
                    </variable>
                    <variable name="_VisuStruct3DPathPoint">
                      <type>
                        <array>
                          <dimension lower="0" upper="10000" />
                          <baseType>
                            <derived name="VisuStruct3DPathPoint" />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="_SMC_PositionTracker">
                      <type>
                        <derived name="SMC_PositionTracker" />
                      </type>
                    </variable>
                    <variable name="_PositionTrackerClearR_Trig">
                      <type>
                        <derived name="R_Trig" />
                      </type>
                    </variable>
                    <variable name="_Clear">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PositionTracker
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	VisuStruct3DTrack: VisuStruct3DTrack;
	Arm: SMC_ArticulatedRobot_6DOF_J0_State;
	Elbow: SMC_ArticulatedRobot_6DOF_J1_State;
	Hand: SMC_ArticulatedRobot_6DOF_J4_State;
END_VAR
VAR
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_VisuStruct3DPathPoint: ARRAY [0..10000] OF VisuStruct3DPathPoint;
	_SMC_PositionTracker: SMC_PositionTracker;
	_PositionTrackerClearR_Trig: R_Trig;
	_Clear: BOOL:=FALSE;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">
// NOTE currently the settings for J6 invert direction under scaling/mapping contradict using motion control 
// libraries and CNC. For CNC to work properly, the setting is required to be enabled (inverted). Additionally
// the homing direction and position will need to be negated. This all requires a full download. Will be leaving 
// setting disabled for now so that we can continue to use motion control. 
//
// to recap, take these steps if you would like to try out CNC:
// 1. open the axis pool settings and under the scaling/mapping section enable 'invert direction'
// 2. in the A_Homing POU, change the homing direction to positive.
// 3. in _00_MAIN POU, under FirstScan set the initial home offset to a positive value (keep the value and just change the sign).
// 4. do a full download.
// 5. go online and set the persistent value (if previously initialized in FirstScan) to a positive value.
//
// UPDATE: Figured out a work around for this issue. In the A_Interpolater POU, I negated the set position in the ControlAxisByPos
// function block for J6 such that it drives the opposite way. This appears to have resolved the issue. Why this is needed, I do not
// know. I am sure it is some minor overlooked detail somewhere in the code...


_SMC_TrafoConfig_ArticulatedRobot_6DOF.a1:=ArfBotAxisGroup.Trafo.a1;//AxisGroup.Trafo.a1;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.a2:=ArfBotAxisGroup.Trafo.a2;//AxisGroup.Trafo.a2;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.a3:=ArfBotAxisGroup.Trafo.a3;//AxisGroup.Trafo.a3;
// conflicting documentation on if d1 needs to be pos or neg. only works as negative otherwise trafo reports invalid configuration
// https://product-help.schneider-electric.com/Machine%20Expert/V2.0/zh/codesys_softmotion/codesys_softmotion/modules/_sm_trafo_pou_six_dof_robot.html
// https://forge.codesys.com/forge/talk/Motion/thread/16e1f0327f/
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d1:=-ArfBotAxisGroup.Trafo.d1;//-AxisGroup.Trafo.d1;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d3:=ArfBotAxisGroup.Trafo.d3;//AxisGroup.Trafo.d3;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d4:=ArfBotAxisGroup.Trafo.d4;//AxisGroup.Trafo.d4;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d6:=ArfBotAxisGroup.Trafo.d6;//AxisGroup.Trafo.d6;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q3_max_deg:=160; // TODO put magic numbers somewhere appropriate
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q3_min_deg:=-160; // TODO put magic numbers somewhere appropriate
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q5_max_deg:=160; // TODO put magic numbers somewhere appropriate
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q5_min_deg:=-160; // TODO put magic numbers somewhere appropriate

// track position
_SMC_Trafof_ArticulatedRobot_6DOF(config:=_SMC_TrafoConfig_ArticulatedRobot_6DOF,
							Drive0:=SM3_Drive_PosControl_J1,
							Drive1:=SM3_Drive_PosControl_J2,
							Drive2:=SM3_Drive_PosControl_J3,
							Drive3:=SM3_Drive_PosControl_J4,
							Drive4:=SM3_Drive_PosControl_J5,
							Drive5:=SM3_Drive_PosControl_J6,
							vToolPos=&gt;,
							mToolOrientation=&gt;,
							armState=&gt;Arm,
							elbowState=&gt;Elbow,
							handState=&gt;Hand);

_PositionTrackerClearR_Trig(Clk:=_Clear);
_SMC_PositionTracker(
	bEnable:= TRUE, 
	bClear:= _PositionTrackerClearR_Trig.Q, 
	dX:= _SMC_Trafof_ArticulatedRobot_6DOF.vToolPos.dX, 
	dY:= _SMC_Trafof_ArticulatedRobot_6DOF.vToolPos.dY, 
	dZ:= _SMC_Trafof_ArticulatedRobot_6DOF.vToolPos.dZ, 
	udiNumberOfPointsInArray:= 10001, //SIZEOF(_VisuStruct3DPathPoint), TODO make this dynamic. hint SIZEOF wont work
	pBuffer:= ADR(_VisuStruct3DPathPoint), 
	vs3dt=&gt; VisuStruct3DTrack);
_Clear := FALSE;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Clear" ObjectId="dfb86b0d-b5f1-49bd-9916-9936d6497f13">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Clear := TRUE;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Clear
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PositionTracker
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	VisuStruct3DTrack: VisuStruct3DTrack;
	Arm: SMC_ArticulatedRobot_6DOF_J0_State;
	Elbow: SMC_ArticulatedRobot_6DOF_J1_State;
	Hand: SMC_ArticulatedRobot_6DOF_J4_State;
END_VAR
VAR
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_VisuStruct3DPathPoint: ARRAY [0..10000] OF VisuStruct3DPathPoint;
	_SMC_PositionTracker: SMC_PositionTracker;
	_PositionTrackerClearR_Trig: R_Trig;
	_Clear: BOOL:=FALSE;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>7701f0fc-a0ed-4db5-acf4-25ec5ce43abb</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="OpenCV" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="sIpAddress">
                      <type>
                        <string length="19" />
                      </type>
                      <initialValue>
                        <simpleValue value="'127.0.0.1'" />
                      </initialValue>
                    </variable>
                    <variable name="uPort">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="50011" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OpenCV
VAR_INPUT
	sIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_Done: BOOL;
	_Busy: BOOL;
	_Error: BOOL;
	_ErrorDescription: STRING;
	_Response: STRING(255);
	_WorkerUid: STRING;
	_Execute: BOOL;
	_Reset: BOOL:=FALSE;
	_ResetRtrig: R_TRIG;
	_Step: INT;
	_Command: STRING(255);
	_ReadRecordLast: DINT;
	_PythonTcpClient: PythonTcpClient;
	_TimeoutTimer: TON:=(PT:=T#120S);
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Done">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Busy">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="_Response">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="_WorkerUid">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="_Execute">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Reset">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                    <variable name="_ResetRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_Step">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_Command">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="_ReadRecordLast">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="_PythonTcpClient">
                      <type>
                        <derived name="PythonTcpClient" />
                      </type>
                    </variable>
                    <variable name="_TimeoutTimer">
                      <type>
                        <derived name="TON" />
                      </type>
                      <initialValue>
                        <structValue>
                          <value member="PT">
                            <simpleValue value="TIME#2m0s0ms" />
                          </value>
                        </structValue>
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OpenCV
VAR_INPUT
	sIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_Done: BOOL;
	_Busy: BOOL;
	_Error: BOOL;
	_ErrorDescription: STRING;
	_Response: STRING(255);
	_WorkerUid: STRING;
	_Execute: BOOL;
	_Reset: BOOL:=FALSE;
	_ResetRtrig: R_TRIG;
	_Step: INT;
	_Command: STRING(255);
	_ReadRecordLast: DINT;
	_PythonTcpClient: PythonTcpClient;
	_TimeoutTimer: TON:=(PT:=T#120S);
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">_TimeoutTimer(IN:=_Step &gt; 0);
IF _TimeoutTimer.Q THEN
	_Step := 0;
	_Error := TRUE;
	_ErrorDescription := 'timed out waiting for response.';
END_IF

_ResetRtrig(CLK:=_Reset);
IF _ResetRtrig.Q THEN
	_Reset := FALSE;
	_Step := 0;
END_IF

_Done := _Step = 0;
_Busy := NOT _Done;

CASE _Step OF
	0: // IDLE
		IF _Execute AND NOT _PythonTcpClient.bBusyWrite THEN
			_Execute := FALSE;
			_Step := _Step + 1;
		ELSIF _Execute THEN
			_Execute := FALSE;
		END_IF
	
	1: // CALL
		_ReadRecordLast := _PythonTcpClient.bRecordRead;
		IF _PythonTcpClient.M_Write(Data:=_Command) THEN
			_Step := _Step + 1;
		ELSE
			_Error := TRUE;
			_ErrorDescription := 'tcp client busy or not connected';
			_Step := 0;
		END_IF
	
	2: // WAIT
		IF _PythonTcpClient.bRecordRead &lt;&gt; _ReadRecordLast THEN
			_ReadRecordLast := _PythonTcpClient.bRecordRead;
			IF find(_PythonTcpClient.strRead, 'res: ') = 1 THEN
				MemUtils.MemSet(
					pbyBuffer:=ADR(_Response),
					byValue:=0,
					dwSize:=SIZEOF(_Response));
				_Response := _PythonTcpClient.strRead;
				_Step := 0;
				
			ELSIF find(_PythonTcpClient.strRead, 'worker uid: ') = 1 THEN
				MemUtils.MemSet(
					pbyBuffer:=ADR(_WorkerUid),
					byValue:=0,
					dwSize:=SIZEOF(_WorkerUid));
				_WorkerUid := DELETE(STR:=_PythonTcpClient.strRead, LEN:=12, POS:=1);
				
			ELSIF find(_PythonTcpClient.strRead, 'command uid: ') = 1 THEN
				MemUtils.MemSet(
					pbyBuffer:=ADR(_WorkerUid),
					byValue:=0,
					dwSize:=SIZEOF(_WorkerUid));
				_WorkerUid := DELETE(STR:=_PythonTcpClient.strRead, LEN:=12, POS:=1);
				
			END_IF
		END_IF
		
END_CASE

_PythonTcpClient(
	bEnable:= TRUE, 
	strIpAddress:= sIpAddress, 
	uPort:= uPort,
	bBusyWrite=&gt; , 
	bDoneWrite=&gt; , 
	bBusyRead=&gt; , 
	bRecordRead=&gt; , 
	strRead=&gt; );</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Reset" ObjectId="822d4051-a212-409b-adf7-3a2fcd54f85d">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Reset := TRUE;
_Error := FALSE;
_ErrorDescription := '';</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Reset : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_CalibrateCamera" ObjectId="f8181cbb-d977-4dc5-9d9a-f6beb94ec24e">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="iImageWidth">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="2016" />
                            </initialValue>
                          </variable>
                          <variable name="iImageHeight">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="2000" />
                            </initialValue>
                          </variable>
                          <variable name="uTimeout">
                            <type>
                              <UDINT />
                            </type>
                            <initialValue>
                              <simpleValue value="60" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml">sec</xhtml>
                            </documentation>
                          </variable>
                          <variable name="fCalCheckerSize">
                            <type>
                              <REAL />
                            </type>
                            <initialValue>
                              <simpleValue value="25.0" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml">mm</xhtml>
                            </documentation>
                          </variable>
                          <variable name="iCalCheckerX">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="6" />
                            </initialValue>
                          </variable>
                          <variable name="iCalCheckerY">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="9" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_CalibrateCamera : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
	fCalCheckerSize: REAL:=25.0; //mm
	iCalCheckerX: UINT:=6;
	iCalCheckerY: UINT:=9;
END_VAR
VAR	
	_CalScriptFileName: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/CalibrateCamera.py';
	_CalResultFile: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                        <localVars>
                          <variable name="_CalScriptFileName">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/Application/Vision/CalibrateCamera.py'" />
                            </initialValue>
                          </variable>
                          <variable name="_CalResultFile">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/visu/outputimage.jpg'" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_CalibrateCamera : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
	fCalCheckerSize: REAL:=25.0; //mm
	iCalCheckerX: UINT:=6;
	iCalCheckerY: UINT:=9;
END_VAR
VAR	
	_CalScriptFileName: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/CalibrateCamera.py';
	_CalResultFile: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </localVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">
// calibrate with a checkerboard
// sudo python /var/opt/codesys/PlcLogic/Application/CalibrateCamera.py -s cal.yaml -l 24.5 -x 6 -y 9 -d false

IF NOT _Busy THEN
	M_CalibrateCamera := TRUE;
	
	_TimeoutTimer.PT := UDINT_TO_TIME(uTimeout * 1000);
	
	_Command := CONCAT('sudo python ', _CalScriptFileName);
	_Command := CONCAT(_Command, ' -l ');
	_Command := CONCAT(_Command, REAL_TO_STRING(fCalCheckerSize));
	_Command := CONCAT(_Command, ' -x ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iCalCheckerX));
	_Command := CONCAT(_Command, ' -y ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iCalCheckerY));
	_Command := CONCAT(_Command, ' -w ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iImageWidth));
	_Command := CONCAT(_Command, ' -h ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iImageHeight));
	_Command := CONCAT(_Command, ' -r ');
	_Command := CONCAT(_Command, _CalResultFile);
	_Command := CONCAT(_Command, ' 2&gt; ./vision_log.txt ');
	_Execute := TRUE;
	
ELSE
	M_CalibrateCamera := FALSE;
	//_Error := TRUE;
	//_ErrorDescription := 'function busy.';
	
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_CalibrateCamera : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
	fCalCheckerSize: REAL:=25.0; //mm
	iCalCheckerX: UINT:=6;
	iCalCheckerY: UINT:=9;
END_VAR
VAR	
	_CalScriptFileName: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/CalibrateCamera.py';
	_CalResultFile: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Cancel" ObjectId="98ccbeec-074e-4395-b507-03fd4edf31aa">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IF _WorkerUid &lt;&gt; '' THEN
	M_Cancel := TRUE;
	_Command := 'kill: ';
	_Command := CONCAT(_Command, _WorkerUid);
	_WorkerUid := ''; // lets make sure to forget this uid in case its used again for something else
	_Step := 0;
	_Execute := TRUE;
	
ELSE
	M_Cancel := FALSE;
	
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Cancel : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_CaptureImage" ObjectId="d38f4a97-5265-4a49-a236-4f8dbe120152">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="iImageWidth">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="2016" />
                            </initialValue>
                          </variable>
                          <variable name="iImageHeight">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="2000" />
                            </initialValue>
                          </variable>
                          <variable name="uTimeout">
                            <type>
                              <UDINT />
                            </type>
                            <initialValue>
                              <simpleValue value="60" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml">sec</xhtml>
                            </documentation>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_CaptureImage : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
END_VAR
VAR
	_ImageScriptFileName: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/CaptureImage.py';
	_CaptureImageName: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                        <localVars>
                          <variable name="_ImageScriptFileName">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/Application/Vision/CaptureImage.py'" />
                            </initialValue>
                          </variable>
                          <variable name="_CaptureImageName">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/visu/outputimage.jpg'" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_CaptureImage : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
END_VAR
VAR
	_ImageScriptFileName: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/CaptureImage.py';
	_CaptureImageName: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </localVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">
// capture an image
// sudo python /var/opt/codesys/PlcLogic/Application/CaptureImage.py -s /var/opt/codesys/PlcLogic/Application/input.jpg -w 2016 -h 2000

IF NOT _Busy THEN
	M_CaptureImage := TRUE;
	
	_TimeoutTimer.PT := UDINT_TO_TIME(uTimeout * 1000);
	
	_Command := CONCAT('sudo python ', _ImageScriptFileName);
	_Command := CONCAT(_Command, ' -s ');
	_Command := CONCAT(_Command, _CaptureImageName);
	_Command := CONCAT(_Command, ' -w ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iImageWidth));
	_Command := CONCAT(_Command, ' -h ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iImageHeight));
	_Command := CONCAT(_Command, ' 2&gt; ./vision_log.txt '); 
	_Execute := TRUE;
	
ELSE
	M_CaptureImage := FALSE;
	//_Error := TRUE;
	//_ErrorDescription := 'function busy.';
	
END_IF
</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_CaptureImage : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
END_VAR
VAR
	_ImageScriptFileName: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/CaptureImage.py';
	_CaptureImageName: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_LocatePart" ObjectId="6c14d589-4ff1-4332-97a1-15bfa9d317ed">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="iImageWidth">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="2016" />
                            </initialValue>
                          </variable>
                          <variable name="iImageHeight">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="2000" />
                            </initialValue>
                          </variable>
                          <variable name="uTimeout">
                            <type>
                              <UDINT />
                            </type>
                            <initialValue>
                              <simpleValue value="60" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml">sec</xhtml>
                            </documentation>
                          </variable>
                          <variable name="iMaxPos">
                            <type>
                              <UINT />
                            </type>
                            <initialValue>
                              <simpleValue value="10" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml"> i</xhtml>
                            </documentation>
                          </variable>
                          <variable name="dMaxOverlap">
                            <type>
                              <REAL />
                            </type>
                            <initialValue>
                              <simpleValue value="0.0" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml"> j</xhtml>
                            </documentation>
                          </variable>
                          <variable name="dScore">
                            <type>
                              <REAL />
                            </type>
                            <initialValue>
                              <simpleValue value="0.8" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml"> k</xhtml>
                            </documentation>
                          </variable>
                          <variable name="dToleranceAngle">
                            <type>
                              <REAL />
                            </type>
                            <initialValue>
                              <simpleValue value="90.0" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml"> l</xhtml>
                            </documentation>
                          </variable>
                          <variable name="sTemplateName">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'template.jpg'" />
                            </initialValue>
                          </variable>
                          <variable name="sScriptFilename">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'FastTemplateMatching.py'" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_LocatePart : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
	iMaxPos: UINT:=10; // i
	dMaxOverlap: REAL:=0.0; // j
	dScore: REAL:=0.8; // k
	dToleranceAngle: REAL:=90.0; // l
	sTemplateName: STRING:='template.jpg';
	sScriptFilename: STRING:='FastTemplateMatching.py';
END_VAR
VAR CONSTANT
	//_SCRIPT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/FastTemplateMatching.py';
	_SCRIPT_DIR_PATH: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/';
	_RESULT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
	_TEMPLATE_DIR_PATH: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/Templates/';
END_VAR

</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                        <localVars constant="true">
                          <variable name="_SCRIPT_DIR_PATH">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/Application/Vision/'" />
                            </initialValue>
                            <documentation>
                              <xhtml xmlns="http://www.w3.org/1999/xhtml">_SCRIPT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/FastTemplateMatching.py';</xhtml>
                            </documentation>
                          </variable>
                          <variable name="_RESULT_FILE_NAME">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/visu/outputimage.jpg'" />
                            </initialValue>
                          </variable>
                          <variable name="_TEMPLATE_DIR_PATH">
                            <type>
                              <string />
                            </type>
                            <initialValue>
                              <simpleValue value="'/var/opt/codesys/PlcLogic/Application/Vision/Templates/'" />
                            </initialValue>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_LocatePart : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
	iMaxPos: UINT:=10; // i
	dMaxOverlap: REAL:=0.0; // j
	dScore: REAL:=0.8; // k
	dToleranceAngle: REAL:=90.0; // l
	sTemplateName: STRING:='template.jpg';
	sScriptFilename: STRING:='FastTemplateMatching.py';
END_VAR
VAR CONSTANT
	//_SCRIPT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/FastTemplateMatching.py';
	_SCRIPT_DIR_PATH: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/';
	_RESULT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
	_TEMPLATE_DIR_PATH: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/Templates/';
END_VAR

</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </localVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">
// run the designated vision program
// sudo python /var/opt/codesys/PlcLogic/Application/Vision/TemplateMatch.py -s /var/opt/codesys/PlcLogic/visu/outputimage.jpg        -t /var/opt/codesys/PlcLogic/Application/Vision/Template3.JPG -i 0.9 -j 1.0 -d true -w 2016 -h 2000
// sudo python /var/opt/codesys/PlcLogic/Application/Vision/FastTemplateMatching.py -s /var/opt/codesys/PlcLogic/visu/outputimage.jpg -t /var/opt/codesys/PlcLogic/Application/Vision/Template.jpg -w 2016 -h 2000 -d false
IF NOT _Busy THEN
	M_LocatePart := TRUE;
	
	_TimeoutTimer.PT := UDINT_TO_TIME(uTimeout * 1000);
	
	_Command := CONCAT('sudo python ', _SCRIPT_DIR_PATH);
	_Command := CONCAT(_Command, sScriptFilename);
	//_Command := CONCAT(_Command, ' -s '); // need to trim down the string length
	//_Command := CONCAT(_Command, _VisionImageName);
	_Command := CONCAT(_Command, ' -t ');
	_Command := CONCAT(_Command, _TEMPLATE_DIR_PATH);
	_Command := CONCAT(_Command, sTemplateName);
	_Command := CONCAT(_Command, ' -i ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iMaxPos));
	_Command := CONCAT(_Command, ' -j ');
	_Command := CONCAT(_Command, REAL_TO_STRING(dMaxOverlap));
	_Command := CONCAT(_Command, ' -k ');
	_Command := CONCAT(_Command, REAL_TO_STRING(dScore));
	_Command := CONCAT(_Command, ' -l ');
	_Command := CONCAT(_Command, REAL_TO_STRING(dToleranceAngle));
	_Command := CONCAT(_Command, ' -w ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iImageWidth));
	_Command := CONCAT(_Command, ' -h ');
	_Command := CONCAT(_Command, UINT_TO_STRING(iImageHeight));
	_Command := CONCAT(_Command, ' 2&gt; ./vision_log.txt ');
	_Execute := TRUE;
	
ELSE
	M_LocatePart := FALSE;
	//_Error := TRUE;
	//_ErrorDescription := 'function busy.';
	
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_LocatePart : BOOL
VAR_INPUT
	iImageWidth: UINT:=2016;
	iImageHeight: UINT:=2000;
	uTimeout: UDINT:=60; //sec
	iMaxPos: UINT:=10; // i
	dMaxOverlap: REAL:=0.0; // j
	dScore: REAL:=0.8; // k
	dToleranceAngle: REAL:=90.0; // l
	sTemplateName: STRING:='template.jpg';
	sScriptFilename: STRING:='FastTemplateMatching.py';
END_VAR
VAR CONSTANT
	//_SCRIPT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/FastTemplateMatching.py';
	_SCRIPT_DIR_PATH: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/';
	_RESULT_FILE_NAME: STRING:='/var/opt/codesys/PlcLogic/visu/outputimage.jpg';
	_TEMPLATE_DIR_PATH: STRING:='/var/opt/codesys/PlcLogic/Application/Vision/Templates/';
END_VAR

</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="P_Busy" ObjectId="9714eca2-29cc-4e5c-a0ad-c3d6c17c60c3">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">P_Busy := _Busy;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring':='variable'}
PROPERTY PUBLIC P_Busy : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="P_Done" ObjectId="7147058c-4dce-465e-99b2-b928801c26b7">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">P_Done := _Done;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring':='variable'}
PROPERTY PUBLIC P_Done : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="P_Result" ObjectId="4c0b022a-d95b-4ed0-b45b-2c560ef1c3ce">
                      <interface>
                        <returnType>
                          <string length="255" />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">P_Result := _Response;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring':='variable'}
PROPERTY PUBLIC P_Result : STRING(255)</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="P_Error" ObjectId="98fd3266-9ecd-45d2-b989-983ea8e40416">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                      </interface>
                      <GetAccessor>
                        <interface />
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">P_Error := _Error;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">PROPERTY PUBLIC P_Error : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="P_ErrorDescription" ObjectId="60a45e84-da96-463e-9afa-d3ed0a2f56ac">
                      <interface>
                        <returnType>
                          <string />
                        </returnType>
                      </interface>
                      <GetAccessor>
                        <interface />
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">P_ErrorDescription := _ErrorDescription;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">PROPERTY PUBLIC P_ErrorDescription : STRING</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OpenCV
VAR_INPUT
	sIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_Done: BOOL;
	_Busy: BOOL;
	_Error: BOOL;
	_ErrorDescription: STRING;
	_Response: STRING(255);
	_WorkerUid: STRING;
	_Execute: BOOL;
	_Reset: BOOL:=FALSE;
	_ResetRtrig: R_TRIG;
	_Step: INT;
	_Command: STRING(255);
	_ReadRecordLast: DINT;
	_PythonTcpClient: PythonTcpClient;
	_TimeoutTimer: TON:=(PT:=T#120S);
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>6d87a4c9-9357-4e03-b1a0-c731940d5946</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="PythonTcpClient" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="bEnable">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="strIpAddress">
                      <type>
                        <string length="19" />
                      </type>
                      <initialValue>
                        <simpleValue value="'127.0.0.1'" />
                      </initialValue>
                    </variable>
                    <variable name="uPort">
                      <type>
                        <UINT />
                      </type>
                      <initialValue>
                        <simpleValue value="50011" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PythonTcpClient
VAR_INPUT
	bEnable: BOOL;
	strIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR
	_Write: BOOL:=FALSE;
	_DataToWrite: STRING(255):='';
END_VAR
VAR_OUTPUT
	bBusyWrite: BOOL;
	bDoneWrite: BOOL;
	bBusyRead: BOOL;
	bRecordRead: DINT;
	strRead: STRING(255);
	bConnected: BOOL;
END_VAR

VAR
    _ipAddress       : NBS.IPv4Address;
    _fbTcpClient     : NBS.TCP_Client;
    _fbTcpRead       : NBS.TCP_Read;
    _fbTcpWrite      : NBS.TCP_Write;	
	
	_ConnectDelayTimer: TON;
	_WriteRetriesMax: INT:=3;
	_WriteRetriesCount: INT;
	_WriteRetry: BOOL;
	
	_WriteData: StringByteArray;
	_ReadData: StringByteArray;
	//_TxString: STRING(255);
	//_RxString: STRING(255);
	
	_WriteRTRIG: R_TRIG;
	_ConnectStep, _WriteStep, _ReadStep: INT;
	_Read: BOOL;
END_VAR

VAR CONSTANT
	ConnectStep_IDLE: 	INT:=00;
	ConnectStep_DELAY: 	INT:=10;
	ConnectStep_SETUP: 	INT:=20;
	ConnectStep_ENABLE: INT:=30;
	ConnectStep_WAIT: 	INT:=40;
	ConnectStep_CONN: 	INT:=50;
END_VAR

VAR CONSTANT
	WriteStep_IDLE: 	INT:=00;
	WriteStep_DATA: 	INT:=10;
	WriteStep_WRITE: 	INT:=20;
	WriteStep_WAIT: 	INT:=30;
END_VAR

VAR CONSTANT
	ReadStep_RESET: 	INT:=00;
	ReadStep_IDLE: 		INT:=10;
	ReadStep_ENABLE: 	INT:=20;
	ReadStep_MONITOR: 	INT:=30;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Write">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                    <variable name="_DataToWrite">
                      <type>
                        <string length="255" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PythonTcpClient
VAR_INPUT
	bEnable: BOOL;
	strIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR
	_Write: BOOL:=FALSE;
	_DataToWrite: STRING(255):='';
END_VAR
VAR_OUTPUT
	bBusyWrite: BOOL;
	bDoneWrite: BOOL;
	bBusyRead: BOOL;
	bRecordRead: DINT;
	strRead: STRING(255);
	bConnected: BOOL;
END_VAR

VAR
    _ipAddress       : NBS.IPv4Address;
    _fbTcpClient     : NBS.TCP_Client;
    _fbTcpRead       : NBS.TCP_Read;
    _fbTcpWrite      : NBS.TCP_Write;	
	
	_ConnectDelayTimer: TON;
	_WriteRetriesMax: INT:=3;
	_WriteRetriesCount: INT;
	_WriteRetry: BOOL;
	
	_WriteData: StringByteArray;
	_ReadData: StringByteArray;
	//_TxString: STRING(255);
	//_RxString: STRING(255);
	
	_WriteRTRIG: R_TRIG;
	_ConnectStep, _WriteStep, _ReadStep: INT;
	_Read: BOOL;
END_VAR

VAR CONSTANT
	ConnectStep_IDLE: 	INT:=00;
	ConnectStep_DELAY: 	INT:=10;
	ConnectStep_SETUP: 	INT:=20;
	ConnectStep_ENABLE: INT:=30;
	ConnectStep_WAIT: 	INT:=40;
	ConnectStep_CONN: 	INT:=50;
END_VAR

VAR CONSTANT
	WriteStep_IDLE: 	INT:=00;
	WriteStep_DATA: 	INT:=10;
	WriteStep_WRITE: 	INT:=20;
	WriteStep_WAIT: 	INT:=30;
END_VAR

VAR CONSTANT
	ReadStep_RESET: 	INT:=00;
	ReadStep_IDLE: 		INT:=10;
	ReadStep_ENABLE: 	INT:=20;
	ReadStep_MONITOR: 	INT:=30;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <outputVars>
                    <variable name="bBusyWrite">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="bDoneWrite">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="bBusyRead">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="bRecordRead">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="strRead">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="bConnected">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PythonTcpClient
VAR_INPUT
	bEnable: BOOL;
	strIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR
	_Write: BOOL:=FALSE;
	_DataToWrite: STRING(255):='';
END_VAR
VAR_OUTPUT
	bBusyWrite: BOOL;
	bDoneWrite: BOOL;
	bBusyRead: BOOL;
	bRecordRead: DINT;
	strRead: STRING(255);
	bConnected: BOOL;
END_VAR

VAR
    _ipAddress       : NBS.IPv4Address;
    _fbTcpClient     : NBS.TCP_Client;
    _fbTcpRead       : NBS.TCP_Read;
    _fbTcpWrite      : NBS.TCP_Write;	
	
	_ConnectDelayTimer: TON;
	_WriteRetriesMax: INT:=3;
	_WriteRetriesCount: INT;
	_WriteRetry: BOOL;
	
	_WriteData: StringByteArray;
	_ReadData: StringByteArray;
	//_TxString: STRING(255);
	//_RxString: STRING(255);
	
	_WriteRTRIG: R_TRIG;
	_ConnectStep, _WriteStep, _ReadStep: INT;
	_Read: BOOL;
END_VAR

VAR CONSTANT
	ConnectStep_IDLE: 	INT:=00;
	ConnectStep_DELAY: 	INT:=10;
	ConnectStep_SETUP: 	INT:=20;
	ConnectStep_ENABLE: INT:=30;
	ConnectStep_WAIT: 	INT:=40;
	ConnectStep_CONN: 	INT:=50;
END_VAR

VAR CONSTANT
	WriteStep_IDLE: 	INT:=00;
	WriteStep_DATA: 	INT:=10;
	WriteStep_WRITE: 	INT:=20;
	WriteStep_WAIT: 	INT:=30;
END_VAR

VAR CONSTANT
	ReadStep_RESET: 	INT:=00;
	ReadStep_IDLE: 		INT:=10;
	ReadStep_ENABLE: 	INT:=20;
	ReadStep_MONITOR: 	INT:=30;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_ipAddress">
                      <type>
                        <derived name="NBS.IPv4Address" />
                      </type>
                    </variable>
                    <variable name="_fbTcpClient">
                      <type>
                        <derived name="NBS.TCP_Client" />
                      </type>
                    </variable>
                    <variable name="_fbTcpRead">
                      <type>
                        <derived name="NBS.TCP_Read" />
                      </type>
                    </variable>
                    <variable name="_fbTcpWrite">
                      <type>
                        <derived name="NBS.TCP_Write" />
                      </type>
                    </variable>
                    <variable name="_ConnectDelayTimer">
                      <type>
                        <derived name="TON" />
                      </type>
                    </variable>
                    <variable name="_WriteRetriesMax">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="3" />
                      </initialValue>
                    </variable>
                    <variable name="_WriteRetriesCount">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_WriteRetry">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_WriteData">
                      <type>
                        <derived name="StringByteArray" />
                      </type>
                    </variable>
                    <variable name="_ReadData">
                      <type>
                        <derived name="StringByteArray" />
                      </type>
                    </variable>
                    <variable name="_WriteRTRIG">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">_TxString: STRING(255);
_RxString: STRING(255);</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_ConnectStep">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_WriteStep">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_ReadStep">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_Read">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PythonTcpClient
VAR_INPUT
	bEnable: BOOL;
	strIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR
	_Write: BOOL:=FALSE;
	_DataToWrite: STRING(255):='';
END_VAR
VAR_OUTPUT
	bBusyWrite: BOOL;
	bDoneWrite: BOOL;
	bBusyRead: BOOL;
	bRecordRead: DINT;
	strRead: STRING(255);
	bConnected: BOOL;
END_VAR

VAR
    _ipAddress       : NBS.IPv4Address;
    _fbTcpClient     : NBS.TCP_Client;
    _fbTcpRead       : NBS.TCP_Read;
    _fbTcpWrite      : NBS.TCP_Write;	
	
	_ConnectDelayTimer: TON;
	_WriteRetriesMax: INT:=3;
	_WriteRetriesCount: INT;
	_WriteRetry: BOOL;
	
	_WriteData: StringByteArray;
	_ReadData: StringByteArray;
	//_TxString: STRING(255);
	//_RxString: STRING(255);
	
	_WriteRTRIG: R_TRIG;
	_ConnectStep, _WriteStep, _ReadStep: INT;
	_Read: BOOL;
END_VAR

VAR CONSTANT
	ConnectStep_IDLE: 	INT:=00;
	ConnectStep_DELAY: 	INT:=10;
	ConnectStep_SETUP: 	INT:=20;
	ConnectStep_ENABLE: INT:=30;
	ConnectStep_WAIT: 	INT:=40;
	ConnectStep_CONN: 	INT:=50;
END_VAR

VAR CONSTANT
	WriteStep_IDLE: 	INT:=00;
	WriteStep_DATA: 	INT:=10;
	WriteStep_WRITE: 	INT:=20;
	WriteStep_WAIT: 	INT:=30;
END_VAR

VAR CONSTANT
	ReadStep_RESET: 	INT:=00;
	ReadStep_IDLE: 		INT:=10;
	ReadStep_ENABLE: 	INT:=20;
	ReadStep_MONITOR: 	INT:=30;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="ConnectStep_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="ConnectStep_DELAY">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="ConnectStep_SETUP">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="ConnectStep_ENABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <variable name="ConnectStep_WAIT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="40" />
                      </initialValue>
                    </variable>
                    <variable name="ConnectStep_CONN">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                    </variable>
                    <variable name="WriteStep_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="WriteStep_DATA">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="WriteStep_WRITE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="WriteStep_WAIT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <variable name="ReadStep_RESET">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="ReadStep_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="ReadStep_ENABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="ReadStep_MONITOR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PythonTcpClient
VAR_INPUT
	bEnable: BOOL;
	strIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR
	_Write: BOOL:=FALSE;
	_DataToWrite: STRING(255):='';
END_VAR
VAR_OUTPUT
	bBusyWrite: BOOL;
	bDoneWrite: BOOL;
	bBusyRead: BOOL;
	bRecordRead: DINT;
	strRead: STRING(255);
	bConnected: BOOL;
END_VAR

VAR
    _ipAddress       : NBS.IPv4Address;
    _fbTcpClient     : NBS.TCP_Client;
    _fbTcpRead       : NBS.TCP_Read;
    _fbTcpWrite      : NBS.TCP_Write;	
	
	_ConnectDelayTimer: TON;
	_WriteRetriesMax: INT:=3;
	_WriteRetriesCount: INT;
	_WriteRetry: BOOL;
	
	_WriteData: StringByteArray;
	_ReadData: StringByteArray;
	//_TxString: STRING(255);
	//_RxString: STRING(255);
	
	_WriteRTRIG: R_TRIG;
	_ConnectStep, _WriteStep, _ReadStep: INT;
	_Read: BOOL;
END_VAR

VAR CONSTANT
	ConnectStep_IDLE: 	INT:=00;
	ConnectStep_DELAY: 	INT:=10;
	ConnectStep_SETUP: 	INT:=20;
	ConnectStep_ENABLE: INT:=30;
	ConnectStep_WAIT: 	INT:=40;
	ConnectStep_CONN: 	INT:=50;
END_VAR

VAR CONSTANT
	WriteStep_IDLE: 	INT:=00;
	WriteStep_DATA: 	INT:=10;
	WriteStep_WRITE: 	INT:=20;
	WriteStep_WAIT: 	INT:=30;
END_VAR

VAR CONSTANT
	ReadStep_RESET: 	INT:=00;
	ReadStep_IDLE: 		INT:=10;
	ReadStep_ENABLE: 	INT:=20;
	ReadStep_MONITOR: 	INT:=30;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">{region "connect"}
	
	bConnected := (_ConnectStep = ConnectStep_CONN);
	_ConnectDelayTimer(IN:=_ConnectStep = ConnectStep_DELAY, PT:=T#1S);
	CASE _ConnectStep OF
		
		ConnectStep_IDLE: // IDLE
			IF bEnable THEN
				_fbTcpClient.xEnable := FALSE;
				_ConnectStep := ConnectStep_DELAY;
			END_IF
			
		ConnectStep_DELAY: // DELAY
			IF _ConnectDelayTimer.Q THEN
				_ConnectStep := ConnectStep_SETUP;
			END_IF
			
		ConnectStep_SETUP: // SETUP
			_ipAddress.SetInitialValue(ipAddress := strIpAddress);
			_ConnectStep := ConnectStep_ENABLE;
			
		ConnectStep_ENABLE: // ENABLE
			_fbTcpClient.xEnable := TRUE;
			_ConnectStep := ConnectStep_WAIT;
			
		ConnectStep_WAIT: // WAIT
			IF _fbTcpClient.xActive THEN
				_ConnectStep := ConnectStep_CONN;
			ELSIF _fbTcpClient.xError THEN
				_ConnectStep := ConnectStep_IDLE;
			END_IF
		
		ConnectStep_CONN: // CONNECTED
			IF _fbTcpClient.xError OR NOT _fbTcpClient.xActive OR NOT bEnable THEN
				_ConnectStep := ConnectStep_IDLE;
			END_IF
			
	END_CASE
	
	_fbTcpClient(
		xEnable := , 
		itfIPAddress := _ipAddress, 
		uiPort := uPort, 
		udiTimeOut := 1000000); // us
			 
{endregion}


{region "write"}
	_WriteRTRIG(CLK:=_Write);
	CASE _WriteStep OF
			
		WriteStep_IDLE: // IDLE
			IF (_WriteRTRIG.Q OR _WriteRetry) AND bConnected THEN
				_Write := FALSE;
				_WriteRetry := FALSE;
				_fbTcpWrite.xExecute := FALSE;
				_WriteStep := WriteStep_DATA;
			END_IF
			
		WriteStep_DATA: // DATA
			IF _DataToWrite &lt;&gt; '' THEN
				MemUtils.MemSet(
					pbyBuffer:=ADR(_WriteData.bArray),
					byValue:=0,
					dwSize:=SIZEOF(_WriteData.bArray));
				MemUtils.MemCpy(
					pbyDest:=ADR(_WriteData.sString),
					pbySrc:=ADR(_DataToWrite),
					dwSize:=INT_TO_DWORD(LEN(_DataToWrite)));
				_WriteStep := WriteStep_WRITE;
			ELSE
				_WriteStep := WriteStep_IDLE;
			END_IF
			
		WriteStep_WRITE: // WRITE
			_fbTcpWrite.xExecute := TRUE;
			_WriteStep := WriteStep_WAIT;
		
		WriteStep_WAIT: // WAIT
			IF _fbTcpWrite.xDone THEN
				_fbTcpWrite.xExecute := FALSE;
				_WriteRetriesCount := 0;
				_WriteStep := WriteStep_IDLE;
				
			ELSIF _fbTcpWrite.xError THEN
				IF _WriteRetriesCount &lt;= _WriteRetriesMax THEN
					_WriteRetriesCount := _WriteRetriesCount + 1;
					_WriteRetry := TRUE;
					_WriteStep := WriteStep_IDLE;
					
				ELSIF _WriteRetriesCount &gt; _WriteRetriesMax THEN
					_WriteRetriesCount := 0;
					_WriteStep := WriteStep_IDLE;
					
				END_IF
			END_IF
	END_CASE
	
	bBusyWrite := ((_WriteStep &lt;&gt; WriteStep_IDLE) OR _WriteRetry) AND _fbTcpWrite.xBusy;
	bDoneWrite := (_WriteStep = WriteStep_IDLE) AND _fbTcpWrite.xDone;
	_fbTcpWrite(xExecute := ,
				itfConnection := _fbTcpClient.itfConnection, 
				udiTimeOut := 1000000, // us 
				udiSize := INT_TO_UDINT(LEN(_WriteData.sString)), 
				pData := ADR(_WriteData.bArray));

{endregion}


{region "read"}

	_Read := (_ConnectStep = ConnectStep_CONN);
	CASE _ReadStep OF
			 
		ReadStep_RESET: // RESET
			_fbTcpRead.xEnable := FALSE;
			_ReadStep := ReadStep_IDLE;

		ReadStep_IDLE: // IDLE
			IF _Read THEN
				_ReadStep := ReadStep_ENABLE;
			END_IF

		ReadStep_ENABLE: // ENABLE
			_fbTcpRead.xEnable := TRUE;
			_ReadStep := ReadStep_MONITOR;

		ReadStep_MONITOR: // MONITOR
			IF _fbTcpRead.xReady THEN
				IF (_fbTcpRead.udiCount &gt; 0) THEN
					//
					MemUtils.MemSet(
						pbyBuffer:=ADR(strRead),
						byValue:=0,
						dwSize:=SIZEOF(strRead)); 
					MemUtils.MemCpy(
						pbyDest:=ADR(strRead),
						pbySrc:=ADR(_ReadData.sString),
						dwSize:=SEL(_fbTcpRead.udiCount &gt; 255, _fbTcpRead.udiCount, 255));
					MemUtils.MemSet(
						pbyBuffer:=ADR(_ReadData.sString),
						byValue:=0,
						dwSize:=SIZEOF(_ReadData.sString)); 
					//
					bRecordRead := bRecordRead + 1;
				END_IF
				
			ELSIF _fbTcpRead.xError OR NOT _Read THEN
				_ReadStep := ReadStep_RESET;
				
			END_IF
			 
	END_CASE
	
	bBusyRead := (_ReadStep &lt;&gt; ReadStep_IDLE) AND _fbTcpRead.xBusy;
	_fbTcpRead(xEnable := , 
				itfConnection := _fbTcpClient.itfConnection, 
				udiSize := SIZEOF(_ReadData.bArray), 
				pData := ADR(_ReadData.bArray), 
				udiCount =&gt; );

{endregion}</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Write" ObjectId="5821b17b-b657-4412-802a-8f52a5970847">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="Data">
                            <type>
                              <string length="255" />
                            </type>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Write : BOOL
VAR_INPUT
	Data: STRING(255);
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IF bConnected AND NOT bBusyWrite THEN
	_Write:=TRUE;
	_DataToWrite:=Data;
	M_Write := TRUE;
	
ELSE
	M_Write := FALSE;
	
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Write : BOOL
VAR_INPUT
	Data: STRING(255);
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PythonTcpClient
VAR_INPUT
	bEnable: BOOL;
	strIpAddress: STRING(19):='127.0.0.1';
	uPort: UINT:=50011;
END_VAR
VAR
	_Write: BOOL:=FALSE;
	_DataToWrite: STRING(255):='';
END_VAR
VAR_OUTPUT
	bBusyWrite: BOOL;
	bDoneWrite: BOOL;
	bBusyRead: BOOL;
	bRecordRead: DINT;
	strRead: STRING(255);
	bConnected: BOOL;
END_VAR

VAR
    _ipAddress       : NBS.IPv4Address;
    _fbTcpClient     : NBS.TCP_Client;
    _fbTcpRead       : NBS.TCP_Read;
    _fbTcpWrite      : NBS.TCP_Write;	
	
	_ConnectDelayTimer: TON;
	_WriteRetriesMax: INT:=3;
	_WriteRetriesCount: INT;
	_WriteRetry: BOOL;
	
	_WriteData: StringByteArray;
	_ReadData: StringByteArray;
	//_TxString: STRING(255);
	//_RxString: STRING(255);
	
	_WriteRTRIG: R_TRIG;
	_ConnectStep, _WriteStep, _ReadStep: INT;
	_Read: BOOL;
END_VAR

VAR CONSTANT
	ConnectStep_IDLE: 	INT:=00;
	ConnectStep_DELAY: 	INT:=10;
	ConnectStep_SETUP: 	INT:=20;
	ConnectStep_ENABLE: INT:=30;
	ConnectStep_WAIT: 	INT:=40;
	ConnectStep_CONN: 	INT:=50;
END_VAR

VAR CONSTANT
	WriteStep_IDLE: 	INT:=00;
	WriteStep_DATA: 	INT:=10;
	WriteStep_WRITE: 	INT:=20;
	WriteStep_WAIT: 	INT:=30;
END_VAR

VAR CONSTANT
	ReadStep_RESET: 	INT:=00;
	ReadStep_IDLE: 		INT:=10;
	ReadStep_ENABLE: 	INT:=20;
	ReadStep_MONITOR: 	INT:=30;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>0c178c71-0d25-4361-b16e-e3833e33b5d0</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParseVisionCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVisionCmd
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
    stCommand: ST_VisionCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
    _CommandType: STRING;
	_StrPosition: INT;
END_VAR
VAR CONSTANT
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_VisionCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVisionCmd
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
    stCommand: ST_VisionCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
    _CommandType: STRING;
	_StrPosition: INT;
END_VAR
VAR CONSTANT
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="_CommandType">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="_StrPosition">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVisionCmd
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
    stCommand: ST_VisionCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
    _CommandType: STRING;
	_StrPosition: INT;
END_VAR
VAR CONSTANT
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_CommandTypeCal">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CAL'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> calibrate vision</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_CommandTypeAcq">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ACQ'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> acquire (capture) image</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_CommandTypeLoc">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LOC'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> locate part</xhtml>
                      </documentation>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVisionCmd
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
    stCommand: ST_VisionCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
    _CommandType: STRING;
	_StrPosition: INT;
END_VAR
VAR CONSTANT
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// C|A|L ImageWidth ImageHeight Timeout

// C Calibrate vision system
    // CheckerSize (user units) XCount YCount 
    // C 2016 2000 60 25.0 6 9
    
// A Aquire image
    // A 2016 2000 60
    
// L Locate part 
    // MaxParts MaxOverlap Score ToleranceAngle ResultPostion TemplateName ScriptName
    // L 2016 2000 60 10 0.0 0.8 90.0 1 template.jpg FastTemplateMatching.py
	// MaxParts - max number of parts to find in image
	// MaxOverlap - max overlap of parts in image
	// Score - min required score for parts
	// ToleranceAngle - +/- search angle (the larger the number, the longer the search)
	// ResultPostion - index of vision register to store result
	// TemplateName - name of the template to search for
	// ScriptName - name of the template to search for

Error:=FALSE;
ErrorDescription:='';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

_CommandType:= _CmdParams[0];
IF _CommandType = _CommandTypeCal THEN
    // C 2016 2000 0060 025.0 0006 0009
	stCommand.CommandType:=DUT_Command_VisionType.Calibrate;
    stCommand.Calibrate.CheckerSize:=STRING_TO_REAL(_CmdParams[4]);
    stCommand.Calibrate.CheckerXCount:=STRING_TO_UINT(_CmdParams[5]);
    stCommand.Calibrate.CheckerYCount:=STRING_TO_UINT(_CmdParams[6]);
	
	IF stCommand.Calibrate.CheckerSize &lt;= 0
		OR stCommand.Calibrate.CheckerXCount &lt;= 0
		OR stCommand.Calibrate.CheckerYCount &lt;= 0 THEN
			Error:=TRUE;
			ErrorDescription:='Checkerboard configuration incorrect';
			RETURN;
	END_IF
    
ELSIF _CommandType = _CommandTypeAcq THEN
    // A 2016 2000 0060
	stCommand.CommandType:=DUT_Command_VisionType.Acquire;
    
ELSIF _CommandType = _CommandTypeLoc THEN
    // L 2016 2000 0060 0010 000.0 0.8 090.0 001 template.jpg FastTemplatMatching.py
	stCommand.CommandType:=DUT_Command_VisionType.LocatePart;
    stCommand.Locate.MaxParts:=STRING_TO_UINT(_CmdParams[4]);
    stCommand.Locate.MaxOverlap:=STRING_TO_REAL(_CmdParams[5]);
    stCommand.Locate.Score:=STRING_TO_REAL(_CmdParams[6]);
    stCommand.Locate.ToleranceAngle:=STRING_TO_REAL(_CmdParams[7]);
    stCommand.Locate.ResultPosition:=STRING_TO_UINT(_CmdParams[8]);
    stCommand.Locate.TemplateName:=_CmdParams[9];
    stCommand.Locate.ScriptFilename:=_CmdParams[10];
	
	IF stCommand.Locate.MaxParts &lt;= 0
		OR stCommand.Locate.ResultPosition &lt; GVL.VIS_ARR_BEG
		OR stCommand.Locate.ResultPosition &gt; GVL.VIS_ARR_END
		OR stCommand.Locate.TemplateName = '' THEN
			Error:=TRUE;
			ErrorDescription:='Locate part configuration incorrect';
			RETURN;
	END_IF
	
ELSE
	Error:=TRUE;
	ErrorDescription:='Unknown command type for vision';
	RETURN;
    
END_IF

// common
stCommand.ImageWidth:=STRING_TO_UINT(_CmdParams[1]);
stCommand.ImageHeight:=STRING_TO_UINT(_CmdParams[2]);
stCommand.Timeout:=STRING_TO_UDINT(_CmdParams[3]);

IF stCommand.ImageWidth &lt;= 0
	OR stCommand.ImageHeight &lt;= 0 THEN
		Error:=TRUE;
		ErrorDescription:='Image size settings incorrect';
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVisionCmd
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
    stCommand: ST_VisionCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
    _CommandType: STRING;
	_StrPosition: INT;
END_VAR
VAR CONSTANT
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>c1f3fe10-7066-4e4d-ae1a-05a0a2c8898a</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildVisionCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_VisionCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVisionCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
    stCommand: ST_VisionCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVisionCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
    stCommand: ST_VisionCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <variable name="_CommandTypeCal">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CAL'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> calibrate vision</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_CommandTypeAcq">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ACQ'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> acquire (capture) image</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_CommandTypeLoc">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LOC'" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> locate part</xhtml>
                      </documentation>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVisionCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
    stCommand: ST_VisionCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// C|A|L ImageWidth ImageHeight Timeout

// C Calibrate vision system
    // CheckerSize (user units) XCount YCount 
    // C 2016 2000 60 25.0 6 9
    
// A Aquire image
    // A 2016 2000 60
    
// L Locate part 
    // MaxParts MaxOverlap Score ToleranceAngle ResultPostion TemplateName ScriptName
    // L 2016 2000 60 10 0.0 0.8 90.0 1 template.jpg FastTemplateMatching.py
	// MaxParts - max number of parts to find in image
	// MaxOverlap - max overlap of parts in image
	// Score - min required score for parts
	// ToleranceAngle - +/- search angle (the larger the number, the longer the search)
	// ResultPostion - index of vision register to store result
	// TemplateName - name of the template to search for
	// ScriptName - name of the template to search for

// clear the command
_Command:='';

// build the command
CASE stCommand.CommandType OF
	DUT_Command_VisionType.Calibrate:
		F_AddElement(_Command, _Delimiter, _CommandTypeCal);
	DUT_Command_VisionType.Acquire:
		F_AddElement(_Command, _Delimiter, _CommandTypeAcq);
	DUT_Command_VisionType.LocatePart:
		F_AddElement(_Command, _Delimiter, _CommandTypeLoc);
END_CASE

// add the common items width, height, timeout
F_AddElement(_Command, _Delimiter, UINT_TO_STRING(stCommand.ImageWidth));
F_AddElement(_Command, _Delimiter, UINT_TO_STRING(stCommand.ImageHeight));
F_AddElement(_Command, _Delimiter, UDINT_TO_STRING(stCommand.Timeout));

//
CASE stCommand.CommandType OF
	DUT_Command_VisionType.Calibrate:
		// C 2016 2000 60 25.0 6 9
		F_AddElement(_Command, _Delimiter, REAL_TO_STRING(stCommand.Calibrate.CheckerSize));
		F_AddElement(_Command, _Delimiter, UINT_TO_STRING(stCommand.Calibrate.CheckerXCount));
		F_AddElement(_Command, _Delimiter, UINT_TO_STRING(stCommand.Calibrate.CheckerYCount));
		
	DUT_Command_VisionType.Acquire:
		// A 2016 2000 60
		// we are done
		
	DUT_Command_VisionType.LocatePart:
		// L 2016 2000 60 10 0.0 0.8 90.0 1 template.jpg FastTemplateMatching.py
		F_AddElement(_Command, _Delimiter, UINT_TO_STRING(stCommand.Locate.MaxParts));
		F_AddElement(_Command, _Delimiter, REAL_TO_STRING(stCommand.Locate.MaxOverlap));
		F_AddElement(_Command, _Delimiter, REAL_TO_STRING(stCommand.Locate.Score));
		F_AddElement(_Command, _Delimiter, REAL_TO_STRING(stCommand.Locate.ToleranceAngle));
		F_AddElement(_Command, _Delimiter, UINT_TO_STRING(stCommand.Locate.ResultPosition));
		F_AddElement(_Command, _Delimiter, stCommand.Locate.TemplateName);
		F_AddElement(_Command, _Delimiter, stCommand.Locate.ScriptFilename);
		
END_CASE

// set function equal to command
BuildVisionCmd := _Command;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVisionCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
    stCommand: ST_VisionCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_CommandTypeCal: STRING(3):='CAL'; // calibrate vision
	_CommandTypeAcq: STRING(3):='ACQ'; // acquire (capture) image
	_CommandTypeLoc: STRING(3):='LOC'; // locate part
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>580bcf70-fae5-407f-8446-aaa0a1365ba4</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="Module" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="StoredPositions">
                      <type>
                        <derived name="REFERENCE TO ARRAY [GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> input vars</xhtml>
                      </documentation>
                    </variable>
                    <variable name="VisionRegisters">
                      <type>
                        <derived name="REFERENCE TO ARRAY [GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister" />
                      </type>
                    </variable>
                    <variable name="Flags">
                      <type>
                        <derived name="REFERENCE TO ARRAY [GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK Module EXTENDS PackML IMPLEMENTS ItfModule

VAR_INPUT // input vars
	StoredPositions: REFERENCE TO ARRAY[GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
	VisionRegisters: REFERENCE TO ARRAY[GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister;
	Flags: REFERENCE TO ARRAY[GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags;
END_VAR

VAR_OUTPUT // output vars
	ItfUnitMode: PACK_ML.IUnitMode;
	Busy: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR

VAR // standard local vars
	_TimeoutTimer: TON:=(PT:=T#120S);
	_Home, _Start: BOOL;
	_ModuleFirstScan: BOOL:=TRUE;
	_SeqStart, _SeqHome: INT;
	_AbortedRtrig: R_Trig;
END_VAR

VAR CONSTANT //
	STEP_IDLE: INT := 0000;
	STEP_DONE: INT := 0020;
	STEP_RUN:  INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="ItfUnitMode">
                      <type>
                        <derived name="PACK_ML.IUnitMode" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> output vars</xhtml>
                      </documentation>
                    </variable>
                    <variable name="Busy">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK Module EXTENDS PackML IMPLEMENTS ItfModule

VAR_INPUT // input vars
	StoredPositions: REFERENCE TO ARRAY[GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
	VisionRegisters: REFERENCE TO ARRAY[GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister;
	Flags: REFERENCE TO ARRAY[GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags;
END_VAR

VAR_OUTPUT // output vars
	ItfUnitMode: PACK_ML.IUnitMode;
	Busy: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR

VAR // standard local vars
	_TimeoutTimer: TON:=(PT:=T#120S);
	_Home, _Start: BOOL;
	_ModuleFirstScan: BOOL:=TRUE;
	_SeqStart, _SeqHome: INT;
	_AbortedRtrig: R_Trig;
END_VAR

VAR CONSTANT //
	STEP_IDLE: INT := 0000;
	STEP_DONE: INT := 0020;
	STEP_RUN:  INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_TimeoutTimer">
                      <type>
                        <derived name="TON" />
                      </type>
                      <initialValue>
                        <structValue>
                          <value member="PT">
                            <simpleValue value="TIME#2m0s0ms" />
                          </value>
                        </structValue>
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> standard local vars</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_Home">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Start">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_ModuleFirstScan">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="TRUE" />
                      </initialValue>
                    </variable>
                    <variable name="_SeqStart">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqHome">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_AbortedRtrig">
                      <type>
                        <derived name="R_Trig" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK Module EXTENDS PackML IMPLEMENTS ItfModule

VAR_INPUT // input vars
	StoredPositions: REFERENCE TO ARRAY[GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
	VisionRegisters: REFERENCE TO ARRAY[GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister;
	Flags: REFERENCE TO ARRAY[GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags;
END_VAR

VAR_OUTPUT // output vars
	ItfUnitMode: PACK_ML.IUnitMode;
	Busy: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR

VAR // standard local vars
	_TimeoutTimer: TON:=(PT:=T#120S);
	_Home, _Start: BOOL;
	_ModuleFirstScan: BOOL:=TRUE;
	_SeqStart, _SeqHome: INT;
	_AbortedRtrig: R_Trig;
END_VAR

VAR CONSTANT //
	STEP_IDLE: INT := 0000;
	STEP_DONE: INT := 0020;
	STEP_RUN:  INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="STEP_RUN">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK Module EXTENDS PackML IMPLEMENTS ItfModule

VAR_INPUT // input vars
	StoredPositions: REFERENCE TO ARRAY[GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
	VisionRegisters: REFERENCE TO ARRAY[GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister;
	Flags: REFERENCE TO ARRAY[GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags;
END_VAR

VAR_OUTPUT // output vars
	ItfUnitMode: PACK_ML.IUnitMode;
	Busy: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR

VAR // standard local vars
	_TimeoutTimer: TON:=(PT:=T#120S);
	_Home, _Start: BOOL;
	_ModuleFirstScan: BOOL:=TRUE;
	_SeqStart, _SeqHome: INT;
	_AbortedRtrig: R_Trig;
END_VAR

VAR CONSTANT //
	STEP_IDLE: INT := 0000;
	STEP_DONE: INT := 0020;
	STEP_RUN:  INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>PackML</Extends>
                        <Implements>ItfModule</Implements>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

//
IF _ModuleFirstScan THEN
	ItfUnitMode := SUPER^.IUnitMode;
END_IF;

//
_M_Home();
_M_Start();

//
Busy := _UnitMode.CurrentState &lt;&gt; PACK_ML.State.Idle
		AND _UnitMode.CurrentState &lt;&gt; PACK_ML.State.Aborted
		AND _UnitMode.CurrentState &lt;&gt; PACK_ML.State.Complete
		AND _UnitMode.CurrentState &lt;&gt; PACK_ML.State.Held
		AND _UnitMode.CurrentState &lt;&gt; PACK_ML.State.Stopped
		AND _UnitMode.CurrentState &lt;&gt; PACK_ML.State.Suspended;
		
//
_AbortedRtrig(CLK:=_UnitMode.CurrentState = PACK_ML.State.Aborted);
IF _AbortedRtrig.Q THEN
	//_SeqStart := 0;  _Start:=FALSE;
	//_SeqHome := 0; _Home:=FALSE;
END_IF

//
_TimeoutTimer(IN:= Busy);
IF _TimeoutTimer.Q THEN
	M_Error(Description:= CONCAT('Task timed out after ', TIME_TO_STRING(_TimeoutTimer.ET)));
END_IF

// do not place anything below this
_ModuleFirstScan:=FALSE;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Start" ObjectId="4fffeb3f-a502-448a-801f-62a2012af7b1">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Start := TRUE;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Start
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Home" ObjectId="80e95931-65c8-4c90-ad00-612ca250483e">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Home:=TRUE;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Home
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Error" ObjectId="dbcfca92-733c-4c2e-a049-52c206183687">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <inputVars>
                          <variable name="Description">
                            <type>
                              <string />
                            </type>
                          </variable>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                              <InterfaceAsPlainText>
                                <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Error : BOOL
VAR_INPUT
	Description: STRING;
END_VAR
</xhtml>
                              </InterfaceAsPlainText>
                            </data>
                          </addData>
                        </inputVars>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// suspend state machine
_UnitMode.Suspend();

//
Error := TRUE;

//
IF ErrorDescription = '' THEN
	ErrorDescription := Description;
ELSE // add a space and tack on the additional error description
	ErrorDescription := CONCAT(ErrorDescription, ' ');
	ErrorDescription := CONCAT(ErrorDescription, Description);
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Error : BOOL
VAR_INPUT
	Description: STRING;
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Abort" ObjectId="e5c2715c-41fc-45b3-ba5d-b082d35ede74">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_UnitMode.Abort();
_SeqStart := 0;  _Start:=FALSE;
_SeqHome := 0; _Home:=FALSE;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Abort
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Hold" ObjectId="f895a567-6f19-4aaf-a19a-430ec9375429">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_UnitMode.Hold();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Hold
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Stop" ObjectId="10e51045-5ea3-431f-a77c-f14d9d4a03bb">
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_UnitMode.Stop();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PUBLIC M_Stop
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="_M_Start" ObjectId="f110705f-80e9-4c18-9b3f-432547227ce9">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Private="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqStart OF
	0:
		IF _Start THEN
			_Start := FALSE;
			M_Reset();
			_SeqStart := _SeqStart + 1;
		END_IF
	1:
		CASE _UnitMode.CurrentState OF
			PACK_ML.State.Clearing,
			PACK_ML.State.Resetting,
			PACK_ML.State.UnHolding,
			PACK_ML.State.UnSuspending,
			PACK_ML.State.Starting:
				// be patient
			PACK_ML.State.Aborted:
				_UnitMode.Clear();
			PACK_ML.State.Stopped:
				_UnitMode.Reset();
			PACK_ML.State.Held:
				_UnitMode.UnHold();
			PACK_ML.State.Suspended:
				_UnitMode.UnSuspend();
			PACK_ML.State.Idle:
				_UnitMode.Start();
			PACK_ML.State.Execute:
				_SeqStart := 0;
		ELSE
			_SeqStart := 0;
		END_CASE
		
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PRIVATE _M_Start : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Reset" ObjectId="9e2db144-5b4e-459a-90c5-117bc0e5923a">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Error := FALSE;
ErrorDescription := '';</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Reset : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="_M_Home" ObjectId="b6b75ed6-b5aa-4b31-9a1b-102168846c09">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Private="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqHome OF
	0:
		//
		IF _Home THEN
			_Home := FALSE;
			M_Reset();
			_SeqHome := _SeqHome + 1;
		END_IF
	1:
		//
		CASE _UnitMode.CurrentState OF
			PACK_ML.State.Aborted:
				_UnitMode.Clear();
				
			PACK_ML.State.Stopped,
			PACK_ML.State.Complete:
				_UnitMode.Reset();
				_SeqHome := _SeqHome + 1;
				
			PACK_ML.State.Resetting,
			PACK_ML.State.Clearing,
			PACK_ML.State.Aborting:
				// just wait
		ELSE
			_UnitMode.Abort();
			
		END_CASE
		
	2:
		IF _UnitMode.CurrentState = PACK_ML.State.Idle THEN
			_SeqHome := 0;
		END_IF
		
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PRIVATE _M_Home : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="PropCurrentState" ObjectId="27b1323a-18e8-4d9c-9aef-c0fccf1fee6f">
                      <interface>
                        <returnType>
                          <derived name="PACK_ML.State" />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">PropCurrentState := ItfUnitMode.CurrentState;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropCurrentState : PACK_ML.State
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="PropBusy" ObjectId="df90aa53-7938-4729-8aeb-e73fd9721d5b">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">PropBusy := Busy;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropBusy : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="PropError" ObjectId="3b5ad92c-8b5a-464b-aed7-6f6699ae2429">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">PropError := Error;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropError : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                    <Property name="PropErrDescription" ObjectId="e9dc189d-3561-4f34-8238-07f940859ee8">
                      <interface>
                        <returnType>
                          <string />
                        </returnType>
                        <Attributes>
                          <Attribute Name="monitoring" Value="variable" />
                        </Attributes>
                      </interface>
                      <GetAccessor>
                        <interface>
                          <addData>
                            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                              <Attributes>
                                <Attribute Name="monitoring" Value="variable" />
                              </Attributes>
                            </data>
                          </addData>
                        </interface>
                        <body>
                          <ST>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">PropErrDescription := ErrorDescription;</xhtml>
                          </ST>
                        </body>
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                        <addData />
                      </GetAccessor>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'monitoring' := 'variable'}
PROPERTY PropErrDescription : STRING
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Property>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK Module EXTENDS PackML IMPLEMENTS ItfModule

VAR_INPUT // input vars
	StoredPositions: REFERENCE TO ARRAY[GVL.POS_ARR_BEG..GVL.POS_ARR_END] OF DUT_StoredPosition;
	VisionRegisters: REFERENCE TO ARRAY[GVL.VIS_ARR_BEG..GVL.VIS_ARR_END] OF DUT_VisionRegister;
	Flags: REFERENCE TO ARRAY[GVL.FLG_ARR_BEG..GVL.FLG_ARR_END] OF DUT_Flags;
END_VAR

VAR_OUTPUT // output vars
	ItfUnitMode: PACK_ML.IUnitMode;
	Busy: BOOL;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR

VAR // standard local vars
	_TimeoutTimer: TON:=(PT:=T#120S);
	_Home, _Start: BOOL;
	_ModuleFirstScan: BOOL:=TRUE;
	_SeqStart, _SeqHome: INT;
	_AbortedRtrig: R_Trig;
END_VAR

VAR CONSTANT //
	STEP_IDLE: INT := 0000;
	STEP_DONE: INT := 0020;
	STEP_RUN:  INT := 0030;
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>06152fa3-0ee8-42bb-9309-1b5f17657eed</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="VisionCmdProcessor" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VisionCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	VisionStateText: STRING:='READY';
END_VAR
VAR
	_CaptureImage_Output: STRING(255);
	_CaptureImage_WorkerUid: STRING;
	_LocatePart_Output: STRING(255);
	_LocatePart_WorkerUid: STRING;
	_RunCalibration_Output: STRING(255);
	_RunCalibration_WorkerUid: STRING;
    _Vision: OpenCV;
    _VisionCommandParser: ParseVisionCmd;
    _VisionDoneRtrig: R_TRIG;
	_VisionBusyRtrig: R_TRIG;
	_VisionResult: STRING(255);
	_ResultPosition: INT;
	_ResultPosition_CAL: INT;
	_ResultPosition_LOC: INT;
	_ResultPosition_CAP: INT;
	_SpacePosition: INT;
	_VisionObjectIndex: UINT;
	_VisionRatio: REAL;
	_VisionRotation: REAL;
	_VisionError: REAL;
	_UnitModeCurrentState: PACK_ML.State;
END_VAR

VAR CONSTANT
	_RESPONSE_CAL:          STRING:='res: CAL ';
	_RESPONSE_LOC:          STRING:='res: LOC ';
	_RESPONSE_CAP:          STRING:='res: CAP ';

	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_COMMAND: 			INT := 0020;
	_STEP_TRIGGER: 			INT := 0030;
	_STEP_WAIT: 			INT := 0040;
	_STEP_ERR: 				INT := 0050;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="VisionStateText">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'READY'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VisionCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	VisionStateText: STRING:='READY';
END_VAR
VAR
	_CaptureImage_Output: STRING(255);
	_CaptureImage_WorkerUid: STRING;
	_LocatePart_Output: STRING(255);
	_LocatePart_WorkerUid: STRING;
	_RunCalibration_Output: STRING(255);
	_RunCalibration_WorkerUid: STRING;
    _Vision: OpenCV;
    _VisionCommandParser: ParseVisionCmd;
    _VisionDoneRtrig: R_TRIG;
	_VisionBusyRtrig: R_TRIG;
	_VisionResult: STRING(255);
	_ResultPosition: INT;
	_ResultPosition_CAL: INT;
	_ResultPosition_LOC: INT;
	_ResultPosition_CAP: INT;
	_SpacePosition: INT;
	_VisionObjectIndex: UINT;
	_VisionRatio: REAL;
	_VisionRotation: REAL;
	_VisionError: REAL;
	_UnitModeCurrentState: PACK_ML.State;
END_VAR

VAR CONSTANT
	_RESPONSE_CAL:          STRING:='res: CAL ';
	_RESPONSE_LOC:          STRING:='res: LOC ';
	_RESPONSE_CAP:          STRING:='res: CAP ';

	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_COMMAND: 			INT := 0020;
	_STEP_TRIGGER: 			INT := 0030;
	_STEP_WAIT: 			INT := 0040;
	_STEP_ERR: 				INT := 0050;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CaptureImage_Output">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="_CaptureImage_WorkerUid">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="_LocatePart_Output">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="_LocatePart_WorkerUid">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="_RunCalibration_Output">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="_RunCalibration_WorkerUid">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <variable name="_Vision">
                      <type>
                        <derived name="OpenCV" />
                      </type>
                    </variable>
                    <variable name="_VisionCommandParser">
                      <type>
                        <derived name="ParseVisionCmd" />
                      </type>
                    </variable>
                    <variable name="_VisionDoneRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_VisionBusyRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_VisionResult">
                      <type>
                        <string length="255" />
                      </type>
                    </variable>
                    <variable name="_ResultPosition">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_ResultPosition_CAL">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_ResultPosition_LOC">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_ResultPosition_CAP">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SpacePosition">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_VisionObjectIndex">
                      <type>
                        <UINT />
                      </type>
                    </variable>
                    <variable name="_VisionRatio">
                      <type>
                        <REAL />
                      </type>
                    </variable>
                    <variable name="_VisionRotation">
                      <type>
                        <REAL />
                      </type>
                    </variable>
                    <variable name="_VisionError">
                      <type>
                        <REAL />
                      </type>
                    </variable>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VisionCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	VisionStateText: STRING:='READY';
END_VAR
VAR
	_CaptureImage_Output: STRING(255);
	_CaptureImage_WorkerUid: STRING;
	_LocatePart_Output: STRING(255);
	_LocatePart_WorkerUid: STRING;
	_RunCalibration_Output: STRING(255);
	_RunCalibration_WorkerUid: STRING;
    _Vision: OpenCV;
    _VisionCommandParser: ParseVisionCmd;
    _VisionDoneRtrig: R_TRIG;
	_VisionBusyRtrig: R_TRIG;
	_VisionResult: STRING(255);
	_ResultPosition: INT;
	_ResultPosition_CAL: INT;
	_ResultPosition_LOC: INT;
	_ResultPosition_CAP: INT;
	_SpacePosition: INT;
	_VisionObjectIndex: UINT;
	_VisionRatio: REAL;
	_VisionRotation: REAL;
	_VisionError: REAL;
	_UnitModeCurrentState: PACK_ML.State;
END_VAR

VAR CONSTANT
	_RESPONSE_CAL:          STRING:='res: CAL ';
	_RESPONSE_LOC:          STRING:='res: LOC ';
	_RESPONSE_CAP:          STRING:='res: CAP ';

	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_COMMAND: 			INT := 0020;
	_STEP_TRIGGER: 			INT := 0030;
	_STEP_WAIT: 			INT := 0040;
	_STEP_ERR: 				INT := 0050;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_RESPONSE_CAL">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'res: CAL '" />
                      </initialValue>
                    </variable>
                    <variable name="_RESPONSE_LOC">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'res: LOC '" />
                      </initialValue>
                    </variable>
                    <variable name="_RESPONSE_CAP">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="'res: CAP '" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_TRIGGER">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="40" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VisionCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	VisionStateText: STRING:='READY';
END_VAR
VAR
	_CaptureImage_Output: STRING(255);
	_CaptureImage_WorkerUid: STRING;
	_LocatePart_Output: STRING(255);
	_LocatePart_WorkerUid: STRING;
	_RunCalibration_Output: STRING(255);
	_RunCalibration_WorkerUid: STRING;
    _Vision: OpenCV;
    _VisionCommandParser: ParseVisionCmd;
    _VisionDoneRtrig: R_TRIG;
	_VisionBusyRtrig: R_TRIG;
	_VisionResult: STRING(255);
	_ResultPosition: INT;
	_ResultPosition_CAL: INT;
	_ResultPosition_LOC: INT;
	_ResultPosition_CAP: INT;
	_SpacePosition: INT;
	_VisionObjectIndex: UINT;
	_VisionRatio: REAL;
	_VisionRotation: REAL;
	_VisionError: REAL;
	_UnitModeCurrentState: PACK_ML.State;
END_VAR

VAR CONSTANT
	_RESPONSE_CAL:          STRING:='res: CAL ';
	_RESPONSE_LOC:          STRING:='res: LOC ';
	_RESPONSE_CAP:          STRING:='res: CAP ';

	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_COMMAND: 			INT := 0020;
	_STEP_TRIGGER: 			INT := 0030;
	_STEP_WAIT: 			INT := 0040;
	_STEP_ERR: 				INT := 0050;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
	
    _STEP_DONE:
		SUPER^._SeqMain := _STEP_IDLE;
        
    _STEP_IDLE:
		// hang out here until called to run
        
    _STEP_COMMAND: // parse vision command
        _VisionCommandParser(Command:=Command);
		IF _VisionCommandParser.Error THEN
			SUPER^.M_Error(Description:=_VisionCommandParser.ErrorDescription);
			//
			SUPER^._SeqMain := _STEP_ERR;
		ELSE
			IF _VisionCommandParser.stCommand.Timeout &gt; 0 THEN
				SUPER^._TimeoutTimer.PT := UDINT_TO_TIME(_VisionCommandParser.stCommand.Timeout * 1000);
			END_IF
			//
			SUPER^._SeqMain := _STEP_TRIGGER;
		END_IF
		
	_STEP_TRIGGER: //
		CASE _VisionCommandParser.stCommand.CommandType OF
			DUT_Command_VisionType.Calibrate: //
				_Vision.M_CalibrateCamera(	iImageWidth:= _VisionCommandParser.stCommand.ImageWidth, 
											iImageHeight:= _VisionCommandParser.stCommand.ImageHeight, 
											fCalCheckerSize:= _VisionCommandParser.stCommand.Calibrate.CheckerSize, 
											iCalCheckerX:= _VisionCommandParser.stCommand.Calibrate.CheckerXCount, 
											iCalCheckerY:= _VisionCommandParser.stCommand.Calibrate.CheckerYCount,
                                            uTimeout:=_VisionCommandParser.stCommand.Timeout);
			
			DUT_Command_VisionType.Acquire: //
				_Vision.M_CaptureImage(	iImageWidth:= _VisionCommandParser.stCommand.ImageWidth, 
										iImageHeight:= _VisionCommandParser.stCommand.ImageHeight,
                                        uTimeout:=_VisionCommandParser.stCommand.Timeout);
			
			DUT_Command_VisionType.LocatePart: //
				_Vision.M_LocatePart( 	iImageWidth:= _VisionCommandParser.stCommand.ImageWidth, 
										iImageHeight:= _VisionCommandParser.stCommand.ImageHeight, 
										iMaxPos:= _VisionCommandParser.stCommand.Locate.MaxParts, 
										dMaxOverlap:= _VisionCommandParser.stCommand.Locate.MaxOverlap, 
										dScore:= _VisionCommandParser.stCommand.Locate.Score, 
										dToleranceAngle:= _VisionCommandParser.stCommand.Locate.ToleranceAngle,
                                        uTimeout:=_VisionCommandParser.stCommand.Timeout,
										sTemplateName:=_VisionCommandParser.stCommand.Locate.TemplateName,
										sScriptFilename:=_VisionCommandParser.stCommand.Locate.ScriptFilename);
			
		END_CASE;
		
		//
		SUPER^._SeqMain := _STEP_WAIT;
		
	_STEP_WAIT: //
		IF _VisionDoneRtrig.Q THEN
			
			//
			_VisionResult := _Vision.P_Result;
			
			//
			_ResultPosition_CAL := FIND(STR1:=_VisionResult,STR2:=_RESPONSE_CAL);
			_ResultPosition_LOC := FIND(STR1:=_VisionResult,STR2:=_RESPONSE_LOC);
			_ResultPosition_CAP := FIND(STR1:=_VisionResult,STR2:=_RESPONSE_CAP);
			
			//
			IF _ResultPosition_CAL &gt; 0 THEN 
				// calibration was completed
				// res: CAL rat:23.23 rot:23.23 err:23.23
				_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN(_RESPONSE_CAL),POS:=LEN(_RESPONSE_CAL)+1);
				//VisionStateText := CONCAT(VisionStateText, '\n');
				//VisionStateText := CONCAT(VisionStateText, _VisionResult);
				// rat:23.23 rot:23.23 err:23.23
				_ResultPosition := FIND(STR1:=_VisionResult,STR2:='rat:');
				IF _ResultPosition &gt; 0 THEN
					_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('rat:'),POS:=LEN('rat:')+1);
					_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
					_VisionRatio := STRING_TO_REAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
					_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
				END_IF
				// rot:23.23 err:23.23
				_ResultPosition := FIND(STR1:=_VisionResult,STR2:='rot:');
				IF _ResultPosition &gt; 0 THEN
					_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('rot:'),POS:=LEN('rot:')+1);
					_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
					_VisionRotation := STRING_TO_REAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
					_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
				END_IF
				// err:23.23
				_ResultPosition := FIND(STR1:=_VisionResult,STR2:='err:');
				IF _ResultPosition &gt; 0 THEN
					_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('err:'),POS:=LEN('err:')+1);
					_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
					_VisionError := STRING_TO_REAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
					_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
				END_IF
				
			ELSIF _ResultPosition_LOC &gt; 0 THEN 
				// part was located
				// 'res: LOC obj:0 cx:54.66 cy:119.45 a:-12.87 s:0.84 $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
				_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN(_RESPONSE_LOC),POS:=LEN(_RESPONSE_LOC)+1);
				//VisionStateText := CONCAT(VisionStateText, '\n');
				//VisionStateText := CONCAT(VisionStateText, _VisionResult);
				_VisionObjectIndex := 0;
				WHILE FIND(STR1:=_VisionResult,STR2:='obj:') &gt; 0 
					AND _VisionObjectIndex &lt;= _VisionCommandParser.stCommand.Locate.MaxParts 
					AND _VisionObjectIndex + _VisionCommandParser.stCommand.Locate.ResultPosition &lt; GVL.VIS_ARR_END DO
					// 'obj:0 cx:54.66 cy:119.45 a:-12.87 s:0.84 $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
					// $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
					_ResultPosition := FIND(STR1:=_VisionResult,STR2:='obj:');
					IF _ResultPosition &gt; 0 THEN
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_ResultPosition-LEN('obj:')+1,POS:=_ResultPosition+LEN('obj:'));
						_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
						_VisionObjectIndex := STRING_TO_UINT(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
						SUPER^.VisionRegisters[_VisionCommandParser.stCommand.Locate.ResultPosition + _VisionObjectIndex].Comment := CONCAT('obj:', UDINT_TO_STRING(_VisionObjectIndex));
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
					END_IF
					// cx:54.66 cy:119.45 a:-12.87 s:0.84 $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
					_ResultPosition := FIND(STR1:=_VisionResult,STR2:='cx:');
					IF _ResultPosition &gt; 0 THEN
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('cx:'),POS:=LEN('cx:')+1);
						_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
						SUPER^.VisionRegisters[_VisionCommandParser.stCommand.Locate.ResultPosition + _VisionObjectIndex].Position.X := STRING_TO_LREAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
					END_IF
					// cy:119.45 a:-12.87 s:0.84 $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
					_ResultPosition := FIND(STR1:=_VisionResult,STR2:='cy:');
					IF _ResultPosition &gt; 0 THEN
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('cy:'),POS:=LEN('cy:')+1);
						_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
						SUPER^.VisionRegisters[_VisionCommandParser.stCommand.Locate.ResultPosition + _VisionObjectIndex].Position.Y := STRING_TO_LREAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
					END_IF
					// a:-12.87 s:0.84 $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
					_ResultPosition := FIND(STR1:=_VisionResult,STR2:='a:');
					IF _ResultPosition &gt; 0 THEN
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('a:'),POS:=LEN('a:')+1);
						_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
						SUPER^.VisionRegisters[_VisionCommandParser.stCommand.Locate.ResultPosition + _VisionObjectIndex].Position.A := STRING_TO_LREAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
					END_IF
					// s:0.84 $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
					_ResultPosition := FIND(STR1:=_VisionResult,STR2:='s:');
					IF _ResultPosition &gt; 0 THEN
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-LEN('s:'),POS:=LEN('s:')+1);
						_SpacePosition := FIND(STR1:=_VisionResult,STR2:=' ');
						SUPER^.VisionRegisters[_VisionCommandParser.stCommand.Locate.ResultPosition + _VisionObjectIndex].Scaling := STRING_TO_REAL(MID(STR:=_VisionResult,LEN:=_SpacePosition-1,POS:=1));
						_VisionResult := MID(STR:=_VisionResult,LEN:=LEN(_VisionResult)-_SpacePosition,POS:=_SpacePosition+1);
					END_IF
					// $NLOC obj:1 cx:71.49 cy:100.06 a:10.13 s:0.83 $N'
				END_WHILE
				
				
			ELSIF _ResultPosition_CAP &gt; 0 THEN 
				// image was captured
				
			END_IF
			
			//
			SUPER^._SeqMain := _STEP_DONE;
			
		END_IF

END_CASE

//
_Vision(sIpAddress:= '127.0.0.1', uPort:= 50011);

//
_VisionBusyRtrig(clk:=_Vision.P_Busy);
IF _VisionBusyRtrig.Q THEN
	VisionStateText := 'BUSY';
END_IF

//
_VisionDoneRtrig(clk:=_Vision.P_Done);
IF _VisionDoneRtrig.Q THEN
	VisionStateText := 'DONE';
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="93afa927-2608-4b3d-9460-07c2fd48c33a">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'Vision Processor',
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="fcfc6b30-29f1-4c96-9dec-23fe83a707f7">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="62ae2670-1ac3-4949-b0cc-afaf62b4bcb3">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqResetting OF
	0:
		_Vision.M_Reset();
		_SeqResetting := _SeqResetting + 1;
	1:
		IF NOT _Vision.P_Error THEN
			VisionStateText := 'RESET';
			SUPER^.M_StateComplete();
			_SeqResetting := 0;
		END_IF
END_CASE
		
</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="02db5f8f-59c2-4bc3-a7b7-0c1db0560d27">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="4fb297bd-99b3-45b8-9db0-a39dde1b30d8">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Aborting" ObjectId="d513ea01-4f59-4a93-8842-106eb97fa165">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqAborting OF
	0:
		_Vision.M_Cancel();
		_SeqAborting := _SeqAborting + 1;
		
	1: 
		IF NOT _Vision.P_Busy THEN
			SUPER^.M_StateComplete();
			_SeqAborting := 0;
		END_IF
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Aborting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VisionCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	VisionStateText: STRING:='READY';
END_VAR
VAR
	_CaptureImage_Output: STRING(255);
	_CaptureImage_WorkerUid: STRING;
	_LocatePart_Output: STRING(255);
	_LocatePart_WorkerUid: STRING;
	_RunCalibration_Output: STRING(255);
	_RunCalibration_WorkerUid: STRING;
    _Vision: OpenCV;
    _VisionCommandParser: ParseVisionCmd;
    _VisionDoneRtrig: R_TRIG;
	_VisionBusyRtrig: R_TRIG;
	_VisionResult: STRING(255);
	_ResultPosition: INT;
	_ResultPosition_CAL: INT;
	_ResultPosition_LOC: INT;
	_ResultPosition_CAP: INT;
	_SpacePosition: INT;
	_VisionObjectIndex: UINT;
	_VisionRatio: REAL;
	_VisionRotation: REAL;
	_VisionError: REAL;
	_UnitModeCurrentState: PACK_ML.State;
END_VAR

VAR CONSTANT
	_RESPONSE_CAL:          STRING:='res: CAL ';
	_RESPONSE_LOC:          STRING:='res: LOC ';
	_RESPONSE_CAP:          STRING:='res: CAP ';

	_STEP_DONE: 			INT := 1000;
	_STEP_IDLE: 			INT := 0000;
	_STEP_COMMAND: 			INT := 0020;
	_STEP_TRIGGER: 			INT := 0030;
	_STEP_WAIT: 			INT := 0040;
	_STEP_ERR: 				INT := 0050;
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>fe68b725-9761-4240-89f1-03981366ea66</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParseVarSetCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVarSetCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_VarSetCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_VarSetCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVarSetCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_VarSetCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVarSetCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_VarSetCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_ArrayTypeS">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'STO'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeV">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VIS'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeF">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'FLG'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVarSetCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_VarSetCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// S|V|F index x y z a b c
// S 0000 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 
// V 0000 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 
// F 0000 1

Error:=FALSE;
ErrorDescription:='';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

//
IF _CmdParams[0] = _ArrayTypeS  THEN
	stCommand.ArrayType := DUT_Command_ArrayType.StoredPosition;
ELSIF _CmdParams[0] = _ArrayTypeV THEN
	stCommand.ArrayType := DUT_Command_ArrayType.VisionRegister;
ELSIF _CmdParams[0] = _ArrayTypeF THEN
	stCommand.ArrayType := DUT_Command_ArrayType.Flag;
ELSE
	Error:=TRUE;
	ErrorDescription:='Incorrect array type';
END_IF

//
stCommand.ArrayIndex := STRING_TO_INT(_CmdParams[1]);
IF ((stCommand.ArrayIndex &lt; GVL.POS_ARR_BEG OR stCommand.ArrayIndex &gt; GVL.POS_ARR_END) AND stCommand.ArrayType = DUT_Command_ArrayType.StoredPosition)
	OR ((stCommand.ArrayIndex &lt; GVL.VIS_ARR_BEG OR stCommand.ArrayIndex &gt; GVL.VIS_ARR_END) AND stCommand.ArrayType = DUT_Command_ArrayType.VisionRegister)
	OR ((stCommand.ArrayIndex &lt; GVL.FLG_ARR_BEG OR stCommand.ArrayIndex &gt; GVL.FLG_ARR_END) AND stCommand.ArrayType = DUT_Command_ArrayType.Flag) THEN
		Error:=TRUE;
		ErrorDescription:='Incorrect array type';
END_IF

//
stCommand.Coordinates.X := STRING_TO_LREAL(_CmdParams[2]);
stCommand.Coordinates.Y := STRING_TO_LREAL(_CmdParams[3]);
stCommand.Coordinates.Z := STRING_TO_LREAL(_CmdParams[4]);
stCommand.Coordinates.A := STRING_TO_LREAL(_CmdParams[5]);
stCommand.Coordinates.B := STRING_TO_LREAL(_CmdParams[6]);
stCommand.Coordinates.C := STRING_TO_LREAL(_CmdParams[7]);</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseVarSetCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_VarSetCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>21a45979-23a6-4d05-8c5e-026456e22047</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="MoveCmdProcessor" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Acceleration">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="1000.0" />
                      </initialValue>
                    </variable>
                    <variable name="AccFactor">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0.5" />
                      </initialValue>
                    </variable>
                    <variable name="Jerk">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="1000.0" />
                      </initialValue>
                    </variable>
                    <variable name="JerkFactor">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0.5" />
                      </initialValue>
                    </variable>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK MoveCmdProcessor EXTENDS Module
VAR_INPUT
	Acceleration: LREAL:=1000.0;
	AccFactor: LREAL:=0.5;
	Jerk: LREAL:=1000.0;
	JerkFactor: LREAL:=0.5;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR
VAR_OUTPUT
	Position: SMC_POS_REF;
END_VAR
VAR
	_SequenceSetCoordTrans: INT;
	_SequenceMoveCircularAbsolute: INT;
	_SequenceMoveCircularRelative: INT;
	_SequenceMoveDirectAbsolute: INT;
	_SequenceMoveDirectRelative: INT;
	_SequenceMoveLinearAbsolute: INT;
	_SequenceMoveLinearRelative: INT;
	
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupHalt: MC_GroupHalt;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_MC_MoveCircularAbsolute: MC_MoveCircularAbsolute;
	_MC_MoveCircularRelative: MC_MoveCircularRelative;
	_MC_MoveDirectAbsolute: MC_MoveDirectAbsolute;
	_MC_MoveDirectRelative: MC_MoveDirectRelative;
	_MC_MoveLinearAbsolute: MC_MoveLinearAbsolute;
	_MC_MoveLinearRelative: MC_MoveLinearRelative;
	
	_UnitModeCurrentState: PACK_ML.State;
	_MoveCommandParser: ParseMoveCmd;
	_PosRef: SMC_POS_REF;
	_PosRef2: SMC_POS_REF;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
END_VAR
VAR CONSTANT
	_STEP_DONE: 				INT := 1000;
	_STEP_IDLE: 				INT := 0000;
	_STEP_COMMAND: 				INT := 0020;
	_STEP_GROUP_POWER_ON: 		INT := 0022;
	_STEP_WAIT_POWER_ON: 		INT := 0024;
	_STEP_GROUP_ENABLE: 		INT := 0030;
	_STEP_WAIT_ENABLE: 			INT := 0035;
	_STEP_READ_POSITION: 		INT := 0040;
	_STEP_WAIT_POSITION: 		INT := 0050;
	_STEP_SET_KINEMATICS: 		INT := 0060;
	_STEP_WAIT_KINEMATICS: 		INT := 0070;
	_STEP_SET_COORD_TRANS:		INT := 0071;
	_STEP_WAIT_COORD_TRANS:		INT := 0072;
	_STEP_MOVE_TYPE:			INT := 0080;
	_STEP_WAIT_MOVE: 			INT := 0090;
	_STEP_GROUP_DISABLE: 		INT := 0100;
	_STEP_WAIT_DISABLE: 		INT := 0110;
	_STEP_GROUP_POWER_OFF: 		INT := 0120;
	_STEP_ERR: 					INT := 9999;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <inOutVars>
                    <variable name="AxisGroup">
                      <type>
                        <derived name="AXIS_GROUP_REF_SM3" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK MoveCmdProcessor EXTENDS Module
VAR_INPUT
	Acceleration: LREAL:=1000.0;
	AccFactor: LREAL:=0.5;
	Jerk: LREAL:=1000.0;
	JerkFactor: LREAL:=0.5;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR
VAR_OUTPUT
	Position: SMC_POS_REF;
END_VAR
VAR
	_SequenceSetCoordTrans: INT;
	_SequenceMoveCircularAbsolute: INT;
	_SequenceMoveCircularRelative: INT;
	_SequenceMoveDirectAbsolute: INT;
	_SequenceMoveDirectRelative: INT;
	_SequenceMoveLinearAbsolute: INT;
	_SequenceMoveLinearRelative: INT;
	
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupHalt: MC_GroupHalt;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_MC_MoveCircularAbsolute: MC_MoveCircularAbsolute;
	_MC_MoveCircularRelative: MC_MoveCircularRelative;
	_MC_MoveDirectAbsolute: MC_MoveDirectAbsolute;
	_MC_MoveDirectRelative: MC_MoveDirectRelative;
	_MC_MoveLinearAbsolute: MC_MoveLinearAbsolute;
	_MC_MoveLinearRelative: MC_MoveLinearRelative;
	
	_UnitModeCurrentState: PACK_ML.State;
	_MoveCommandParser: ParseMoveCmd;
	_PosRef: SMC_POS_REF;
	_PosRef2: SMC_POS_REF;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
END_VAR
VAR CONSTANT
	_STEP_DONE: 				INT := 1000;
	_STEP_IDLE: 				INT := 0000;
	_STEP_COMMAND: 				INT := 0020;
	_STEP_GROUP_POWER_ON: 		INT := 0022;
	_STEP_WAIT_POWER_ON: 		INT := 0024;
	_STEP_GROUP_ENABLE: 		INT := 0030;
	_STEP_WAIT_ENABLE: 			INT := 0035;
	_STEP_READ_POSITION: 		INT := 0040;
	_STEP_WAIT_POSITION: 		INT := 0050;
	_STEP_SET_KINEMATICS: 		INT := 0060;
	_STEP_WAIT_KINEMATICS: 		INT := 0070;
	_STEP_SET_COORD_TRANS:		INT := 0071;
	_STEP_WAIT_COORD_TRANS:		INT := 0072;
	_STEP_MOVE_TYPE:			INT := 0080;
	_STEP_WAIT_MOVE: 			INT := 0090;
	_STEP_GROUP_DISABLE: 		INT := 0100;
	_STEP_WAIT_DISABLE: 		INT := 0110;
	_STEP_GROUP_POWER_OFF: 		INT := 0120;
	_STEP_ERR: 					INT := 9999;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <outputVars>
                    <variable name="Position">
                      <type>
                        <derived name="SMC_POS_REF" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK MoveCmdProcessor EXTENDS Module
VAR_INPUT
	Acceleration: LREAL:=1000.0;
	AccFactor: LREAL:=0.5;
	Jerk: LREAL:=1000.0;
	JerkFactor: LREAL:=0.5;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR
VAR_OUTPUT
	Position: SMC_POS_REF;
END_VAR
VAR
	_SequenceSetCoordTrans: INT;
	_SequenceMoveCircularAbsolute: INT;
	_SequenceMoveCircularRelative: INT;
	_SequenceMoveDirectAbsolute: INT;
	_SequenceMoveDirectRelative: INT;
	_SequenceMoveLinearAbsolute: INT;
	_SequenceMoveLinearRelative: INT;
	
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupHalt: MC_GroupHalt;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_MC_MoveCircularAbsolute: MC_MoveCircularAbsolute;
	_MC_MoveCircularRelative: MC_MoveCircularRelative;
	_MC_MoveDirectAbsolute: MC_MoveDirectAbsolute;
	_MC_MoveDirectRelative: MC_MoveDirectRelative;
	_MC_MoveLinearAbsolute: MC_MoveLinearAbsolute;
	_MC_MoveLinearRelative: MC_MoveLinearRelative;
	
	_UnitModeCurrentState: PACK_ML.State;
	_MoveCommandParser: ParseMoveCmd;
	_PosRef: SMC_POS_REF;
	_PosRef2: SMC_POS_REF;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
END_VAR
VAR CONSTANT
	_STEP_DONE: 				INT := 1000;
	_STEP_IDLE: 				INT := 0000;
	_STEP_COMMAND: 				INT := 0020;
	_STEP_GROUP_POWER_ON: 		INT := 0022;
	_STEP_WAIT_POWER_ON: 		INT := 0024;
	_STEP_GROUP_ENABLE: 		INT := 0030;
	_STEP_WAIT_ENABLE: 			INT := 0035;
	_STEP_READ_POSITION: 		INT := 0040;
	_STEP_WAIT_POSITION: 		INT := 0050;
	_STEP_SET_KINEMATICS: 		INT := 0060;
	_STEP_WAIT_KINEMATICS: 		INT := 0070;
	_STEP_SET_COORD_TRANS:		INT := 0071;
	_STEP_WAIT_COORD_TRANS:		INT := 0072;
	_STEP_MOVE_TYPE:			INT := 0080;
	_STEP_WAIT_MOVE: 			INT := 0090;
	_STEP_GROUP_DISABLE: 		INT := 0100;
	_STEP_WAIT_DISABLE: 		INT := 0110;
	_STEP_GROUP_POWER_OFF: 		INT := 0120;
	_STEP_ERR: 					INT := 9999;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_SequenceSetCoordTrans">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceMoveCircularAbsolute">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceMoveCircularRelative">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceMoveDirectAbsolute">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceMoveDirectRelative">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceMoveLinearAbsolute">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceMoveLinearRelative">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SMC_GroupPower">
                      <type>
                        <derived name="SMC_GroupPower" />
                      </type>
                    </variable>
                    <variable name="_GroupPower">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_MC_GroupEnable">
                      <type>
                        <derived name="MC_GroupEnable" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupDisable">
                      <type>
                        <derived name="MC_GroupDisable" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupReset">
                      <type>
                        <derived name="MC_GroupReset" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupHalt">
                      <type>
                        <derived name="MC_GroupHalt" />
                      </type>
                    </variable>
                    <variable name="_MC_GroupReadActualPosition">
                      <type>
                        <derived name="MC_GroupReadActualPosition" />
                      </type>
                    </variable>
                    <variable name="_SMC_SetKinConfiguration">
                      <type>
                        <derived name="SMC_SetKinConfiguration" />
                      </type>
                    </variable>
                    <variable name="_MC_MoveCircularAbsolute">
                      <type>
                        <derived name="MC_MoveCircularAbsolute" />
                      </type>
                    </variable>
                    <variable name="_MC_MoveCircularRelative">
                      <type>
                        <derived name="MC_MoveCircularRelative" />
                      </type>
                    </variable>
                    <variable name="_MC_MoveDirectAbsolute">
                      <type>
                        <derived name="MC_MoveDirectAbsolute" />
                      </type>
                    </variable>
                    <variable name="_MC_MoveDirectRelative">
                      <type>
                        <derived name="MC_MoveDirectRelative" />
                      </type>
                    </variable>
                    <variable name="_MC_MoveLinearAbsolute">
                      <type>
                        <derived name="MC_MoveLinearAbsolute" />
                      </type>
                    </variable>
                    <variable name="_MC_MoveLinearRelative">
                      <type>
                        <derived name="MC_MoveLinearRelative" />
                      </type>
                    </variable>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_MoveCommandParser">
                      <type>
                        <derived name="ParseMoveCmd" />
                      </type>
                    </variable>
                    <variable name="_PosRef">
                      <type>
                        <derived name="SMC_POS_REF" />
                      </type>
                    </variable>
                    <variable name="_PosRef2">
                      <type>
                        <derived name="SMC_POS_REF" />
                      </type>
                    </variable>
                    <variable name="_MC_SetCoordinateTransform">
                      <type>
                        <derived name="MC_SetCoordinateTransform" />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> coordinate transforms</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_SMC_GroupSetTool">
                      <type>
                        <derived name="SMC_GroupSetTool" />
                      </type>
                    </variable>
                    <variable name="_MC_COORD_REF">
                      <type>
                        <derived name="MC_COORD_REF" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK MoveCmdProcessor EXTENDS Module
VAR_INPUT
	Acceleration: LREAL:=1000.0;
	AccFactor: LREAL:=0.5;
	Jerk: LREAL:=1000.0;
	JerkFactor: LREAL:=0.5;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR
VAR_OUTPUT
	Position: SMC_POS_REF;
END_VAR
VAR
	_SequenceSetCoordTrans: INT;
	_SequenceMoveCircularAbsolute: INT;
	_SequenceMoveCircularRelative: INT;
	_SequenceMoveDirectAbsolute: INT;
	_SequenceMoveDirectRelative: INT;
	_SequenceMoveLinearAbsolute: INT;
	_SequenceMoveLinearRelative: INT;
	
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupHalt: MC_GroupHalt;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_MC_MoveCircularAbsolute: MC_MoveCircularAbsolute;
	_MC_MoveCircularRelative: MC_MoveCircularRelative;
	_MC_MoveDirectAbsolute: MC_MoveDirectAbsolute;
	_MC_MoveDirectRelative: MC_MoveDirectRelative;
	_MC_MoveLinearAbsolute: MC_MoveLinearAbsolute;
	_MC_MoveLinearRelative: MC_MoveLinearRelative;
	
	_UnitModeCurrentState: PACK_ML.State;
	_MoveCommandParser: ParseMoveCmd;
	_PosRef: SMC_POS_REF;
	_PosRef2: SMC_POS_REF;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
END_VAR
VAR CONSTANT
	_STEP_DONE: 				INT := 1000;
	_STEP_IDLE: 				INT := 0000;
	_STEP_COMMAND: 				INT := 0020;
	_STEP_GROUP_POWER_ON: 		INT := 0022;
	_STEP_WAIT_POWER_ON: 		INT := 0024;
	_STEP_GROUP_ENABLE: 		INT := 0030;
	_STEP_WAIT_ENABLE: 			INT := 0035;
	_STEP_READ_POSITION: 		INT := 0040;
	_STEP_WAIT_POSITION: 		INT := 0050;
	_STEP_SET_KINEMATICS: 		INT := 0060;
	_STEP_WAIT_KINEMATICS: 		INT := 0070;
	_STEP_SET_COORD_TRANS:		INT := 0071;
	_STEP_WAIT_COORD_TRANS:		INT := 0072;
	_STEP_MOVE_TYPE:			INT := 0080;
	_STEP_WAIT_MOVE: 			INT := 0090;
	_STEP_GROUP_DISABLE: 		INT := 0100;
	_STEP_WAIT_DISABLE: 		INT := 0110;
	_STEP_GROUP_POWER_OFF: 		INT := 0120;
	_STEP_ERR: 					INT := 9999;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_GROUP_POWER_ON">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="22" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_POWER_ON">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="24" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_GROUP_ENABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_ENABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="35" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_READ_POSITION">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="40" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_POSITION">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="50" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_SET_KINEMATICS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="60" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_KINEMATICS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="70" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_SET_COORD_TRANS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="71" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_COORD_TRANS">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="72" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_MOVE_TYPE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="80" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_MOVE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="90" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_GROUP_DISABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="100" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_WAIT_DISABLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="110" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_GROUP_POWER_OFF">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="120" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="9999" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK MoveCmdProcessor EXTENDS Module
VAR_INPUT
	Acceleration: LREAL:=1000.0;
	AccFactor: LREAL:=0.5;
	Jerk: LREAL:=1000.0;
	JerkFactor: LREAL:=0.5;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR
VAR_OUTPUT
	Position: SMC_POS_REF;
END_VAR
VAR
	_SequenceSetCoordTrans: INT;
	_SequenceMoveCircularAbsolute: INT;
	_SequenceMoveCircularRelative: INT;
	_SequenceMoveDirectAbsolute: INT;
	_SequenceMoveDirectRelative: INT;
	_SequenceMoveLinearAbsolute: INT;
	_SequenceMoveLinearRelative: INT;
	
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupHalt: MC_GroupHalt;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_MC_MoveCircularAbsolute: MC_MoveCircularAbsolute;
	_MC_MoveCircularRelative: MC_MoveCircularRelative;
	_MC_MoveDirectAbsolute: MC_MoveDirectAbsolute;
	_MC_MoveDirectRelative: MC_MoveDirectRelative;
	_MC_MoveLinearAbsolute: MC_MoveLinearAbsolute;
	_MC_MoveLinearRelative: MC_MoveLinearRelative;
	
	_UnitModeCurrentState: PACK_ML.State;
	_MoveCommandParser: ParseMoveCmd;
	_PosRef: SMC_POS_REF;
	_PosRef2: SMC_POS_REF;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
END_VAR
VAR CONSTANT
	_STEP_DONE: 				INT := 1000;
	_STEP_IDLE: 				INT := 0000;
	_STEP_COMMAND: 				INT := 0020;
	_STEP_GROUP_POWER_ON: 		INT := 0022;
	_STEP_WAIT_POWER_ON: 		INT := 0024;
	_STEP_GROUP_ENABLE: 		INT := 0030;
	_STEP_WAIT_ENABLE: 			INT := 0035;
	_STEP_READ_POSITION: 		INT := 0040;
	_STEP_WAIT_POSITION: 		INT := 0050;
	_STEP_SET_KINEMATICS: 		INT := 0060;
	_STEP_WAIT_KINEMATICS: 		INT := 0070;
	_STEP_SET_COORD_TRANS:		INT := 0071;
	_STEP_WAIT_COORD_TRANS:		INT := 0072;
	_STEP_MOVE_TYPE:			INT := 0080;
	_STEP_WAIT_MOVE: 			INT := 0090;
	_STEP_GROUP_DISABLE: 		INT := 0100;
	_STEP_WAIT_DISABLE: 		INT := 0110;
	_STEP_GROUP_POWER_OFF: 		INT := 0120;
	_STEP_ERR: 					INT := 9999;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
	
	_STEP_DONE:
		SUPER^._SeqMain := _STEP_IDLE;
		
	_STEP_IDLE:
		// wait here until commanded to start
		
	_STEP_COMMAND: // parse command
		_MoveCommandParser(Command:=Command);
		SUPER^._SeqMain := _STEP_GROUP_POWER_ON;
		
	_STEP_GROUP_POWER_ON:
		_GroupPower := TRUE;
		SUPER^._SeqMain := _STEP_WAIT_POWER_ON;
		
	_STEP_WAIT_POWER_ON:
		IF _SMC_GroupPower.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_SMC_GroupPower.ErrorID),
										CONCAT(' ', SMC_ErrorString(_SMC_GroupPower.ErrorID,
													SMC_Language_Type.english)))));
			SUPER^._SeqMain := _STEP_ERR; // error step so we dont spam errors
													
		ELSIF _SMC_GroupPower.Status THEN
			SUPER^._SeqMain := _STEP_GROUP_ENABLE;
			
		END_IF
		
	_STEP_GROUP_ENABLE:
		_MC_GroupEnable.Execute := TRUE;
		SUPER^._SeqMain := _STEP_WAIT_ENABLE;
		
	_STEP_WAIT_ENABLE:
		IF NOT _MC_GroupEnable.Busy THEN // this is a hack. we need to figure out is the group is already enabled first
			SUPER^._SeqMain := _STEP_READ_POSITION;
		END_IF;
		
	_STEP_READ_POSITION: // read group position
		_PosRef.c := _MoveCommandParser.stCommand.CoordRef;
		_PosRef2.c := _MoveCommandParser.stCommand.CoordRef2;
		_MC_GroupReadActualPosition.Enable := TRUE;
		SUPER^._SeqMain := _STEP_WAIT_POSITION;
		
	_STEP_WAIT_POSITION: // wait for group read position
		IF _MC_GroupReadActualPosition.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_GroupReadActualPosition.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_GroupReadActualPosition.ErrorID,
													SMC_Language_Type.english)))));
			SUPER^._SeqMain := _STEP_ERR; // error step so we dont spam errors
													
		ELSIF  _MC_GroupReadActualPosition.Valid THEN
			_MC_GroupReadActualPosition.Enable := FALSE;
			SUPER^._SeqMain := _STEP_SET_KINEMATICS;
			
		END_IF
		
	_STEP_SET_KINEMATICS: // set kinematics
		_SMC_SetKinConfiguration.Execute := TRUE;
		SUPER^._SeqMain := _STEP_WAIT_KINEMATICS;
		
	_STEP_WAIT_KINEMATICS: // wait for set kinematics
		IF _SMC_SetKinConfiguration.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_SMC_SetKinConfiguration.ErrorID),
										CONCAT(' ', SMC_ErrorString(_SMC_SetKinConfiguration.ErrorID,
													SMC_Language_Type.english)))));
			SUPER^._SeqMain := _STEP_ERR; // error step so we dont spam errors
													
		ELSIF _SMC_SetKinConfiguration.Done THEN
			_SMC_SetKinConfiguration.Execute := FALSE;
			SUPER^._SeqMain := _STEP_SET_COORD_TRANS;
			
		END_IF
		
	_STEP_SET_COORD_TRANS:
		_SequenceSetCoordTrans := 1;
		SUPER^._SeqMain := _STEP_WAIT_COORD_TRANS;
	
	_STEP_WAIT_COORD_TRANS:
		IF _SequenceSetCoordTrans &lt;= 0 THEN
			SUPER^._SeqMain := _STEP_MOVE_TYPE;
		END_IF
		
	_STEP_MOVE_TYPE: // parse move type
		IF _MoveCommandParser.stCommand.MoveType = DUT_Command_MoveType.CircularMove THEN
			IF _MoveCommandParser.stCommand.PositionType = DUT_Command_PositionType.AbsolutePosition THEN
				_SequenceMoveCircularAbsolute := 1;
			ELSIF _MoveCommandParser.stCommand.PositionType = DUT_Command_PositionType.RelativePosition THEN
				_SequenceMoveCircularRelative := 1;
			END_IF
			
		ELSIF _MoveCommandParser.stCommand.MoveType = DUT_Command_MoveType.DirectMove THEN
			IF _MoveCommandParser.stCommand.PositionType = DUT_Command_PositionType.AbsolutePosition THEN
				_SequenceMoveDirectAbsolute := 1;
			ELSIF _MoveCommandParser.stCommand.PositionType = DUT_Command_PositionType.RelativePosition THEN
				_SequenceMoveDirectRelative := 1;
			END_IF
			
		ELSIF _MoveCommandParser.stCommand.MoveType = DUT_Command_MoveType.LinearMove THEN
			IF _MoveCommandParser.stCommand.PositionType = DUT_Command_PositionType.AbsolutePosition THEN
				_SequenceMoveLinearAbsolute := 1;
			ELSIF _MoveCommandParser.stCommand.PositionType = DUT_Command_PositionType.RelativePosition THEN
				_SequenceMoveLinearRelative := 1;
			END_IF
		END_IF
		
		SUPER^._SeqMain := _STEP_WAIT_MOVE;
		
	_STEP_WAIT_MOVE: // wait for move complete
		IF _SequenceMoveCircularAbsolute = 0
			AND _SequenceMoveCircularRelative = 0 
			AND _SequenceMoveDirectAbsolute = 0 
			AND _SequenceMoveDirectRelative = 0
			AND _SequenceMoveLinearAbsolute = 0
			AND _SequenceMoveLinearRelative = 0 THEN
				SUPER^._SeqMain := _STEP_GROUP_DISABLE;
		END_IF
		
	_STEP_GROUP_DISABLE:
		_MC_GroupDisable.Execute := TRUE;
		SUPER^._SeqMain := _STEP_WAIT_DISABLE;
		
	_STEP_WAIT_DISABLE:
		IF NOT _MC_GroupDisable.Busy THEN // this is a hack. we need to figure out if the group is already disabled first
			_MC_GroupDisable.Execute := FALSE;
			SUPER^._SeqMain := _STEP_GROUP_POWER_OFF;
		END_IF
		
	_STEP_GROUP_POWER_OFF:
		_GroupPower := FALSE;
		SUPER^._SeqMain := _STEP_DONE;
	
END_CASE

CASE _SequenceMoveCircularAbsolute OF
	0: //
	
	1: //
		_MC_MoveCircularAbsolute.Execute := TRUE;
		_SequenceMoveCircularAbsolute := 2;
		
	2: //
		IF _MC_MoveCircularAbsolute.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_MoveCircularAbsolute.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_MoveCircularAbsolute.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceMoveCircularAbsolute := 3; // error step so we dont spam errors
		ELSIF  _MC_MoveCircularAbsolute.Done THEN
			_MC_MoveCircularAbsolute.Execute := FALSE;
			_SequenceMoveCircularAbsolute := 0;
		END_IF
		
END_CASE

CASE _SequenceMoveCircularRelative OF
	0: //
	
	1: //
		_MC_MoveCircularRelative.Execute := TRUE;
		_SequenceMoveCircularRelative := 2;
		
	2: //
		IF _MC_MoveCircularRelative.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_MoveCircularRelative.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_MoveCircularRelative.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceMoveCircularRelative := 3; // error step so we dont spam errors
		ELSIF  _MC_MoveCircularRelative.Done THEN
			_MC_MoveCircularRelative.Execute := FALSE;
			_SequenceMoveCircularRelative := 0;
		END_IF
		
END_CASE

CASE _SequenceMoveDirectAbsolute OF
	0: //
	
	1: //
		_MC_MoveDirectAbsolute.Execute := TRUE;
		_SequenceMoveDirectAbsolute := 2;
		
	2: //
		IF _MC_MoveDirectAbsolute.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_MoveDirectAbsolute.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_MoveDirectAbsolute.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceMoveDirectAbsolute := 3; // error step so we dont spam errors
			
		ELSIF _MC_MoveDirectAbsolute.Done THEN
			_MC_MoveDirectAbsolute.Execute := FALSE;
			_SequenceMoveDirectAbsolute := 0;
		END_IF
		
END_CASE

CASE _SequenceMoveDirectRelative OF
	0: //
	
	1: //
		_MC_MoveDirectRelative.Execute := TRUE;
		_SequenceMoveDirectRelative := 2;
		
	2: //
		IF _MC_MoveDirectRelative.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_MoveDirectRelative.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_MoveDirectRelative.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceMoveDirectRelative := 3; // error step so we dont spam errors
			
		ELSIF _MC_MoveDirectRelative.Done THEN
			_MC_MoveDirectRelative.Execute := FALSE;
			_SequenceMoveDirectRelative := 0;
		END_IF
		
END_CASE

CASE _SequenceMoveLinearAbsolute OF
	0: //
	
	1: //
		_MC_MoveLinearAbsolute.Execute := TRUE;
		_SequenceMoveLinearAbsolute := 2;
		
	2: //
		IF _MC_MoveLinearAbsolute.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_MoveLinearAbsolute.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_MoveLinearAbsolute.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceMoveLinearAbsolute := 3; // error step so we dont spam errors
			
		ELSIF _MC_MoveLinearAbsolute.Done THEN
			_MC_MoveLinearAbsolute.Execute := FALSE;
			_SequenceMoveLinearAbsolute := 0;
		END_IF
END_CASE

CASE _SequenceMoveLinearRelative OF
	0: //
	
	1: //
		_MC_MoveLinearRelative.Execute := TRUE;
		_SequenceMoveLinearRelative := 2;
		
	2: //
		IF _MC_MoveLinearRelative.Error THEN
		SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_MoveLinearRelative.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_MoveLinearRelative.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceMoveLinearRelative := 3; // error step so we dont spam errors
			
		ELSIF _MC_MoveLinearRelative.Done THEN
			_MC_MoveLinearRelative.Execute := FALSE;
			_SequenceMoveLinearRelative := 0;
		END_IF
		
END_CASE

CASE _SequenceSetCoordTrans OF
	0: //
	
	1: //
		_MC_COORD_REF := SUPER^.StoredPositions[GVL.MCS_POS_IDX].Position; // MCS
		_MC_SetCoordinateTransform.CoordSystem := SMC_COORD_SYSTEM.MCS;
		_MC_SetCoordinateTransform.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	2: //
		IF _MC_SetCoordinateTransform.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_SetCoordinateTransform.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_SetCoordinateTransform.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _MC_SetCoordinateTransform.Done THEN
			_MC_SetCoordinateTransform.Execute := FALSE;
			_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		END_IF
		
	3: //
		_MC_COORD_REF := SUPER^.StoredPositions[GVL.PC1_POS_IDX].Position; // PCS 1
		_MC_SetCoordinateTransform.CoordSystem := SMC_COORD_SYSTEM.PCS_1;
		_MC_SetCoordinateTransform.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	4: //
		IF _MC_SetCoordinateTransform.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_SetCoordinateTransform.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_SetCoordinateTransform.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _MC_SetCoordinateTransform.Done THEN
			_MC_SetCoordinateTransform.Execute := FALSE;
			_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		END_IF
		
	5: //
		_MC_COORD_REF := SUPER^.StoredPositions[GVL.PC2_POS_IDX].Position; // PCS 2
		_MC_SetCoordinateTransform.CoordSystem := SMC_COORD_SYSTEM.PCS_2;
		_MC_SetCoordinateTransform.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	6: //
		IF _MC_SetCoordinateTransform.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_MC_SetCoordinateTransform.ErrorID),
										CONCAT(' ', SMC_ErrorString(_MC_SetCoordinateTransform.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _MC_SetCoordinateTransform.Done THEN
			_MC_SetCoordinateTransform.Execute := FALSE;
			_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		END_IF
		
	7:  // set tool offset
		_MC_COORD_REF := SUPER^.StoredPositions[GVL.TCP_POS_IDX].Position; // TCP
		_SMC_GroupSetTool.Execute := TRUE;
		_SequenceSetCoordTrans := _SequenceSetCoordTrans + 1;
		
	8: // monitor tool offset
		IF _SMC_GroupSetTool.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Move Command Error: ',
										CONCAT(TO_STRING(_SMC_GroupSetTool.ErrorID),
										CONCAT(' ', SMC_ErrorString(_SMC_GroupSetTool.ErrorID,
													SMC_Language_Type.english)))));
			_SequenceSetCoordTrans := 10; // error step so we dont spam errors
			
		ELSIF _SMC_GroupSetTool.Done THEN
			_SMC_GroupSetTool.Execute := FALSE;
			_SequenceSetCoordTrans := 0;
		END_IF

END_CASE

_SMC_GroupPower(
	AxisGroup:= AxisGroup, 
	Enable:= _GroupPower, 
	bRegulatorOn:= _GroupPower, 
	bDriveStart:= _GroupPower, 
	Status=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_MC_GroupHalt(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Deceleration:= Acceleration, 
	Jerk:= Jerk, 
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= , 
	ClearMovements:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	CommandAccepted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	MovementId=&gt; );
_MC_GroupEnable(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	CompatibilityOptions:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
//_MC_GroupEnable.Execute := FALSE;
_MC_GroupDisable(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
//_MC_GroupDisable.Execute := FALSE;
_MC_GroupReset(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
//_MC_GroupReset.Execute := FALSE; this causes it to be busy on each scan
_MC_GroupReadActualPosition(
	AxisGroup:= AxisGroup, 
	Enable:= , 
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem, 
	Valid=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	Position=&gt; Position, 
	KinematicConfig=&gt; );
	
_SMC_SetKinConfiguration(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	ConfigData:= _MC_GroupReadActualPosition.KinematicConfig, 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_MC_SetCoordinateTransform(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	CoordTransform:= _MC_COORD_REF, 
	CoordSystem:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

_SMC_GroupSetTool(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	ToolOffset:= _MC_COORD_REF, 
	Done=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

// https://content.helpme-codesys.com/de/libs/SM3_Robotics/Current/SM3_Robotics/POUs/Movement/MC_MoveCircularAbsolute.html
// https://content.helpme-codesys.com/de/libs/SM3_Robotics/Current/SM3_Robotics/Basic-types/SMC_CIRC_MODE.html#smc-circ-mode
_MC_MoveCircularAbsolute(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	CircMode:= _MoveCommandParser.stCommand.CircleMode, 
	AuxPoint:= _PosRef, 
	EndPoint:= _PosRef2, 
	PathChoice:= _MoveCommandParser.stCommand.PathChoice, 
	Velocity:= _MoveCommandParser.stCommand.Speed, 
	Acceleration:= Acceleration, 
	Deceleration:= Acceleration, 
	Jerk:= Jerk, 
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem, 
	BufferMode:= , 
	TransitionMode:= , 
	TransitionParameter:= , 
	OrientationMode:= , 
	VelFactor:= _MoveCommandParser.stCommand.Speed / 100.0,  
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= 1, 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	CommandAccepted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	MovementId=&gt; );

// https://content.helpme-codesys.com/en/libs/SM3_Robotics/Current/SM3_Robotics/POUs/Movement/MC_MoveCircularRelative.html
// https://content.helpme-codesys.com/de/libs/SM3_Robotics/Current/SM3_Robotics/Basic-types/SMC_CIRC_MODE.html#smc-circ-mode
_MC_MoveCircularRelative(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	CircMode:= _MoveCommandParser.stCommand.CircleMode, 
	AuxPoint:= _PosRef, 
	EndPoint:= _PosRef2, 
	PathChoice:= _MoveCommandParser.stCommand.PathChoice, 
	Velocity:= _MoveCommandParser.stCommand.Speed, 
	Acceleration:= Acceleration, 
	Deceleration:= Acceleration, 
	Jerk:= Jerk, 
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem, 
	BufferMode:= , 
	TransitionMode:= , 
	TransitionParameter:= , 
	OrientationMode:= , 
	VelFactor:= _MoveCommandParser.stCommand.Speed / 100.0,  
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= 1, 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	CommandAccepted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	MovementId=&gt; );

_MC_MoveDirectAbsolute(
	AxisGroup:=AxisGroup,
	Execute:= ,
	Position:= _PosRef,
	MovementType:= ,
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem,
	BufferMode:= ,
	TransitionMode:= ,
	TransitionParameter:= ,
	VelFactor:= _MoveCommandParser.stCommand.Speed / 100.0, 
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= 1,
	Done=&gt; ,
	Busy=&gt; ,
	Active=&gt; ,
	CommandAborted=&gt; ,
	CommandAccepted=&gt; ,
	Error=&gt; ,
	ErrorID=&gt; ,
	MovementId=&gt; );
						
_MC_MoveDirectRelative(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Distance:= _PosRef, 
	MovementType:= , 
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem, 
	BufferMode:= , 
	TransitionMode:= , 
	TransitionParameter:= , 
	VelFactor:= _MoveCommandParser.stCommand.Speed / 100.0,  
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= 1, 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	CommandAccepted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	MovementId=&gt; );
	
_MC_MoveLinearAbsolute(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Position:= _PosRef,
	Velocity:= _MoveCommandParser.stCommand.Speed, 
	Acceleration:= Acceleration, 
	Deceleration:= Acceleration, 
	Jerk:= Jerk, 
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem, 
	BufferMode:= , 
	TransitionMode:= , 
	TransitionParameter:= , 
	OrientationMode:= , 
	VelFactor:= _MoveCommandParser.stCommand.Speed / 100.0, 
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= 1, 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	CommandAccepted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	MovementId=&gt; );
	
_MC_MoveLinearRelative(
	AxisGroup:= AxisGroup, 
	Execute:= , 
	Distance:= _PosRef, 
	Velocity:= _MoveCommandParser.stCommand.Speed, 
	Acceleration:= Acceleration, 
	Deceleration:= Acceleration, 
	Jerk:= Jerk, 
	CoordSystem:= _MoveCommandParser.stCommand.CoordSystem, 
	BufferMode:= , 
	TransitionMode:= , 
	TransitionParameter:= , 
	OrientationMode:= , 
	VelFactor:= _MoveCommandParser.stCommand.Speed / 100.0,  
	AccFactor:= AccFactor, 
	JerkFactor:= JerkFactor, 
	TorqueFactor:= 1, 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	CommandAccepted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; , 
	MovementId=&gt; );</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="ce3be291-42fd-4d66-9e0a-0e5bf023807b">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="95f46e6e-26ec-450c-948d-d902314a1d4d">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqResetting OF
	0:
		_MC_GroupReset.Execute := TRUE;
		_SeqResetting := _SeqResetting + 1;
	1:
		IF NOT _MC_GroupReset.Busy THEN
			_MC_GroupReset.Execute := FALSE;
			SUPER^.M_StateComplete();
			_SeqResetting := 0;
		END_IF
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Idle" ObjectId="387dbba7-203a-4514-9198-3038b8e4b5dc">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// in this state, we want to reset all the function blocks and hang out
_GroupPower := FALSE;
_MC_GroupEnable.Execute := FALSE;
_MC_GroupDisable.Execute := FALSE;
_MC_GroupReset.Execute := FALSE;
_MC_GroupReadActualPosition.Enable := FALSE;
_SMC_SetKinConfiguration.Execute := FALSE;
_MC_SetCoordinateTransform.Execute := FALSE;
_SMC_GroupSetTool.Execute := FALSE;
_MC_MoveCircularAbsolute.Execute := FALSE;
_MC_MoveCircularRelative.Execute := FALSE;
_MC_MoveDirectAbsolute.Execute := FALSE;
_MC_MoveDirectRelative.Execute := FALSE;
_MC_MoveLinearAbsolute.Execute := FALSE;
_MC_MoveLinearRelative.Execute := FALSE;
_SequenceMoveCircularAbsolute := 0;
_SequenceMoveCircularRelative := 0;
_SequenceMoveDirectAbsolute := 0;
_SequenceMoveDirectRelative := 0;
_SequenceMoveLinearAbsolute := 0;
_SequenceMoveLinearRelative := 0;
_SequenceSetCoordTrans := 0;
SUPER^._SeqMain := 0;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Idle : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Holding" ObjectId="67eb5664-2a5b-4455-8b32-aeda1b99b743">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqHolding OF
	0:
		_MC_MoveCircularAbsolute.Execute := FALSE;
		_MC_MoveCircularRelative.Execute := FALSE;
		_MC_MoveDirectAbsolute.Execute := FALSE;
		_MC_MoveDirectRelative.Execute := FALSE;
		_MC_MoveLinearAbsolute.Execute := FALSE;
		_MC_MoveLinearRelative.Execute := FALSE;
		_MC_GroupHalt.Execute:=TRUE;
		_SeqHolding := _SeqHolding + 1;
	1:
		IF _MC_GroupHalt.Done THEN
			_MC_GroupHalt.Execute := FALSE;
			SUPER^.M_StateComplete();
			_SeqHolding := 0;
		END_IF
		
END_CASE

</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Holding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="a682ac1d-71f4-44e2-9664-b97db23d1386">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Aborting" ObjectId="4e26ece5-3a6a-4b95-a5a2-0147c1e26a3d">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqAborting OF
	0:
		_GroupPower := FALSE;
		_MC_GroupDisable.Execute := TRUE;
		_SeqAborting := _SeqAborting + 1;
	1:
		IF NOT _SMC_GroupPower.Busy AND NOT _MC_GroupDisable.Busy THEN
			_MC_GroupDisable.Execute := FALSE;
			SUPER^.M_StateComplete();
			_SeqAborting := 0;
		END_IF
		
END_CASE
</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Aborting : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="5915b6b9-5c4b-4cff-a92a-a70dfd02e351">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_UnHolding" ObjectId="388ca3d8-559e-4364-ae71-180c399a068a">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here the operator called unhold (most likely from M_Start)
_MC_GroupHalt.Execute := FALSE;
CASE _MoveCommandParser.stCommand.MoveType OF 
	DUT_Command_MoveType.DirectMove:
		IF _MoveCommandParser.stCommand.PositionType = DUT_Command_Positiontype.AbsolutePosition THEN
			_MC_MoveDirectAbsolute.Execute := TRUE;
		ELSE
			_MC_MoveDirectRelative.Execute := TRUE;
		END_IF
	DUT_Command_MoveType.LinearMove:
		IF _MoveCommandParser.stCommand.PositionType = DUT_Command_Positiontype.AbsolutePosition THEN
			_MC_MoveLinearAbsolute.Execute := TRUE;
		ELSE
			_MC_MoveLinearRelative.Execute := TRUE;
		END_IF
	DUT_Command_MoveType.CircularMove:
		IF _MoveCommandParser.stCommand.PositionType = DUT_Command_Positiontype.AbsolutePosition THEN
			_MC_MoveCircularAbsolute.Execute := TRUE;
		ELSE
			_MC_MoveCircularRelative.Execute := TRUE;
		END_IF
END_CASE
//
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Unholding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="09bb9e0c-557b-4db9-8574-c3a1036b476e">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'Move Processor',
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Clearing" ObjectId="2e7feb23-d083-4537-94b3-cdf41be2bdfa">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_GroupPower := FALSE;
_MC_GroupEnable.Execute := FALSE;
_MC_GroupDisable.Execute := FALSE;
_MC_GroupReset.Execute := FALSE;
_MC_GroupReadActualPosition.Enable := FALSE;
_SMC_SetKinConfiguration.Execute := FALSE;
_MC_SetCoordinateTransform.Execute := FALSE;
_SMC_GroupSetTool.Execute := FALSE;
_MC_MoveCircularAbsolute.Execute := FALSE;
_MC_MoveCircularRelative.Execute := FALSE;
_MC_MoveDirectAbsolute.Execute := FALSE;
_MC_MoveDirectRelative.Execute := FALSE;
_MC_MoveLinearAbsolute.Execute := FALSE;
_MC_MoveLinearRelative.Execute := FALSE;
_SequenceMoveCircularAbsolute := 0;
_SequenceMoveCircularRelative := 0;
_SequenceMoveDirectAbsolute := 0;
_SequenceMoveDirectRelative := 0;
_SequenceMoveLinearAbsolute := 0;
_SequenceMoveLinearRelative := 0;
_SequenceSetCoordTrans := 0;

SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Clearing : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK MoveCmdProcessor EXTENDS Module
VAR_INPUT
	Acceleration: LREAL:=1000.0;
	AccFactor: LREAL:=0.5;
	Jerk: LREAL:=1000.0;
	JerkFactor: LREAL:=0.5;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
END_VAR
VAR_OUTPUT
	Position: SMC_POS_REF;
END_VAR
VAR
	_SequenceSetCoordTrans: INT;
	_SequenceMoveCircularAbsolute: INT;
	_SequenceMoveCircularRelative: INT;
	_SequenceMoveDirectAbsolute: INT;
	_SequenceMoveDirectRelative: INT;
	_SequenceMoveLinearAbsolute: INT;
	_SequenceMoveLinearRelative: INT;
	
	_SMC_GroupPower: SMC_GroupPower;
	_GroupPower: BOOL;
	_MC_GroupEnable: MC_GroupEnable;
	_MC_GroupDisable: MC_GroupDisable;
	_MC_GroupReset: MC_GroupReset;
	_MC_GroupHalt: MC_GroupHalt;
	_MC_GroupReadActualPosition: MC_GroupReadActualPosition;
	_SMC_SetKinConfiguration: SMC_SetKinConfiguration;
	
	_MC_MoveCircularAbsolute: MC_MoveCircularAbsolute;
	_MC_MoveCircularRelative: MC_MoveCircularRelative;
	_MC_MoveDirectAbsolute: MC_MoveDirectAbsolute;
	_MC_MoveDirectRelative: MC_MoveDirectRelative;
	_MC_MoveLinearAbsolute: MC_MoveLinearAbsolute;
	_MC_MoveLinearRelative: MC_MoveLinearRelative;
	
	_UnitModeCurrentState: PACK_ML.State;
	_MoveCommandParser: ParseMoveCmd;
	_PosRef: SMC_POS_REF;
	_PosRef2: SMC_POS_REF;
	
    // coordinate transforms
	_MC_SetCoordinateTransform: MC_SetCoordinateTransform;
	_SMC_GroupSetTool: SMC_GroupSetTool;
	_MC_COORD_REF: MC_COORD_REF;
END_VAR
VAR CONSTANT
	_STEP_DONE: 				INT := 1000;
	_STEP_IDLE: 				INT := 0000;
	_STEP_COMMAND: 				INT := 0020;
	_STEP_GROUP_POWER_ON: 		INT := 0022;
	_STEP_WAIT_POWER_ON: 		INT := 0024;
	_STEP_GROUP_ENABLE: 		INT := 0030;
	_STEP_WAIT_ENABLE: 			INT := 0035;
	_STEP_READ_POSITION: 		INT := 0040;
	_STEP_WAIT_POSITION: 		INT := 0050;
	_STEP_SET_KINEMATICS: 		INT := 0060;
	_STEP_WAIT_KINEMATICS: 		INT := 0070;
	_STEP_SET_COORD_TRANS:		INT := 0071;
	_STEP_WAIT_COORD_TRANS:		INT := 0072;
	_STEP_MOVE_TYPE:			INT := 0080;
	_STEP_WAIT_MOVE: 			INT := 0090;
	_STEP_GROUP_DISABLE: 		INT := 0100;
	_STEP_WAIT_DISABLE: 		INT := 0110;
	_STEP_GROUP_POWER_OFF: 		INT := 0120;
	_STEP_ERR: 					INT := 9999;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>8f4275d6-46b8-4b53-89d9-00cb2bff4683</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="VarSetCmdProcessor" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VarSetCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_VarSetCmdParser: ParseVarSetCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VarSetCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_VarSetCmdParser: ParseVarSetCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_VarSetCmdParser">
                      <type>
                        <derived name="ParseVarSetCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VarSetCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_VarSetCmdParser: ParseVarSetCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
    _STEP_DONE:
		SUPER^._SeqMain := _STEP_IDLE;
        
    _STEP_IDLE:
		// hang out here until called to run
		
	_STEP_COMMAND:
        _VarSetCmdParser(Command:=Command);
		IF _VarSetCmdParser.Error THEN
			//
			SUPER^.M_Error(Description:=_VarSetCmdParser.ErrorDescription);
			// next, please
			SUPER^._SeqMain := _STEP_ERR;
			
		ELSE
			//
			IF _VarSetCmdParser.stCommand.ArrayType = DUT_Command_ArrayType.StoredPosition THEN
				SUPER^.StoredPositions[_VarSetCmdParser.stCommand.ArrayIndex].Position := _VarSetCmdParser.stCommand.Coordinates;
			ELSIF _VarSetCmdParser.stCommand.ArrayType = DUT_Command_ArrayType.VisionRegister THEN
				SUPER^.VisionRegisters[_VarSetCmdParser.stCommand.ArrayIndex].Position := _VarSetCmdParser.stCommand.Coordinates;
			ELSIF _VarSetCmdParser.stCommand.ArrayType = DUT_Command_ArrayType.Flag THEN
				// will just let the flag take on the value of X
				SUPER^.Flags[_VarSetCmdParser.stCommand.ArrayIndex].Value := LREAL_TO_BOOL(_VarSetCmdParser.stCommand.Coordinates.X);
			END_IF
			// next, please
			SUPER^._SeqMain := _STEP_DONE;
			
		END_IF

END_CASE</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="68d991e6-dbe4-463a-80e0-5f3da08333d1">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'VarSet Processor', 
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="130f8bcb-8a65-424f-bc15-3fc7e753edde">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="2949ddea-6613-413b-8ae7-28086e6ca171">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="f570903b-8d82-43ce-845d-3b6445cd6365">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK VarSetCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_VarSetCmdParser: ParseVarSetCmd;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>4e6d31f4-1f5e-495c-b2c6-1fabb531ce1d</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="PauseCmdProcessor" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PauseCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	ElapsedTime: TIME;
	RemainingTime: TIME;
END_VAR
VAR
	_Timer: TON;
	_Timer_IN: BOOL;
	_Timer_PT: TIME;
	_Timer_Q: BOOL;
	_Timer_ET: TIME;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParsePauseCmd: ParsePauseCmd;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="ElapsedTime">
                      <type>
                        <TIME />
                      </type>
                    </variable>
                    <variable name="RemainingTime">
                      <type>
                        <TIME />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PauseCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	ElapsedTime: TIME;
	RemainingTime: TIME;
END_VAR
VAR
	_Timer: TON;
	_Timer_IN: BOOL;
	_Timer_PT: TIME;
	_Timer_Q: BOOL;
	_Timer_ET: TIME;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParsePauseCmd: ParsePauseCmd;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_Timer">
                      <type>
                        <derived name="TON" />
                      </type>
                    </variable>
                    <variable name="_Timer_IN">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Timer_PT">
                      <type>
                        <TIME />
                      </type>
                    </variable>
                    <variable name="_Timer_Q">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="_Timer_ET">
                      <type>
                        <TIME />
                      </type>
                    </variable>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_ParsePauseCmd">
                      <type>
                        <derived name="ParsePauseCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PauseCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	ElapsedTime: TIME;
	RemainingTime: TIME;
END_VAR
VAR
	_Timer: TON;
	_Timer_IN: BOOL;
	_Timer_PT: TIME;
	_Timer_Q: BOOL;
	_Timer_ET: TIME;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParsePauseCmd: ParsePauseCmd;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_TWO">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PauseCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	ElapsedTime: TIME;
	RemainingTime: TIME;
END_VAR
VAR
	_Timer: TON;
	_Timer_IN: BOOL;
	_Timer_PT: TIME;
	_Timer_Q: BOOL;
	_Timer_ET: TIME;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParsePauseCmd: ParsePauseCmd;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
	
    _STEP_DONE:
 		_Timer_IN := FALSE;
		SUPER^._SeqMain := _STEP_IDLE;
        
    _STEP_IDLE:
		// hang out here until called to run
        
    _STEP_COMMAND:
		_ParsePauseCmd(Command:=Command);
		_Timer_PT := _ParsePauseCmd.stCommand.PauseTime;
 		_Timer_IN := TRUE;
		// next, please
		SUPER^._SeqMain := _STEP_TWO;
		
	_STEP_TWO:
		IF _Timer.Q THEN
			// next, please
			SUPER^._SeqMain := _STEP_DONE;
		END_IF

END_CASE

_Timer(
	IN:= _Timer_IN, 
	PT:= _Timer_PT, 
	Q=&gt; _Timer_Q, 
	ET=&gt; _Timer_ET);
	
ElapsedTime := _Timer_ET;
RemainingTime := _Timer_PT - _Timer_ET;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="6e516751-a0ab-433e-9a68-8b911bf9a0fe">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'Pause Processor',
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="2e5db4a5-a489-4506-8ef9-c0b206420609">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="25f52b0f-f9c8-4c07-856d-4168885b692d">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqResetting OF
	0:
		_Timer_IN := FALSE;
		_SeqResetting := _SeqResetting + 1;
	1:
		IF NOT _Timer_IN THEN
			SUPER^.M_StateComplete();
			_SeqResetting := 0;
		END_IF
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="3817a097-cfb2-4856-abd1-75f36cc5363a">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="c161e731-b469-46d9-a74c-2490c081ccd5">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PauseCmdProcessor EXTENDS Module
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
	ElapsedTime: TIME;
	RemainingTime: TIME;
END_VAR
VAR
	_Timer: TON;
	_Timer_IN: BOOL;
	_Timer_PT: TIME;
	_Timer_Q: BOOL;
	_Timer_ET: TIME;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParsePauseCmd: ParsePauseCmd;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>761241d9-a41a-4641-86b9-9b083b6be68b</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="OutputCmdProcessor" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Enable">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OutputCmdProcessor EXTENDS Module
VAR_INPUT
	Enable: BOOL;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
	Outputs: ARRAY [GVL.DIG_OUT_ARR_BEG..GVL.DIG_OUT_ARR_END] OF BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// servo 1
	_Servo1_Execute: BOOL;
	_Servo1_Speed: LREAL := 360;
	_Servo1_Position: LREAL := 0;
	_Servo1_MC_Power: MC_Power;
	_Servo1_MC_Halt: MC_Halt;
	_Servo1_MC_MoveAbsolute: MC_MoveAbsolute;
	
	// servo 2
	_Servo2_Execute: BOOL;
	_Servo2_Speed: LREAL := 360;
	_Servo2_Position: LREAL := 0;
	_Servo2_MC_Power: MC_Power;
	_Servo2_MC_Halt: MC_Halt;
	_Servo2_MC_MoveAbsolute: MC_MoveAbsolute;
END_VAR
VAR
	_RunRtrig: R_TRIG;
	_SequenceDigital: INT;
	_SequenceAnalog: INT;
	_SequenceServo: INT;
	
	_UnitModeCurrentState: PACK_ML.State;
	_OutputCommandParser: ParseOutputCmd;
	_OutputType: DUT_OutputType;
	_OutputTarget: INT;
	_OutputValue1, _OutputValue2: LREAL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <inOutVars>
                    <variable name="Servo1">
                      <type>
                        <derived name="AXIS_REF_SM3" />
                      </type>
                    </variable>
                    <variable name="Servo2">
                      <type>
                        <derived name="AXIS_REF_SM3" />
                      </type>
                    </variable>
                    <variable name="Outputs">
                      <type>
                        <array>
                          <dimension lower="GVL.DIG_OUT_ARR_BEG" upper="GVL.DIG_OUT_ARR_END" />
                          <baseType>
                            <BOOL />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OutputCmdProcessor EXTENDS Module
VAR_INPUT
	Enable: BOOL;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
	Outputs: ARRAY [GVL.DIG_OUT_ARR_BEG..GVL.DIG_OUT_ARR_END] OF BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// servo 1
	_Servo1_Execute: BOOL;
	_Servo1_Speed: LREAL := 360;
	_Servo1_Position: LREAL := 0;
	_Servo1_MC_Power: MC_Power;
	_Servo1_MC_Halt: MC_Halt;
	_Servo1_MC_MoveAbsolute: MC_MoveAbsolute;
	
	// servo 2
	_Servo2_Execute: BOOL;
	_Servo2_Speed: LREAL := 360;
	_Servo2_Position: LREAL := 0;
	_Servo2_MC_Power: MC_Power;
	_Servo2_MC_Halt: MC_Halt;
	_Servo2_MC_MoveAbsolute: MC_MoveAbsolute;
END_VAR
VAR
	_RunRtrig: R_TRIG;
	_SequenceDigital: INT;
	_SequenceAnalog: INT;
	_SequenceServo: INT;
	
	_UnitModeCurrentState: PACK_ML.State;
	_OutputCommandParser: ParseOutputCmd;
	_OutputType: DUT_OutputType;
	_OutputTarget: INT;
	_OutputValue1, _OutputValue2: LREAL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <localVars>
                    <variable name="_Servo1_Execute">
                      <type>
                        <BOOL />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> servo 1</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_Servo1_Speed">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="360" />
                      </initialValue>
                    </variable>
                    <variable name="_Servo1_Position">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_Servo1_MC_Power">
                      <type>
                        <derived name="MC_Power" />
                      </type>
                    </variable>
                    <variable name="_Servo1_MC_Halt">
                      <type>
                        <derived name="MC_Halt" />
                      </type>
                    </variable>
                    <variable name="_Servo1_MC_MoveAbsolute">
                      <type>
                        <derived name="MC_MoveAbsolute" />
                      </type>
                    </variable>
                    <variable name="_Servo2_Execute">
                      <type>
                        <BOOL />
                      </type>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> servo 2</xhtml>
                      </documentation>
                    </variable>
                    <variable name="_Servo2_Speed">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="360" />
                      </initialValue>
                    </variable>
                    <variable name="_Servo2_Position">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_Servo2_MC_Power">
                      <type>
                        <derived name="MC_Power" />
                      </type>
                    </variable>
                    <variable name="_Servo2_MC_Halt">
                      <type>
                        <derived name="MC_Halt" />
                      </type>
                    </variable>
                    <variable name="_Servo2_MC_MoveAbsolute">
                      <type>
                        <derived name="MC_MoveAbsolute" />
                      </type>
                    </variable>
                    <variable name="_RunRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <variable name="_SequenceDigital">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceAnalog">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SequenceServo">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_OutputCommandParser">
                      <type>
                        <derived name="ParseOutputCmd" />
                      </type>
                    </variable>
                    <variable name="_OutputType">
                      <type>
                        <derived name="DUT_OutputType" />
                      </type>
                    </variable>
                    <variable name="_OutputTarget">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_OutputValue1">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <variable name="_OutputValue2">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OutputCmdProcessor EXTENDS Module
VAR_INPUT
	Enable: BOOL;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
	Outputs: ARRAY [GVL.DIG_OUT_ARR_BEG..GVL.DIG_OUT_ARR_END] OF BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// servo 1
	_Servo1_Execute: BOOL;
	_Servo1_Speed: LREAL := 360;
	_Servo1_Position: LREAL := 0;
	_Servo1_MC_Power: MC_Power;
	_Servo1_MC_Halt: MC_Halt;
	_Servo1_MC_MoveAbsolute: MC_MoveAbsolute;
	
	// servo 2
	_Servo2_Execute: BOOL;
	_Servo2_Speed: LREAL := 360;
	_Servo2_Position: LREAL := 0;
	_Servo2_MC_Power: MC_Power;
	_Servo2_MC_Halt: MC_Halt;
	_Servo2_MC_MoveAbsolute: MC_MoveAbsolute;
END_VAR
VAR
	_RunRtrig: R_TRIG;
	_SequenceDigital: INT;
	_SequenceAnalog: INT;
	_SequenceServo: INT;
	
	_UnitModeCurrentState: PACK_ML.State;
	_OutputCommandParser: ParseOutputCmd;
	_OutputType: DUT_OutputType;
	_OutputTarget: INT;
	_OutputValue1, _OutputValue2: LREAL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_TWO">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OutputCmdProcessor EXTENDS Module
VAR_INPUT
	Enable: BOOL;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
	Outputs: ARRAY [GVL.DIG_OUT_ARR_BEG..GVL.DIG_OUT_ARR_END] OF BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// servo 1
	_Servo1_Execute: BOOL;
	_Servo1_Speed: LREAL := 360;
	_Servo1_Position: LREAL := 0;
	_Servo1_MC_Power: MC_Power;
	_Servo1_MC_Halt: MC_Halt;
	_Servo1_MC_MoveAbsolute: MC_MoveAbsolute;
	
	// servo 2
	_Servo2_Execute: BOOL;
	_Servo2_Speed: LREAL := 360;
	_Servo2_Position: LREAL := 0;
	_Servo2_MC_Power: MC_Power;
	_Servo2_MC_Halt: MC_Halt;
	_Servo2_MC_MoveAbsolute: MC_MoveAbsolute;
END_VAR
VAR
	_RunRtrig: R_TRIG;
	_SequenceDigital: INT;
	_SequenceAnalog: INT;
	_SequenceServo: INT;
	
	_UnitModeCurrentState: PACK_ML.State;
	_OutputCommandParser: ParseOutputCmd;
	_OutputType: DUT_OutputType;
	_OutputTarget: INT;
	_OutputValue1, _OutputValue2: LREAL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
	
    _STEP_DONE:
		SUPER^._SeqMain := _STEP_IDLE;
        
    _STEP_IDLE:
        // hang out here untill called to run
		
    _STEP_COMMAND:
		_OutputCommandParser(Command:=Command);
		IF _OutputCommandParser.Error THEN
			SUPER^.M_Error(Description:=_OutputCommandParser.ErrorDescription);
			SUPER^._SeqMain := _STEP_ERR;
		ELSE
			_OutputType := _OutputCommandParser.stCommand.OutputType;
			_OutputTarget := _OutputCommandParser.stCommand.OutputTarget;
			_OutputValue1 := _OutputCommandParser.stCommand.OutputValue1;
			_OutputValue2 := _OutputCommandParser.stCommand.OutputValue2;
			
			CASE _OutputType OF
				DUT_OutputType.Digital: //
					_SequenceDigital := 1;
					SUPER^._SeqMain := _STEP_TWO;
				DUT_OutputType.Analog: //
					_SequenceAnalog := 1;
					SUPER^._SeqMain := _STEP_TWO;
				DUT_OutputType.Servo: //
					_SequenceServo := 1;
					SUPER^._SeqMain := _STEP_TWO;
			ELSE
				SUPER^._SeqMain := _STEP_DONE;
				
			END_CASE
		END_IF
		
	_STEP_TWO:
		IF _SequenceDigital = 0 
			AND _SequenceAnalog = 0
			AND _SequenceServo = 0 THEN
				// next, please
				SUPER^._SeqMain := _STEP_DONE;
		END_IF;

END_CASE

CASE _SequenceDigital OF
	0: //
	1: //
		THIS^.Outputs[_OutputTarget] := _OutputValue1 &gt; 0;
		_SequenceDigital := 0;
END_CASE

CASE _SequenceAnalog OF
	0: //
	1: //
		CASE _OutputTarget OF
			0: //
				// set analog value here
				// i got nothing right now
				_SequenceAnalog := 0;
		END_CASE
	2: //
END_CASE

CASE _SequenceServo OF
	0: //
	1: //
		CASE _OutputTarget OF
			0: //
				_SequenceServo := 0;
			1: //
				_Servo1_Execute := TRUE;
				_Servo1_Position := _OutputValue1;
				_Servo1_Speed := _OutputValue2;
				_SequenceServo := 2;
			2: //
				_Servo2_Execute := TRUE;
				_Servo2_Position := _OutputValue1;
				_Servo2_Speed := _OutputValue2;
				_SequenceServo := 2;
		END_CASE
	2: //
		IF (_Servo1_Execute AND _Servo1_MC_MoveAbsolute.Done)
			OR (_Servo2_Execute AND _Servo2_MC_MoveAbsolute.Done) THEN
			_SequenceServo := 0;
			
		ELSIF _Servo1_MC_Power.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Output Servo Command Error: ',
											CONCAT(TO_STRING(_Servo1_MC_Power.ErrorID),
											CONCAT(' ', SMC_ErrorString(_Servo1_MC_Power.ErrorID,
														SMC_Language_Type.english)))));
			_SequenceServo := 3;
														
		ELSIF _Servo1_MC_MoveAbsolute.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Output Servo Command Error: ',
											CONCAT(TO_STRING(_Servo1_MC_MoveAbsolute.ErrorID),
											CONCAT(' ', SMC_ErrorString(_Servo1_MC_MoveAbsolute.ErrorID,
														SMC_Language_Type.english)))));
			_SequenceServo := 3;
														
		ELSIF _Servo2_MC_Power.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Output Servo Command Error: ',
											CONCAT(TO_STRING(_Servo2_MC_Power.ErrorID),
											CONCAT(' ', SMC_ErrorString(_Servo2_MC_Power.ErrorID,
														SMC_Language_Type.english)))));
			_SequenceServo := 3;
														
		ELSIF _Servo1_MC_MoveAbsolute.Error THEN
			SUPER^.M_Error(Description:=CONCAT('Output Servo Command Error: ',
											CONCAT(TO_STRING(_Servo1_MC_MoveAbsolute.ErrorID),
											CONCAT(' ', SMC_ErrorString(_Servo1_MC_MoveAbsolute.ErrorID,
														SMC_Language_Type.english)))));
			_SequenceServo := 3;
		END_IF
END_CASE

// servo 1
_Servo1_MC_Power(
	Axis:= Servo1, 
	Enable:= Enable, 
	bRegulatorOn:= Enable, 
	bDriveStart:= Enable, 
	Status=&gt; , 
	bRegulatorRealState=&gt; , 
	bDriveStartRealState=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
	
_Servo1_MC_MoveAbsolute(
	Axis:= Servo1, 
	Execute:= _Servo1_Execute, 
	Position:= _Servo1_Position, 
	Velocity:= _Servo1_Speed, 
	Acceleration:= 1000, 
	Deceleration:= 1000, 
	Jerk:= 1000, 
	Direction:= , 
	BufferMode:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
	
_Servo1_MC_Halt(
	Axis:= Servo1, 
	Execute:= , 
	Deceleration:= 1000, 
	Jerk:= 1000, 
	Done=&gt; , 
	Busy=&gt; , 
	CommandAborted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

// servo 2
_Servo2_MC_Power(
	Axis:= Servo2, 
	Enable:= Enable, 
	bRegulatorOn:= Enable, 
	bDriveStart:= Enable, 
	Status=&gt; , 
	bRegulatorRealState=&gt; , 
	bDriveStartRealState=&gt; , 
	Busy=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
	
_Servo2_MC_MoveAbsolute(
	Axis:= Servo2, 
	Execute:= _Servo2_Execute, 
	Position:= _Servo2_Position, 
	Velocity:= _Servo2_Speed, 
	Acceleration:= 1000, 
	Deceleration:= 1000, 
	Jerk:= 1000, 
	Direction:= , 
	BufferMode:= , 
	Done=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	CommandAborted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );
	
_Servo2_MC_Halt(
	Axis:= Servo2, 
	Execute:= , 
	Deceleration:= 1000, 
	Jerk:= 1000, 
	Done=&gt; , 
	Busy=&gt; , 
	CommandAborted=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="fed562a2-eddf-4e93-afb0-ae3624ddf3de">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'Output Processor',
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="83e31000-e404-406b-a9f0-af2b8e43e2b9">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqResetting OF
	0:
		_Servo1_Execute := FALSE;
		_Servo2_Execute := FALSE;
		_SeqResetting := _SeqResetting + 1;
	1:
		IF NOT _Servo1_MC_MoveAbsolute.Busy 
			AND NOT _Servo2_MC_MoveAbsolute.Busy  THEN
				SUPER^.M_StateComplete();
				_SeqResetting := 0;
		END_IF
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="1d97f92f-5146-4d3a-b260-50bb7a3971f7">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="88023030-83e7-4c3a-848e-230ca2d5e812">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Holding" ObjectId="6bd03b4f-d8eb-4211-abab-f0512818ab61">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqHolding OF
	0:
		_Servo1_Execute := FALSE;
		_Servo2_Execute := FALSE;
		_Servo1_MC_Halt.Execute := TRUE;
		_Servo2_MC_Halt.Execute := TRUE;
		SUPER^._SeqHolding := SUPER^._SeqHolding + 1;
	1:
		IF _Servo1_MC_Halt.Done AND _Servo2_MC_Halt.Done THEN
			_Servo1_MC_Halt.Execute := FALSE;
			_Servo2_MC_Halt.Execute := FALSE;
			SUPER^.M_StateComplete();
			SUPER^._SeqHolding := 0;
		END_IF
		
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Holding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Idle" ObjectId="f42bff08-3d3c-4f17-bbd4-541074d9df17">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Servo1_Execute := FALSE;
_Servo2_Execute := FALSE;
_Servo1_MC_Halt.Execute := FALSE;
_Servo2_MC_Halt.Execute := FALSE;
_SequenceDigital := 0;
_SequenceAnalog := 0;
_SequenceServo := 0;
SUPER^._SeqMain := 0;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Idle : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_UnHolding" ObjectId="10531d76-a1e4-42ba-a26f-88c13c76bd1e">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">//
_Servo1_MC_Halt.Execute := FALSE;
_Servo2_MC_Halt.Execute := FALSE;

//
SUPER^._SeqMain := _STEP_COMMAND;

//
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Unholding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Aborting" ObjectId="fc1f966e-206a-402e-8b05-6358a2c60ff4">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqAborting OF
	0:
		_Servo1_Execute := FALSE;
		_Servo2_Execute := FALSE;
		SUPER^._SeqAborting := SUPER^._SeqAborting + 1;
	1:
		IF NOT _Servo1_MC_MoveAbsolute.Busy 
			AND NOT _Servo2_MC_MoveAbsolute.Busy  THEN
				SUPER^.M_StateComplete();
				SUPER^._SeqAborting := 0;
		END_IF
		
END_CASE
</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Aborting : BOOL</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Clearing" ObjectId="368dc781-45d7-4e24-9a5e-8a9a04872ec6">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_Servo1_Execute := FALSE;
_Servo2_Execute := FALSE;
_Servo1_MC_Halt.Execute := FALSE;
_Servo2_MC_Halt.Execute := FALSE;
_SequenceDigital := 0;
_SequenceAnalog := 0;
_SequenceServo := 0;

SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Clearing : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="843305da-b984-4520-8555-133899b9f165">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK OutputCmdProcessor EXTENDS Module
VAR_INPUT
	Enable: BOOL;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	Servo1: AXIS_REF_SM3;
	Servo2: AXIS_REF_SM3;
	Outputs: ARRAY [GVL.DIG_OUT_ARR_BEG..GVL.DIG_OUT_ARR_END] OF BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// servo 1
	_Servo1_Execute: BOOL;
	_Servo1_Speed: LREAL := 360;
	_Servo1_Position: LREAL := 0;
	_Servo1_MC_Power: MC_Power;
	_Servo1_MC_Halt: MC_Halt;
	_Servo1_MC_MoveAbsolute: MC_MoveAbsolute;
	
	// servo 2
	_Servo2_Execute: BOOL;
	_Servo2_Speed: LREAL := 360;
	_Servo2_Position: LREAL := 0;
	_Servo2_MC_Power: MC_Power;
	_Servo2_MC_Halt: MC_Halt;
	_Servo2_MC_MoveAbsolute: MC_MoveAbsolute;
END_VAR
VAR
	_RunRtrig: R_TRIG;
	_SequenceDigital: INT;
	_SequenceAnalog: INT;
	_SequenceServo: INT;
	
	_UnitModeCurrentState: PACK_ML.State;
	_OutputCommandParser: ParseOutputCmd;
	_OutputType: DUT_OutputType;
	_OutputTarget: INT;
	_OutputValue1, _OutputValue2: LREAL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_TWO: 			INT := 0020;
	_STEP_ERR: 			INT := 0030;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>6372490f-9396-4f98-b458-51631931ad07</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="PackML" pouType="functionBlock">
                <interface>
                  <outputVars>
                    <variable name="IUnitMode">
                      <type>
                        <derived name="PACK_ML.IUnitMode" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PackML
VAR_INPUT
END_VAR
VAR_OUTPUT
	IUnitMode: PACK_ML.IUnitMode;
END_VAR
VAR
	_UnitMode: PACK_ML.UnitMode;
	_StateTimer: TON;
	_PackMLFirstScan: BOOL:=TRUE;
	_SeqMain, _SeqAborting, _SeqClearing, _SeqCompleting, _SeqHolding, _SeqResetting,
	_SeqStarting, _SeqStopping, _SeqSuspending, _SeqUnholding, _SeqUnSuspending: INT;
END_VAR
VAR CONSTANT
	STATE_TIME: TIME := T#0MS;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_UnitMode">
                      <type>
                        <derived name="PACK_ML.UnitMode" />
                      </type>
                    </variable>
                    <variable name="_StateTimer">
                      <type>
                        <derived name="TON" />
                      </type>
                    </variable>
                    <variable name="_PackMLFirstScan">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="TRUE" />
                      </initialValue>
                    </variable>
                    <variable name="_SeqMain">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqAborting">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqClearing">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqCompleting">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqHolding">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqResetting">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqStarting">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqStopping">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqSuspending">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqUnholding">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_SeqUnSuspending">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PackML
VAR_INPUT
END_VAR
VAR_OUTPUT
	IUnitMode: PACK_ML.IUnitMode;
END_VAR
VAR
	_UnitMode: PACK_ML.UnitMode;
	_StateTimer: TON;
	_PackMLFirstScan: BOOL:=TRUE;
	_SeqMain, _SeqAborting, _SeqClearing, _SeqCompleting, _SeqHolding, _SeqResetting,
	_SeqStarting, _SeqStopping, _SeqSuspending, _SeqUnholding, _SeqUnSuspending: INT;
END_VAR
VAR CONSTANT
	STATE_TIME: TIME := T#0MS;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="STATE_TIME">
                      <type>
                        <TIME />
                      </type>
                      <initialValue>
                        <simpleValue value="TIME#0ms" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PackML
VAR_INPUT
END_VAR
VAR_OUTPUT
	IUnitMode: PACK_ML.IUnitMode;
END_VAR
VAR
	_UnitMode: PACK_ML.UnitMode;
	_StateTimer: TON;
	_PackMLFirstScan: BOOL:=TRUE;
	_SeqMain, _SeqAborting, _SeqClearing, _SeqCompleting, _SeqHolding, _SeqResetting,
	_SeqStarting, _SeqStopping, _SeqSuspending, _SeqUnholding, _SeqUnSuspending: INT;
END_VAR
VAR CONSTANT
	STATE_TIME: TIME := T#0MS;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">//
IF _PackMLFirstScan THEN
	_PackMLFirstScan := FALSE;
	M_SetPackMl();
	IUnitMode := _UnitMode;
END_IF

//
_StateTimer(PT:=STATE_TIME);

//
CASE _UnitMode.CurrentState OF
	PACK_ML.State.Stopped:
		M_Stopped();
	PACK_ML.State.Aborted:
		M_Aborted();
	PACK_ML.State.Held:
		M_Held();
	PACK_ML.State.Suspended:
		M_Suspended();
	PACK_ML.State.Complete:
		M_Complete();
	PACK_ML.State.Idle:
		M_Idle();
	PACK_ML.State.Resetting:
		M_Resetting();
	PACK_ML.State.Starting:
		M_Starting();
	PACK_ML.State.Execute:
		M_Execute();
	PACK_ML.State.Suspending:
		M_Suspending();
	PACK_ML.State.UnSuspending:
		M_UnSuspending();
	PACK_ML.State.Holding:
		M_Holding();
	PACK_ML.State.UnHolding:
		M_UnHolding();
	PACK_ML.State.Completing:
		M_Completing();
	PACK_ML.State.Aborting:
		M_Aborting();
	PACK_ML.State.Stopping:
		M_Stopping();
	PACK_ML.State.Clearing:
		M_Clearing();
END_CASE</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Aborting" ObjectId="4ccdaadd-4d64-4496-9a92-f9d54027b3e6">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Aborting : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Unholding" ObjectId="dd9db8d0-121c-491d-90d0-c48a6d1a9c8c">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Unholding : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Aborted" ObjectId="1e7d8b79-5c9e-4f82-bbe2-4b62642b61c9">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_SeqMain := 0;
_SeqAborting := 0;
_SeqClearing := 0;
_SeqCompleting := 0;
_SeqHolding := 0;
_SeqResetting := 0;
_SeqStarting := 0;
_SeqStopping := 0;
_SeqSuspending := 0;
_SeqUnholding := 0;
_SeqUnSuspending := 0;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Aborted : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Held" ObjectId="e494ada4-57c2-4376-ac70-cda2694b60af">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">(*_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Held : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Completing" ObjectId="cdb4b4d5-ad61-48d7-8221-bee63d28f73e">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Completing : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Stopping" ObjectId="2a358bb2-c1f6-4a20-a8a4-b1f9186be16b">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Stopping : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Clearing" ObjectId="d14434d0-0c21-4aeb-9ac0-ef015f60a253">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Clearing : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Stopped" ObjectId="9d740f8a-4f3e-49bb-91d2-33529475924d">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">(*_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Stopped : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="39ef47a6-266e-47c8-9b77-da56debc7f4c">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_UnitMode(sName := 'Normal Operation', 
			dwSupportedStates := PACK_ML.State.All,
			dwAllowsLeavingFromStates := PACK_ML.State.Stopped 
											OR PACK_ML.State.Aborted 
											OR PACK_ML.State.Idle, 
			dwAllowsEnteringIntoStates := PACK_ML.State.Stopped
											OR PACK_ML.State.Aborted 
											OR PACK_ML.State.Idle, 
			eInitialState := PACK_ML.State.Idle,
			xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="a8d6ce7e-80d8-47c9-bc1d-450f6d3deda6">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">(*_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="265b97c8-7d33-479a-a049-5413df07bbc0">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Suspended" ObjectId="612d50dc-ee92-4ff0-ae48-fb8d6eb3faaa">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">(*_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Suspended : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_StateComplete" ObjectId="92d33e74-f074-4855-bfb9-ab287dcecae4">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_UnitMode.ActingStateCompleted();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_StateComplete : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Suspending" ObjectId="257ce55a-16e1-49a8-a988-70ddadfd556f">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Suspending : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Idle" ObjectId="f7cfba5a-2f6d-4bb5-a7c7-24bbbea33671">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">(*_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF*)</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Idle : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="a57fa019-c6bc-4a1b-8d70-a7fd715b2a98">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="6b6aa070-27a5-40ba-b87d-289ef11ff0ed">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_UnSuspending" ObjectId="92d160d6-e55f-49b6-aa9a-db1194f2c385">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_UnSuspending : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Holding" ObjectId="d0d2c3a0-c22e-4c6e-a69f-299695504931">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_StateTimer.IN:=TRUE;

IF _StateTimer.Q THEN
	_StateTimer.IN:=FALSE;
	M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Holding : BOOL
VAR_INPUT
END_VAR
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PackML
VAR_INPUT
END_VAR
VAR_OUTPUT
	IUnitMode: PACK_ML.IUnitMode;
END_VAR
VAR
	_UnitMode: PACK_ML.UnitMode;
	_StateTimer: TON;
	_PackMLFirstScan: BOOL:=TRUE;
	_SeqMain, _SeqAborting, _SeqClearing, _SeqCompleting, _SeqHolding, _SeqResetting,
	_SeqStarting, _SeqStopping, _SeqSuspending, _SeqUnholding, _SeqUnSuspending: INT;
END_VAR
VAR CONSTANT
	STATE_TIME: TIME := T#0MS;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>6c88eb42-407a-40dd-8e49-bce1d691f0b2</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="CncCmdProcessor" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="GapVelocity">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="AvoidGaps">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="TRUE" />
                      </initialValue>
                    </variable>
                    <variable name="GapAccel">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="500.0" />
                      </initialValue>
                    </variable>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <inOutVars>
                    <variable name="AxisGroup">
                      <type>
                        <derived name="AXIS_GROUP_REF_SM3" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J1">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J2">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J3">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J4">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J5">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <variable name="SM3_Drive_PosControl_J6">
                      <type>
                        <derived name="SM3_Drive_PosControl.AXIS_REF_POSCONTROL" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <localVars>
                    <variable name="_SMC_TrafoConfig_ArticulatedRobot_6DOF">
                      <type>
                        <derived name="SMC_TrafoConfig_ArticulatedRobot_6DOF" />
                      </type>
                    </variable>
                    <variable name="_SMC_Trafo_ArticulatedRobot_6DOF">
                      <type>
                        <derived name="SMC_Trafo_ArticulatedRobot_6DOF" />
                      </type>
                    </variable>
                    <variable name="_SMC_Trafof_ArticulatedRobot_6DOF">
                      <type>
                        <derived name="SMC_Trafof_ArticulatedRobot_6DOF" />
                      </type>
                    </variable>
                    <variable name="_SMC_ControlAxisByPos_J1">
                      <type>
                        <derived name="SMC_ControlAxisByPos" />
                      </type>
                    </variable>
                    <variable name="_SMC_ControlAxisByPos_J2">
                      <type>
                        <derived name="SMC_ControlAxisByPos" />
                      </type>
                    </variable>
                    <variable name="_SMC_ControlAxisByPos_J3">
                      <type>
                        <derived name="SMC_ControlAxisByPos" />
                      </type>
                    </variable>
                    <variable name="_SMC_ControlAxisByPos_J4">
                      <type>
                        <derived name="SMC_ControlAxisByPos" />
                      </type>
                    </variable>
                    <variable name="_SMC_ControlAxisByPos_J5">
                      <type>
                        <derived name="SMC_ControlAxisByPos" />
                      </type>
                    </variable>
                    <variable name="_SMC_ControlAxisByPos_J6">
                      <type>
                        <derived name="SMC_ControlAxisByPos" />
                      </type>
                    </variable>
                    <variable name="_SMC_Interpolator">
                      <type>
                        <derived name="SMC_Interpolator" />
                      </type>
                    </variable>
                    <variable name="_PlanPath">
                      <type>
                        <derived name="CncPathPlanner" />
                      </type>
                    </variable>
                    <variable name="_ErrorRtrig">
                      <type>
                        <derived name="R_TRIG" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="wVarCount">
                      <type>
                        <WORD />
                      </type>
                      <initialValue>
                        <simpleValue value="1" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars>
                    <variable name="lrR1">
                      <type>
                        <LREAL />
                      </type>
                      <initialValue>
                        <simpleValue value="30" />
                      </initialValue>
                    </variable>
                    <variable name="astVar">
                      <type>
                        <array>
                          <dimension lower="0" upper="wVarCount" />
                          <baseType>
                            <derived name="SMC_SingleVar" />
                          </baseType>
                        </array>
                      </type>
                      <initialValue>
                        <arrayValue>
                          <value>
                            <structValue>
                              <value member="strVarName">
                                <simpleValue value="'R1'" />
                              </value>
                              <value member="pAdr">
                                <simpleValue value="ADR(lrR1)" />
                              </value>
                              <value member="eVarType">
                                <simpleValue value="SMC_VarType.SMC_TYPE_LREAL" />
                              </value>
                            </structValue>
                          </value>
                        </arrayValue>
                      </initialValue>
                    </variable>
                    <variable name="stVarList">
                      <type>
                        <derived name="SMC_VarList" />
                      </type>
                      <initialValue>
                        <structValue>
                          <value member="wNumberVars">
                            <simpleValue value="wVarCount" />
                          </value>
                          <value member="psvVarlist">
                            <simpleValue value="ADR(astVar)" />
                          </value>
                        </structValue>
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_CncCmdParser">
                      <type>
                        <derived name="ParseCncCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// NOTE currently the settings for J6 invert direction under scaling/mapping contradict using motion control 
// libraries and CNC. For CNC to work properly, the setting is required to be enabled (inverted). Additionally
// the homing direction and position will need to be negated. This all requires a full download. Will be leaving 
// setting disabled for now so that we can continue to use motion control. 
//
// to recap, take these steps if you would like to try out CNC:
// 1. open the axis pool settings and under the scaling/mapping section enable 'invert direction'
// 2. in the A_Homing POU, change the homing direction to positive.
// 3. in _00_MAIN POU, under FirstScan set the initial home offset to a positive value (keep the value and just change the sign).
// 4. do a full download.
// 5. go online and set the persistent value (if previously initialized in FirstScan) to a positive value.
//
// UPDATE: Figured out a work around for this issue. In the A_Interpolater POU, I negated the set position in the ControlAxisByPos
// function block for J6 such that it drives the opposite way. This appears to have resolved the issue. Why this is needed, I do not
// know. I am sure it is some minor overlooked detail somewhere in the code...

SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
    _STEP_DONE:
		_SMC_Interpolator.bExecute := FALSE;
		SUPER^._SeqMain := _STEP_IDLE;
        
    _STEP_IDLE:
		// hang out here until called to start
	
	_STEP_COMMAND:
		//
		_CncCmdParser(Command:=Command);	
		_PlanPath.M_SetOriConvention(OriConvention:=_CncCmdParser.stCommand.OriConvention);
		_PlanPath.M_SetStartPosition(StartPos:=_CncCmdParser.stCommand.StartPos);
		_PlanPath.M_Execute(Filename:=_CncCmdParser.stCommand.Filename); // TODO I think we should be careful here. May need to sync CheckVelocities with the Interpolator
		
		//
		IF NOT _CncCmdParser.Error THEN
			_SMC_Interpolator.bExecute := TRUE;
			SUPER^._SeqMain := _STEP_ONE;
		ELSE
			SUPER^.M_Error(Description:=CONCAT('Command parsing error: ',_CncCmdParser.ErrorDescription));
		END_IF
        
    _STEP_ONE:
		IF NOT _SMC_Interpolator.bBusy AND NOT SUPER^.Error THEN
			// next, please
			SUPER^._SeqMain := _STEP_DONE;
		END_IF

END_CASE

// TODO these should reference INOUT AxisGroup but somehow wont compile like that. 
// using global scoped vars for now
_SMC_TrafoConfig_ArticulatedRobot_6DOF.a1:=ArfBotAxisGroup.Trafo.a1;//AxisGroup.Trafo.a1;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.a2:=ArfBotAxisGroup.Trafo.a2;//AxisGroup.Trafo.a2;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.a3:=ArfBotAxisGroup.Trafo.a3;//AxisGroup.Trafo.a3;
// conflicting documentation on if d1 needs to be pos or neg. only works as negative otherwise trafo reports invalid configuration
// https://product-help.schneider-electric.com/Machine%20Expert/V2.0/zh/codesys_softmotion/codesys_softmotion/modules/_sm_trafo_pou_six_dof_robot.html
// https://forge.codesys.com/forge/talk/Motion/thread/16e1f0327f/
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d1:=-ArfBotAxisGroup.Trafo.d1;//-AxisGroup.Trafo.d1;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d3:=ArfBotAxisGroup.Trafo.d3;//AxisGroup.Trafo.d3;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d4:=ArfBotAxisGroup.Trafo.d4;//AxisGroup.Trafo.d4;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.d6:=ArfBotAxisGroup.Trafo.d6;//AxisGroup.Trafo.d6;
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q3_max_deg:=160; // TODO put magic numbers somewhere appropriate
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q3_min_deg:=-160; // TODO put magic numbers somewhere appropriate
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q5_max_deg:=160; // TODO put magic numbers somewhere appropriate
_SMC_TrafoConfig_ArticulatedRobot_6DOF.q5_min_deg:=-160; // TODO put magic numbers somewhere appropriate


// TODO figure out how this var list can be used. for now its just hello world
_PlanPath(VarList:= stVarList, DataOut=&gt; );

_SMC_Interpolator.bEmergency_Stop := _SMC_ControlAxisByPos_J1.bError OR _SMC_ControlAxisByPos_J1.bStopIpo
									OR _SMC_ControlAxisByPos_J2.bError OR _SMC_ControlAxisByPos_J2.bStopIpo
									OR _SMC_ControlAxisByPos_J3.bError OR _SMC_ControlAxisByPos_J3.bStopIpo
									OR _SMC_ControlAxisByPos_J4.bError OR _SMC_ControlAxisByPos_J4.bStopIpo
									OR _SMC_ControlAxisByPos_J5.bError OR _SMC_ControlAxisByPos_J5.bStopIpo
									OR _SMC_ControlAxisByPos_J6.bError OR _SMC_ControlAxisByPos_J6.bStopIpo;

_SMC_Interpolator(
	bExecute:= , 
	poqDataIn:= _PlanPath.DataOut, 
	bSlow_Stop:= , 
	bEmergency_Stop:= , 
	bWaitAtNextStop:= , 
	dOverride:= , 
	iVelMode:= , 
	dwIpoTime:= GVL.dwMainInterval, // in microseconds and should match the task time
	dLastWayPos:= , 
	bAbort:= NOT _SMC_Interpolator.bExecute, 
	bSingleStep:= , 
	bAcknM:= , 
	bQuick_Stop:= , 
	dQuickDeceleration:= , 
	dJerkMax:= , 
	dQuickStopJerk:= , 
	bSuppressSystemMFunctions:= , 
	bDone=&gt; , 
	bBusy=&gt; , 
	bError=&gt; , 
	wErrorID=&gt; , 
	piSetPosition=&gt; , 
	iStatus=&gt; , 
	bWorking=&gt; , 
	iActObjectSourceNo=&gt; , 
	dActObjectLength=&gt; , 
	dActObjectLengthRemaining=&gt; , 
	dVel=&gt; , 
	vecActTangent=&gt; , 
	iLastSwitch=&gt; , 
	dwSwitches=&gt; , 
	dWayPos=&gt; , 
	wM=&gt; , 
	adToolLength=&gt; , 
	Act_Object=&gt; );

// handle m codes
CASE _SMC_Interpolator.wM OF
	0:	// rest acknowledgment
		_SMC_Interpolator.bAcknM := FALSE;
	200: // close gripper
		_SMC_Interpolator.bAcknM := TRUE;
		GVL.Servo0Position := 0; // TODO
	201: // open gripper
		_SMC_Interpolator.bAcknM := TRUE;
		GVL.Servo0Position := 255; // TODO
END_CASE

_SMC_Trafo_ArticulatedRobot_6DOF(
	config:= _SMC_TrafoConfig_ArticulatedRobot_6DOF, 
	pi:= _SMC_Interpolator.piSetPosition, 
	dQ0_old:= SM_Drive_PosControl_J1.fActPosition, 
	dQ1_old:= SM_Drive_PosControl_J2.fActPosition, 
	dQ2_old:= SM_Drive_PosControl_J3.fActPosition, 
	dQ3_old:= SM_Drive_PosControl_J4.fActPosition, 
	dQ4_old:= SM_Drive_PosControl_J5.fActPosition, 
	dQ5_old:= SM_Drive_PosControl_J6.fActPosition, 
	armState:= , 
	elbowState:= , 
	handState:= , 
	dQ0=&gt; , 
	dQ1=&gt; , 
	dQ2=&gt; , 
	dQ3=&gt; , 
	dQ4=&gt; , 
	dQ5=&gt; , 
	bError=&gt; , 
	result=&gt; );
	
_SMC_ControlAxisByPos_J1(
	Axis:= SM3_Drive_PosControl_J1, 
	iStatus:= _SMC_Interpolator.iStatus, 
	bEnable:= _SMC_Interpolator.bWorking, 
	bAvoidGaps:= AvoidGaps, 
	fSetPosition:= _SMC_Trafo_ArticulatedRobot_6DOF.dQ0, 
	fGapVelocity:= GapVelocity, 
	fGapAcceleration:= GapAccel, 
	fGapDeceleration:= GapAccel, 
	fGapJerk:= , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	iErrorID=&gt; , 
	bStopIpo=&gt; );
	
_SMC_ControlAxisByPos_J2(
	Axis:= SM3_Drive_PosControl_J2, 
	iStatus:= _SMC_Interpolator.iStatus, 
	bEnable:= _SMC_Interpolator.bWorking, 
	bAvoidGaps:= AvoidGaps, 
	fSetPosition:= _SMC_Trafo_ArticulatedRobot_6DOF.dQ1, 
	fGapVelocity:= GapVelocity, 
	fGapAcceleration:= GapAccel, 
	fGapDeceleration:= GapAccel, 
	fGapJerk:= , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	iErrorID=&gt; , 
	bStopIpo=&gt; );
	
_SMC_ControlAxisByPos_J3(
	Axis:= SM3_Drive_PosControl_J3, 
	iStatus:= _SMC_Interpolator.iStatus, 
	bEnable:= _SMC_Interpolator.bWorking, 
	bAvoidGaps:= AvoidGaps, 
	fSetPosition:= _SMC_Trafo_ArticulatedRobot_6DOF.dQ2, 
	fGapVelocity:= GapVelocity, 
	fGapAcceleration:= GapAccel, 
	fGapDeceleration:= GapAccel, 
	fGapJerk:= , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	iErrorID=&gt; , 
	bStopIpo=&gt; );
	
_SMC_ControlAxisByPos_J4(
	Axis:= SM3_Drive_PosControl_J4, 
	iStatus:= _SMC_Interpolator.iStatus, 
	bEnable:= _SMC_Interpolator.bWorking, 
	bAvoidGaps:= AvoidGaps, 
	fSetPosition:= _SMC_Trafo_ArticulatedRobot_6DOF.dQ3, 
	fGapVelocity:= GapVelocity, 
	fGapAcceleration:= GapAccel, 
	fGapDeceleration:= GapAccel, 
	fGapJerk:= , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	iErrorID=&gt; , 
	bStopIpo=&gt; );
	
_SMC_ControlAxisByPos_J5(
	Axis:= SM3_Drive_PosControl_J5, 
	iStatus:= _SMC_Interpolator.iStatus, 
	bEnable:= _SMC_Interpolator.bWorking, 
	bAvoidGaps:= AvoidGaps, 
	fSetPosition:= _SMC_Trafo_ArticulatedRobot_6DOF.dQ4, 
	fGapVelocity:= GapVelocity, 
	fGapAcceleration:= GapAccel, 
	fGapDeceleration:= GapAccel, 
	fGapJerk:= , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	iErrorID=&gt; , 
	bStopIpo=&gt; );
	
_SMC_ControlAxisByPos_J6(
	Axis:= SM3_Drive_PosControl_J6, 
	iStatus:= _SMC_Interpolator.iStatus, 
	bEnable:= _SMC_Interpolator.bWorking, 
	bAvoidGaps:= AvoidGaps, 
	fSetPosition:= -_SMC_Trafo_ArticulatedRobot_6DOF.dQ5, // please see note in A_CNC POU regarding why this was set to negative
	fGapVelocity:= GapVelocity, 
	fGapAcceleration:= GapAccel, 
	fGapDeceleration:= GapAccel, 
	fGapJerk:= , 
	bBusy=&gt; , 
	bCommandAborted=&gt; , 
	bError=&gt; , 
	iErrorID=&gt; , 
	bStopIpo=&gt; );
	
_ErrorRtrig();
_ErrorRtrig.CLK := _PlanPath.Error
					OR _SMC_Interpolator.bError
					OR _SMC_Trafo_ArticulatedRobot_6DOF.bError
					OR _SMC_ControlAxisByPos_J1.bError
					OR _SMC_ControlAxisByPos_J2.bError
					OR _SMC_ControlAxisByPos_J3.bError
					OR _SMC_ControlAxisByPos_J4.bError
					OR _SMC_ControlAxisByPos_J5.bError
					OR _SMC_ControlAxisByPos_J6.bError;
IF _ErrorRtrig.Q THEN
	IF _PlanPath.Error THEN
		SUPER^.M_Error(Description:=_PlanPath.ErrorDescription);
	END_IF
	IF _SMC_Interpolator.bError THEN
		SUPER^.M_Error(Description := CONCAT(' Interpolator Error: ',
                                CONCAT(TO_STRING(_SMC_Interpolator.wErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_Interpolator.wErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
	IF _SMC_Trafo_ArticulatedRobot_6DOF.bError THEN
		SUPER^.M_Error(Description := CONCAT(' Trafo Error: ', 'unknown'));
	END_IF
	IF _SMC_ControlAxisByPos_J1.bError THEN
		SUPER^.M_Error(Description := CONCAT(' ControlAxisByPos_J1 Error: ',
                                CONCAT(TO_STRING(_SMC_ControlAxisByPos_J1.iErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ControlAxisByPos_J1.iErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
	IF _SMC_ControlAxisByPos_J2.bError THEN
		SUPER^.M_Error(Description := CONCAT(' ControlAxisByPos_J2 Error: ',
                                CONCAT(TO_STRING(_SMC_ControlAxisByPos_J2.iErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ControlAxisByPos_J2.iErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
	IF _SMC_ControlAxisByPos_J3.bError THEN
		SUPER^.M_Error(Description := CONCAT(' ControlAxisByPos_J3 Error: ',
                                CONCAT(TO_STRING(_SMC_ControlAxisByPos_J3.iErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ControlAxisByPos_J3.iErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
	IF _SMC_ControlAxisByPos_J4.bError THEN
		SUPER^.M_Error(Description := CONCAT(' ControlAxisByPos_J4 Error: ',
                                CONCAT(TO_STRING(_SMC_ControlAxisByPos_J4.iErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ControlAxisByPos_J4.iErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
	IF _SMC_ControlAxisByPos_J5.bError THEN
		SUPER^.M_Error(Description := CONCAT(' ControlAxisByPos_J5 Error: ',
                                CONCAT(TO_STRING(_SMC_ControlAxisByPos_J5.iErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ControlAxisByPos_J5.iErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
	IF _SMC_ControlAxisByPos_J6.bError THEN
		SUPER^.M_Error(Description := CONCAT(' ControlAxisByPos_J6 Error: ',
                                CONCAT(TO_STRING(_SMC_ControlAxisByPos_J6.iErrorID),
                                CONCAT(' ', SMC_ErrorString(_SMC_ControlAxisByPos_J6.iErrorID,
                                            SMC_Language_Type.english)))));
	END_IF
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="7c793665-23c8-4063-a654-5011975c105b">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'CNC Processor',
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="0b336f4b-391c-459f-a28e-2f4ba2e8bba2">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="882518ea-bbf9-4ac5-86b5-eca49a6b2287">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="3a2ecf7b-c9fd-4771-acb0-40bfe0e5c659">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Resetting" ObjectId="dd49c510-b353-40d1-99d1-226a7e98ba4c">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SUPER^._SeqResetting OF
	0:
		_PlanPath.M_Reset();
		_SeqResetting := _SeqResetting + 1;
	1:
		IF NOT _PlanPath.Error THEN
			SUPER^.M_StateComplete();
			_SeqResetting := 0;
		END_IF
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Resetting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Holding" ObjectId="1442df85-b316-4422-acf3-2f8fc74d80e1">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqHolding OF
	0:
		_SMC_Interpolator.bWaitAtNextStop := TRUE;
		SUPER^._SeqHolding := SUPER^._SeqHolding + 1;
	1:
		// TODO dale thomas this is not tested
		IF NOT _SMC_Interpolator.bWorking THEN
			SUPER^._SeqHolding := 0;
			SUPER^.M_StateComplete();
		END_IF
		
END_CASE

</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Holding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_UnHolding" ObjectId="1070643e-06f2-476a-8286-a7b05c60fa83">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE _SeqUnHolding OF
	0:
		_SMC_Interpolator.bWaitAtNextStop := FALSE;
		SUPER^._SeqUnHolding := SUPER^._SeqUnHolding + 1;
	1:
		// TODO dale thomas this is not tested
		IF _SMC_Interpolator.bWorking THEN
			SUPER^._SeqUnHolding := 0;
			SUPER^.M_StateComplete();
		END_IF
		
END_CASE</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Unholding : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Idle" ObjectId="c93ab278-2b3f-4bc7-a2ff-fccaf401c8a8">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">_SMC_Interpolator.bWaitAtNextStop := FALSE;
_SMC_Interpolator.bExecute := FALSE;</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Idle : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK CncCmdProcessor EXTENDS Module
VAR_INPUT
	GapVelocity: LREAL := 10;
	AvoidGaps: BOOL := TRUE;
	GapAccel: LREAL := 500.0;
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_IN_OUT
	AxisGroup: AXIS_GROUP_REF_SM3;
	SM3_Drive_PosControl_J1: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J2: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J3: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J4: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J5: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
	SM3_Drive_PosControl_J6: SM3_Drive_PosControl.AXIS_REF_POSCONTROL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_SMC_TrafoConfig_ArticulatedRobot_6DOF: SMC_TrafoConfig_ArticulatedRobot_6DOF;
	_SMC_Trafo_ArticulatedRobot_6DOF: SMC_Trafo_ArticulatedRobot_6DOF;
	_SMC_Trafof_ArticulatedRobot_6DOF: SMC_Trafof_ArticulatedRobot_6DOF;
	_SMC_ControlAxisByPos_J1: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J2: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J3: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J4: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J5: SMC_ControlAxisByPos;
	_SMC_ControlAxisByPos_J6: SMC_ControlAxisByPos;
	_SMC_Interpolator: SMC_Interpolator;
	_PlanPath: CncPathPlanner;
	_ErrorRtrig: R_TRIG;
END_VAR
VAR CONSTANT
	wVarCount : WORD := 1;
END_VAR
VAR
	lrR1 : LREAL:=30;
	
	astVar : ARRAY [0..wVarCount] OF SMC_SingleVar :=
			[(strVarName:='R1', pAdr := ADR(lrR1), eVarType := SMC_VarType.SMC_TYPE_LREAL)];
			
	stVarList : SMC_VarList := (wNumberVars := wVarCount, psvVarlist := ADR(astVar));
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ONE: 			INT := 0020;
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_CncCmdParser: ParseCncCmd;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>09e229dd-dea4-4418-8521-de497c93f5dc</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParseCncCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseCncCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_CncCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_CncCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                      <initialValue>
                        <simpleValue value="FALSE" />
                      </initialValue>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseCncCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_CncCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseCncCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_CncCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_AddString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ADD'" />
                      </initialValue>
                    </variable>
                    <variable name="_XYZString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'XYZ'" />
                      </initialValue>
                    </variable>
                    <variable name="_ZYXString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ZYX'" />
                      </initialValue>
                    </variable>
                    <variable name="_ZYZString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ZYZ'" />
                      </initialValue>
                    </variable>
                    <variable name="_LiteralString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LIT'" />
                      </initialValue>
                    </variable>
                    <variable name="_VariableString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VAR'" />
                      </initialValue>
                    </variable>
                    <variable name="_StoredPositionsString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'STO'" />
                      </initialValue>
                    </variable>
                    <variable name="_VisionRegistersString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VIS'" />
                      </initialValue>
                    </variable>
                    <variable name="_FlagsString">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'FLG'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseCncCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_CncCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// /path/to/file/with/no/spaces/file.cnc ADD|XYX|ZYX|ZYZ startpos
// file1.cnc XYZ H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00
// file2.cnc ADD A S 025
// file3.cnc ADD A V 015

Error := FALSE;
ErrorDescription:='';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

//
IF _CmdParams[0] &lt;&gt; '' THEN
	//
	stCommand.Filename:=_CmdParams[0];
	
	//
	IF _CmdParams[1] = _AddString THEN
		stCommand.OriConvention := SMC_ORI_CONVENTION.ADDAXES;
	ELSIF _CmdParams[1] = _XYZString THEN
		stCommand.OriConvention := SMC_ORI_CONVENTION.XYZ;
	ELSIF _CmdParams[1] = _ZYXString THEN
		stCommand.OriConvention := SMC_ORI_CONVENTION.ZYX;
	ELSIF _CmdParams[1] = _ZYZString THEN
		stCommand.OriConvention := SMC_ORI_CONVENTION.ZYZ;
	ELSE
		Error := TRUE;
		ErrorDescription:='No ori convention provided';
	END_IF
	
	//
	IF _CmdParams[2] = _LiteralString THEN
		// file1.cnc XYZ H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00
		stCommand.StartPos.dX:=STRING_TO_LREAL(_CmdParams[3]);
		stCommand.StartPos.dY:=STRING_TO_LREAL(_CmdParams[4]);
		stCommand.StartPos.dZ:=STRING_TO_LREAL(_CmdParams[5]);
		stCommand.StartPos.dA:=STRING_TO_LREAL(_CmdParams[6]);
		stCommand.StartPos.dB:=STRING_TO_LREAL(_CmdParams[7]);
		stCommand.StartPos.dC:=STRING_TO_LREAL(_CmdParams[8]);
	ELSIF _CmdParams[2] = _VariableString THEN
		// file2.cnc ADD V S 025
		IF _CmdParams[3] = _StoredPositionsString THEN
			//_ArrayType:=DUT_Command_ArrayType.StoredPosition;
			stCommand.StartPos.dX:=PersistentVars.StoredPositions[STRING_TO_INT(_CmdParams[4])].Position.X; // TODO try to remove this reference to global vars
			stCommand.StartPos.dY:=PersistentVars.StoredPositions[STRING_TO_INT(_CmdParams[4])].Position.Y;
			stCommand.StartPos.dZ:=PersistentVars.StoredPositions[STRING_TO_INT(_CmdParams[4])].Position.Z;
			stCommand.StartPos.dA:=PersistentVars.StoredPositions[STRING_TO_INT(_CmdParams[4])].Position.A;
			stCommand.StartPos.dB:=PersistentVars.StoredPositions[STRING_TO_INT(_CmdParams[4])].Position.B;
			stCommand.StartPos.dC:=PersistentVars.StoredPositions[STRING_TO_INT(_CmdParams[4])].Position.C;
		ELSIF _CmdParams[3] = _VisionRegistersString THEN
			//_ArrayType:=DUT_Command_ArrayType.Vision;
			stCommand.StartPos.dX:=PersistentVars.VisionRegisters[STRING_TO_INT(_CmdParams[4])].Position.X;
			stCommand.StartPos.dY:=PersistentVars.VisionRegisters[STRING_TO_INT(_CmdParams[4])].Position.Y;
			stCommand.StartPos.dZ:=PersistentVars.VisionRegisters[STRING_TO_INT(_CmdParams[4])].Position.Z;
			stCommand.StartPos.dA:=PersistentVars.VisionRegisters[STRING_TO_INT(_CmdParams[4])].Position.A;
			stCommand.StartPos.dB:=PersistentVars.VisionRegisters[STRING_TO_INT(_CmdParams[4])].Position.B;
			stCommand.StartPos.dC:=PersistentVars.VisionRegisters[STRING_TO_INT(_CmdParams[4])].Position.C;
		ELSIF _CmdParams[3] = _FlagsString THEN
			//_ArrayType:=DUT_Command_ArrayType.Flag;
		ELSE
			Error := TRUE;
			ErrorDescription:='No array type provided';
		END_IF
	ELSE
		Error := TRUE;
		ErrorDescription:='No variable type provided';
	END_IF
	
ELSE
	Error := TRUE;
	ErrorDescription:='Command string format incorrect';
	
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseCncCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_CncCmd;
	Error: BOOL:= FALSE;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
END_VAR
VAR CONSTANT
	_AddString: STRING(3):='ADD';
	_XYZString: STRING(3):='XYZ';
	_ZYXString: STRING(3):='ZYX';
	_ZYZString: STRING(3):='ZYZ';
	_LiteralString: STRING(3):='LIT';
	_VariableString: STRING(3):='VAR';
	_StoredPositionsString: STRING(3):='STO';
	_VisionRegistersString: STRING(3):='VIS';
	_FlagsString: STRING(3):='FLG';
END_VAR</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>4ea6ce2c-d973-415a-9620-8fd34fa576a4</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="F_SplitCmd" pouType="function">
                <interface>
                  <returnType>
                    <array>
                      <dimension lower="0" upper="GVL.COMMAND_LEN" />
                      <baseType>
                        <string />
                      </baseType>
                    </array>
                  </returnType>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <variable name="Delimiter">
                      <type>
                        <string length="1" />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_SplitCmd : ARRAY [0..GVL.COMMAND_LEN] OF STRING
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
	Delimiter: STRING(1):=' ';
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
	_DelimPos: INT;
	_i, _j, _k: INT;
END_VAR
VAR CONSTANT
	_SpaceChar: STRING(1):=' ';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <variable name="_DelimPos">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_i">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_j">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_k">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_SplitCmd : ARRAY [0..GVL.COMMAND_LEN] OF STRING
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
	Delimiter: STRING(1):=' ';
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
	_DelimPos: INT;
	_i, _j, _k: INT;
END_VAR
VAR CONSTANT
	_SpaceChar: STRING(1):=' ';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_SpaceChar">
                      <type>
                        <string length="1" />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_SplitCmd : ARRAY [0..GVL.COMMAND_LEN] OF STRING
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
	Delimiter: STRING(1):=' ';
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
	_DelimPos: INT;
	_i, _j, _k: INT;
END_VAR
VAR CONSTANT
	_SpaceChar: STRING(1):=' ';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// grab a copy
// TODO do we need to do this? cant we just operate on the input?
_Command := Command;

// ex. 123 456 789 0 123 456 879 0
WHILE LEN(_Command) &gt; 0  AND _i &lt; GVL.COMMAND_LEN DO
	// find the delimiter
	_DelimPos := FIND(_Command, Delimiter);
	// don't copy empty commands
	IF _DelimPos &gt; 1 THEN
		// copy the command into the array position
		F_SplitCmd[_i] := MID(STR:=_Command, LEN:=_DelimPos - 1, POS:=1);
		// trim the command off the front of the string
		_Command := DELETE(STR:=_Command, LEN:=_DelimPos, POS:=1);
		// increment the index and get ready for the next
		_i := _i + 1;
	ELSIF _DelimPos = 1 OR FIND(_Command, _SpaceChar) = 1 THEN
		// don't do anything with a stray delimiter or a space at the  start of the next command
		// trim the command off the space at the front of the string
		_Command := DELETE(STR:=_Command, LEN:=LEN(_SpaceChar), POS:=1);
	ELSIF _DelimPos = 0 AND LEN(_Command) &gt; 0 THEN
		// copy the last command into the array position and return
		F_SplitCmd[_i] := MID(STR:=_Command, LEN:=LEN(_Command), POS:=1);
		// trim the command off the front of the string
		_Command := DELETE(STR:=_Command, LEN:=_DelimPos, POS:=1);
		// increment the index and get ready for the next
		_i := _i + 1;
		RETURN;
	ELSE
		RETURN;
	END_IF
END_WHILE</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_SplitCmd : ARRAY [0..GVL.COMMAND_LEN] OF STRING
VAR_INPUT
    Command: STRING(GVL.COMMAND_LEN);
	Delimiter: STRING(1):=' ';
END_VAR
VAR
	_Command: STRING(GVL.COMMAND_LEN);
	_DelimPos: INT;
	_i, _j, _k: INT;
END_VAR
VAR CONSTANT
	_SpaceChar: STRING(1):=' ';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>4ffeb092-e2fe-4508-9822-2d3197400b13</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildVarSetCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_VarSetCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVarSetCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_VarSetCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVarSetCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_VarSetCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeS">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'STO'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeV">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VIS'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeF">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'FLG'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVarSetCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_VarSetCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// S|V|F index x y z a b c
// S 0000 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 
// V 0000 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 +0000.00 
// F 0000 1

// clear the command
_Command:='';

// build the command
CASE stCommand.ArrayType OF
	DUT_Command_ArrayType.StoredPosition:
		F_AddElement(_Command, _Delimiter, _ArrayTypeS);
	DUT_Command_ArrayType.VisionRegister:
		F_AddElement(_Command, _Delimiter, _ArrayTypeV);
	DUT_Command_ArrayType.Flag:
		F_AddElement(_Command, _Delimiter, _ArrayTypeF);
END_CASE

// add the array index
F_AddElement(_Command, _Delimiter, INT_TO_STRING(stCommand.ArrayIndex));

// add the coordinates
IF stCommand.ArrayType = DUT_Command_ArrayType.StoredPosition 
	OR stCommand.ArrayType = DUT_Command_ArrayType.VisionRegister THEN
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.X));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.Y));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.Z));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.A));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.B));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.C));
		
ELSIF stCommand.ArrayType = DUT_Command_ArrayType.Flag THEN
		// we only send the x for readability. it will work if we send them all.
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Coordinates.X));
		
END_IF

// set function equal to command
BuildVarSetCmd := _Command;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildVarSetCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_VarSetCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>464f3abe-fbad-44ed-ab93-0358a4edadad</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="LogicCmdProcessor" pouType="functionBlock">
                <interface>
                  <inOutVars>
                    <variable name="CmdProcessor">
                      <type>
                        <derived name="CommandProcessor" />
                      </type>
                    </variable>
                    <variable name="CmdIO">
                      <type>
                        <derived name="ST_LogicCmdIO" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK LogicCmdProcessor EXTENDS Module
VAR_IN_OUT
	CmdProcessor: CommandProcessor;
	CmdIO: ST_LogicCmdIO;
END_VAR
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParseLogicCmd: ParseLogicCmd;
	_ThenFunctionProcessed: BOOL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
	_STEP_EVAL_IN:		INT := 0100;
	_STEP_EVAL_REG:		INT := 0110;
	_STEP_EVAL_CNT:		INT := 0120;
	_STEP_PROC_THEN:	INT := 0200;
	_STEP_PROC_ELSE:	INT := 0210;
	_STEP_PROC_OUT:		INT := 0300;
	_STEP_PROC_JMP:		INT := 0310;
	_STEP_PROC_CNT:		INT := 0320;
	_STEP_PROC_REG:		INT := 0330;
	_STEP_PROC_NOP:		INT := 0340;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                      <initialValue>
                        <simpleValue value="''" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK LogicCmdProcessor EXTENDS Module
VAR_IN_OUT
	CmdProcessor: CommandProcessor;
	CmdIO: ST_LogicCmdIO;
END_VAR
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParseLogicCmd: ParseLogicCmd;
	_ThenFunctionProcessed: BOOL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
	_STEP_EVAL_IN:		INT := 0100;
	_STEP_EVAL_REG:		INT := 0110;
	_STEP_EVAL_CNT:		INT := 0120;
	_STEP_PROC_THEN:	INT := 0200;
	_STEP_PROC_ELSE:	INT := 0210;
	_STEP_PROC_OUT:		INT := 0300;
	_STEP_PROC_JMP:		INT := 0310;
	_STEP_PROC_CNT:		INT := 0320;
	_STEP_PROC_REG:		INT := 0330;
	_STEP_PROC_NOP:		INT := 0340;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_UnitModeCurrentState">
                      <type>
                        <derived name="PACK_ML.State" />
                      </type>
                    </variable>
                    <variable name="_ParseLogicCmd">
                      <type>
                        <derived name="ParseLogicCmd" />
                      </type>
                    </variable>
                    <variable name="_ThenFunctionProcessed">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK LogicCmdProcessor EXTENDS Module
VAR_IN_OUT
	CmdProcessor: CommandProcessor;
	CmdIO: ST_LogicCmdIO;
END_VAR
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParseLogicCmd: ParseLogicCmd;
	_ThenFunctionProcessed: BOOL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
	_STEP_EVAL_IN:		INT := 0100;
	_STEP_EVAL_REG:		INT := 0110;
	_STEP_EVAL_CNT:		INT := 0120;
	_STEP_PROC_THEN:	INT := 0200;
	_STEP_PROC_ELSE:	INT := 0210;
	_STEP_PROC_OUT:		INT := 0300;
	_STEP_PROC_JMP:		INT := 0310;
	_STEP_PROC_CNT:		INT := 0320;
	_STEP_PROC_REG:		INT := 0330;
	_STEP_PROC_NOP:		INT := 0340;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_STEP_DONE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="1000" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_IDLE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="0" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_COMMAND">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="10" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_ERR">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="20" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_EVAL_IN">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="100" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_EVAL_REG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="110" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_EVAL_CNT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="120" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_THEN">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="200" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_ELSE">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="210" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_OUT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="300" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_JMP">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="310" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_CNT">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="320" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_REG">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="330" />
                      </initialValue>
                    </variable>
                    <variable name="_STEP_PROC_NOP">
                      <type>
                        <INT />
                      </type>
                      <initialValue>
                        <simpleValue value="340" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK LogicCmdProcessor EXTENDS Module
VAR_IN_OUT
	CmdProcessor: CommandProcessor;
	CmdIO: ST_LogicCmdIO;
END_VAR
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParseLogicCmd: ParseLogicCmd;
	_ThenFunctionProcessed: BOOL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
	_STEP_EVAL_IN:		INT := 0100;
	_STEP_EVAL_REG:		INT := 0110;
	_STEP_EVAL_CNT:		INT := 0120;
	_STEP_PROC_THEN:	INT := 0200;
	_STEP_PROC_ELSE:	INT := 0210;
	_STEP_PROC_OUT:		INT := 0300;
	_STEP_PROC_JMP:		INT := 0310;
	_STEP_PROC_CNT:		INT := 0320;
	_STEP_PROC_REG:		INT := 0330;
	_STEP_PROC_NOP:		INT := 0340;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                      <Inheritance>
                        <Extends>Module</Extends>
                      </Inheritance>
                    </data>
                  </addData>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();

// PackML state machine implementation
_UnitModeCurrentState := SUPER^._UnitMode.CurrentState;

//
CASE SUPER^._SeqMain OF
	
    _STEP_DONE:
		SUPER^._SeqMain := _STEP_IDLE;
        
    _STEP_IDLE:
		// wait here until commanded to start
        
    _STEP_COMMAND:
		_ParseLogicCmd(Command:=Command);
		
		CASE _ParseLogicCmd.stCommand.IF_Condition OF
			E_LogicIfCondition.PASS:
				SUPER^._SeqMain := _STEP_PROC_THEN;
			E_LogicIfCondition.INPUT:
				SUPER^._SeqMain := _STEP_EVAL_IN;
			E_LogicIfCondition.REGISTER:
				SUPER^._SeqMain := _STEP_EVAL_REG;
			E_LogicIfCondition.COUNTER:
				SUPER^._SeqMain := _STEP_EVAL_CNT;
		END_CASE
		
		//
		_ThenFunctionProcessed := FALSE;
		
	_STEP_EVAL_IN:
		CASE _ParseLogicCmd.stCommand.IF_Condition_Operator OF
			E_LogicIfConditionOperator.EQU:
				IF CmdIO.Input[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					= UDINT_TO_BOOL(_ParseLogicCmd.stCommand.IF_Condition_Operator_Value) THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.GRE:
				IF CmdIO.Input[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&gt;= UDINT_TO_BOOL(_ParseLogicCmd.stCommand.IF_Condition_Operator_Value) THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.GRT:
				IF CmdIO.Input[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&gt; UDINT_TO_BOOL(_ParseLogicCmd.stCommand.IF_Condition_Operator_Value) THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.LEQ:
				IF CmdIO.Input[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&lt;= UDINT_TO_BOOL(_ParseLogicCmd.stCommand.IF_Condition_Operator_Value) THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.LES:
				IF CmdIO.Input[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&lt; UDINT_TO_BOOL(_ParseLogicCmd.stCommand.IF_Condition_Operator_Value) THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
		END_CASE
		
	_STEP_EVAL_REG:
		CASE _ParseLogicCmd.stCommand.IF_Condition_Operator OF
			E_LogicIfConditionOperator.EQU:
				IF CmdIO.Register[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					= _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.GRE:
				IF CmdIO.Register[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&gt;= _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.GRT:
				IF CmdIO.Register[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&gt; _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.LEQ:
				IF CmdIO.Register[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&lt;= _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.LES:
				IF CmdIO.Register[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&lt; _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
		END_CASE
		
	_STEP_EVAL_CNT:
		CASE _ParseLogicCmd.stCommand.IF_Condition_Operator OF
			E_LogicIfConditionOperator.EQU:
				IF CmdIO.Counter[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					= _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.GRE:
				IF CmdIO.Counter[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&gt;= _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.GRT:
				IF CmdIO.Counter[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&gt; _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.LEQ:
				IF CmdIO.Counter[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&lt;= _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
			E_LogicIfConditionOperator.LES:
				IF CmdIO.Counter[_ParseLogicCmd.stCommand.IF_Condition_Idx] 
					&lt; _ParseLogicCmd.stCommand.IF_Condition_Operator_Value THEN
						SUPER^._SeqMain := _STEP_PROC_THEN;
				ELSE
					SUPER^._SeqMain := _STEP_PROC_ELSE;
				END_IF
		END_CASE
		
	_STEP_PROC_THEN:
		//
		_ThenFunctionProcessed := TRUE;
		//
		CASE _ParseLogicCmd.stCommand.THEN_Function OF
			E_LogicFunction.OUTPUT:
				SUPER^._SeqMain := _STEP_PROC_OUT;
			E_LogicFunction.REGISTER:
				SUPER^._SeqMain := _STEP_PROC_REG;
			E_LogicFunction.CNTUP:
				SUPER^._SeqMain := _STEP_PROC_CNT;
			E_LogicFunction.CNTDN:
				SUPER^._SeqMain := _STEP_PROC_CNT;
			E_LogicFunction.CNTRST:
				SUPER^._SeqMain := _STEP_PROC_CNT;
			E_LogicFunction.JUMP:
				SUPER^._SeqMain := _STEP_PROC_JMP;
			E_LogicFunction.NOP:
				SUPER^._SeqMain := _STEP_PROC_NOP;
		END_CASE;
				
	_STEP_PROC_ELSE:
		CASE _ParseLogicCmd.stCommand.ELSE_Function OF
			E_LogicFunction.OUTPUT:
				SUPER^._SeqMain := _STEP_PROC_OUT;
			E_LogicFunction.REGISTER:
				SUPER^._SeqMain := _STEP_PROC_REG;
			E_LogicFunction.CNTUP:
				SUPER^._SeqMain := _STEP_PROC_CNT;
			E_LogicFunction.CNTDN:
				SUPER^._SeqMain := _STEP_PROC_CNT;
			E_LogicFunction.CNTRST:
				SUPER^._SeqMain := _STEP_PROC_CNT;
			E_LogicFunction.JUMP:
				SUPER^._SeqMain := _STEP_PROC_JMP;
			E_LogicFunction.NOP:
				SUPER^._SeqMain := _STEP_PROC_NOP;
		END_CASE;
		
	_STEP_PROC_OUT:
		IF _ThenFunctionProcessed THEN
			CmdIO.Output[_ParseLogicCmd.stCommand.THEN_Function_Idx] 
				:= UDINT_TO_BOOL(_ParseLogicCmd.stCommand.THEN_Function_Value);
		ELSE
			CmdIO.Output[_ParseLogicCmd.stCommand.ELSE_Function_Idx] 
				:= UDINT_TO_BOOL(_ParseLogicCmd.stCommand.ELSE_Function_Value);
		END_IF
		// next, please
		SUPER^._SeqMain := _STEP_DONE;
		
	_STEP_PROC_REG:
		IF _ThenFunctionProcessed THEN
			CmdIO.Register[_ParseLogicCmd.stCommand.THEN_Function_Idx] 
				:= _ParseLogicCmd.stCommand.THEN_Function_Value;
		ELSE
			CmdIO.Register[_ParseLogicCmd.stCommand.ELSE_Function_Idx] 
				:= _ParseLogicCmd.stCommand.ELSE_Function_Value;
		END_IF
		// next, please
		SUPER^._SeqMain := _STEP_DONE;
		
	_STEP_PROC_CNT:	
		IF _ThenFunctionProcessed THEN
			CASE _ParseLogicCmd.stCommand.THEN_Function OF
				E_LogicFunction.CNTUP:
					CmdIO.Counter[_ParseLogicCmd.stCommand.THEN_Function_Idx] 
						:= CmdIO.Counter[_ParseLogicCmd.stCommand.THEN_Function_Idx] + 1;
				E_LogicFunction.CNTDN:
					CmdIO.Counter[_ParseLogicCmd.stCommand.THEN_Function_Idx] 
						:= CmdIO.Counter[_ParseLogicCmd.stCommand.THEN_Function_Idx] - 1;
				E_LogicFunction.CNTRST:
					CmdIO.Counter[_ParseLogicCmd.stCommand.THEN_Function_Idx] 
						:= 0;
			END_CASE
		ELSE
			CASE _ParseLogicCmd.stCommand.ELSE_Function OF
				E_LogicFunction.CNTUP:
					CmdIO.Counter[_ParseLogicCmd.stCommand.ELSE_Function_Idx] 
						:= CmdIO.Counter[_ParseLogicCmd.stCommand.ELSE_Function_Idx] + 1;
				E_LogicFunction.CNTDN:
					CmdIO.Counter[_ParseLogicCmd.stCommand.ELSE_Function_Idx] 
						:= CmdIO.Counter[_ParseLogicCmd.stCommand.ELSE_Function_Idx] - 1;
				E_LogicFunction.CNTRST:
					CmdIO.Counter[_ParseLogicCmd.stCommand.ELSE_Function_Idx] 
						:= 0;
			END_CASE
		END_IF
		// next, please
		SUPER^._SeqMain := _STEP_DONE;
		
	_STEP_PROC_JMP:
		// TODO need to create a function in the command processor to change the next step
		// leaving this guy dead for now.
		IF _ThenFunctionProcessed THEN
			CmdProcessor.M_SetNextCommand(CommandNumber:=INT_TO_UINT(_ParseLogicCmd.stCommand.THEN_Function_Idx));
		ELSE
			CmdProcessor.M_SetNextCommand(CommandNumber:=INT_TO_UINT(_ParseLogicCmd.stCommand.ELSE_Function_Idx));
		END_IF
		// next, please
		SUPER^._SeqMain := _STEP_DONE;
		
	_STEP_PROC_NOP:
		IF _ThenFunctionProcessed THEN
			//
		ELSE
			//
		END_IF
		// next, please
		SUPER^._SeqMain := _STEP_DONE;

END_CASE</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_SetPackML" ObjectId="8ca4de4a-aa41-4055-81ee-9c69366d3914">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._UnitMode(	sName := 'Logic Processor',
				eInitialState := PACK_ML.State.Idle,
				xActive := TRUE);</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_SetPackML : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Complete" ObjectId="b9caab7f-1bc9-4e01-ad9e-5992be1f9d70">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// once complete, reset to get back to idle
SUPER^._UnitMode.Reset();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Complete : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Execute" ObjectId="5c7eb861-0692-458a-9941-920dd2879e58">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to execute our commands/jobs/etc and set completed when done.
IF SUPER^._SeqMain =_STEP_IDLE THEN
	SUPER^.M_StateComplete();
END_IF</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Execute : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                    <Method name="M_Starting" ObjectId="aedebc1a-7039-4685-98ce-1d471deca595">
                      <interface>
                        <returnType>
                          <BOOL />
                        </returnType>
                        <addData>
                          <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                            <AccessModifiers Protected="true" />
                          </data>
                        </addData>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">// here we want to clear things and get ready for the execute state
// I can consider this the "INIT" state
SUPER^._SeqMain := _STEP_COMMAND;
SUPER^.M_StateComplete();</xhtml>
                        </ST>
                      </body>
                      <InterfaceAsPlainText>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">METHOD PROTECTED M_Starting : BOOL
</xhtml>
                      </InterfaceAsPlainText>
                      <addData />
                    </Method>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK LogicCmdProcessor EXTENDS Module
VAR_IN_OUT
	CmdProcessor: CommandProcessor;
	CmdIO: ST_LogicCmdIO;
END_VAR
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN):='';
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_UnitModeCurrentState: PACK_ML.State;
	_ParseLogicCmd: ParseLogicCmd;
	_ThenFunctionProcessed: BOOL;
END_VAR
VAR CONSTANT
	_STEP_DONE: 		INT := 1000;
	_STEP_IDLE: 		INT := 0000;
	_STEP_COMMAND: 		INT := 0010;
	_STEP_ERR: 			INT := 0020;
	_STEP_EVAL_IN:		INT := 0100;
	_STEP_EVAL_REG:		INT := 0110;
	_STEP_EVAL_CNT:		INT := 0120;
	_STEP_PROC_THEN:	INT := 0200;
	_STEP_PROC_ELSE:	INT := 0210;
	_STEP_PROC_OUT:		INT := 0300;
	_STEP_PROC_JMP:		INT := 0310;
	_STEP_PROC_CNT:		INT := 0320;
	_STEP_PROC_REG:		INT := 0330;
	_STEP_PROC_NOP:		INT := 0340;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>ef05d0a0-faef-4d26-ad80-b37bf095bfda</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="F_AddElement" pouType="function">
                <interface>
                  <inOutVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_AddElement
VAR_IN_OUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_INPUT
	Delimiter: STRING(1):=' '; // default to space
	Element: STRING(GVL.COMMAND_LEN);
END_VAR
VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inOutVars>
                  <inputVars>
                    <variable name="Delimiter">
                      <type>
                        <string length="1" />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                      <documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> default to space</xhtml>
                      </documentation>
                    </variable>
                    <variable name="Element">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_AddElement
VAR_IN_OUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_INPUT
	Delimiter: STRING(1):=' '; // default to space
	Element: STRING(GVL.COMMAND_LEN);
END_VAR
VAR
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">//
// input
// 	Element: 'bar'
// 	Delimiter: ','
// 	Command: 'foo'
//
// output
// 	Command: 'foo,bar'
//

Command:=CONCAT(Command, Element);
Command:=CONCAT(Command, Delimiter);</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_AddElement
VAR_IN_OUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_INPUT
	Delimiter: STRING(1):=' '; // default to space
	Element: STRING(GVL.COMMAND_LEN);
END_VAR
VAR
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>40f6ab40-9306-42a3-9cf6-d7249218b202</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildMoveCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_MoveCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildMoveCmd : STRING(GVL.COMMAND_LEN);
VAR_INPUT
	stCommand: ST_MoveCmd;
END_VAR
VAR
	_Command : STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildMoveCmd : STRING(GVL.COMMAND_LEN);
VAR_INPUT
	stCommand: ST_MoveCmd;
END_VAR
VAR
	_Command : STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <variable name="_MoveTypeD">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'DIR'" />
                      </initialValue>
                    </variable>
                    <variable name="_MoveTypeL">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LIN'" />
                      </initialValue>
                    </variable>
                    <variable name="_MoveTypeC">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CIR'" />
                      </initialValue>
                    </variable>
                    <variable name="_ChangeTypeA">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ABS'" />
                      </initialValue>
                    </variable>
                    <variable name="_ChangeTypeR">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'REL'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemAcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ACS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemMcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'MCS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemPc1">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'PC1'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemPc2">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'PC2'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemTcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'TCS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemWcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'WCS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordSystemIcs">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'ICS'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordTypeH">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'LIT'" />
                      </initialValue>
                    </variable>
                    <variable name="_CoordTypeV">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VAR'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeS">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'STO'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeV">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'VIS'" />
                      </initialValue>
                    </variable>
                    <variable name="_ArrayTypeF">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'FLG'" />
                      </initialValue>
                    </variable>
                    <variable name="_CircleModeBor">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'BOR'" />
                      </initialValue>
                    </variable>
                    <variable name="_CircleModeCen">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CEN'" />
                      </initialValue>
                    </variable>
                    <variable name="_CircleModeRad">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'RAD'" />
                      </initialValue>
                    </variable>
                    <variable name="_PathChoiceClw">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CLW'" />
                      </initialValue>
                    </variable>
                    <variable name="_PathChoiceCcw">
                      <type>
                        <string length="3" />
                      </type>
                      <initialValue>
                        <simpleValue value="'CCW'" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildMoveCmd : STRING(GVL.COMMAND_LEN);
VAR_INPUT
	stCommand: ST_MoveCmd;
END_VAR
VAR
	_Command : STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// D is direct move. L is linear move. C is a circular move
// R is relative position. A is absolute position
// V is variable coordinated. H is a hardcoded coordinated
// S is stored position array. V is vision register array.
// D|L|C R|A Speed CoordSystem X0000.00 Y0000.00 Z0000.00 A0000.00 B0000.00 C0000.00 BOR|CEN|RAD CCW|CLW X0000.00 Y0000.00 Z0000.00 A0000.00 B0000.00 C0000.00
// 'D A 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
// 'C R 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
// 'D A 010 MCS V S 025'
// 'D A 010 MCS V V 033'
// 'C R 010 MCS V S 002 BOR CLW V S 005'
// 'C R 010 MCS V S 003 BOR CLW V V 006'
// 'C R 010 MCS V S 015 BOR CLW H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00'
// 'C R 010 MCS H +0250.00 +0000.00 +0500.00 +0000.00 +0045.00 +0180.00 BOR CLW V V 022'

//
_Command := '';

//
CASE stCommand.MoveType OF
	DUT_Command_MoveType.DirectMove:
		F_AddElement(_Command, _Delimiter, _MoveTypeD);
	DUT_Command_MoveType.LinearMove:
		F_AddElement(_Command, _Delimiter, _MoveTypeL);
	DUT_Command_MoveType.CircularMove:
		F_AddElement(_Command, _Delimiter, _MoveTypeC);
END_CASE

//
CASE stCommand.PositionType OF
	DUT_Command_PositionType.AbsolutePosition:
		F_AddElement(_Command, _Delimiter, _ChangeTypeA);
	DUT_Command_PositionType.RelativePosition:
		F_AddElement(_Command, _Delimiter, _ChangeTypeR);
END_CASE

//
F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.Speed));

//
CASE stCommand.CoordSystem OF
	SMC_COORD_SYSTEM.ACS:
		F_AddElement(_Command, _Delimiter, _CoordSystemAcs);
	SMC_COORD_SYSTEM.MCS:
		F_AddElement(_Command, _Delimiter, _CoordSystemMcs);
	SMC_COORD_SYSTEM.PCS_1:
		F_AddElement(_Command, _Delimiter, _CoordSystemPc1);
	SMC_COORD_SYSTEM.PCS_2:
		F_AddElement(_Command, _Delimiter, _CoordSystemPc2);
	SMC_COORD_SYSTEM.TCS:
		F_AddElement(_Command, _Delimiter, _CoordSystemTcs);
	SMC_COORD_SYSTEM.WCS:
		F_AddElement(_Command, _Delimiter, _CoordSystemWcs);
	SMC_COORD_SYSTEM.ICS:
		F_AddElement(_Command, _Delimiter, _CoordSystemIcs);
END_CASE

//
CASE stCommand.CoordinateType OF
	DUT_Command_CoordinateType.Literal:
		F_AddElement(_Command, _Delimiter, _CoordTypeH);
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef.X));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef.Y));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef.Z));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef.A));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef.B));
		F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef.C));
		
	DUT_Command_CoordinateType.Variable:
		F_AddElement(_Command, _Delimiter, _CoordTypeV);
		CASE stCommand.ArrayType OF
			DUT_Command_ArrayType.StoredPosition:
				F_AddElement(_Command, _Delimiter, _ArrayTypeS);
			DUT_Command_ArrayType.VisionRegister:
				F_AddElement(_Command, _Delimiter, _ArrayTypeV);
			DUT_Command_ArrayType.Flag:
				// on damn
		END_CASE
		F_AddElement(_Command, _Delimiter, UDINT_TO_STRING(stCommand.ArrayIndex));
		
END_CASE

// only add if move type is circle
IF stCommand.MoveType = DUT_Command_MoveType.CircularMove THEN
	//
	CASE stCommand.CircleMode OF
		SMC_CIRC_MODE.BORDER:
			F_AddElement(_Command, _Delimiter, _CircleModeBor);
		SMC_CIRC_MODE.CENTER:
			F_AddElement(_Command, _Delimiter, _CircleModeCen);
		SMC_CIRC_MODE.RADIUS:
			F_AddElement(_Command, _Delimiter, _CircleModeRad);
	END_CASE
	//
	CASE stCommand.PathChoice OF
		MC_CIRC_PATHCHOICE.CLOCKWISE:
			F_AddElement(_Command, _Delimiter, _PathChoiceClw);
		MC_CIRC_PATHCHOICE.COUNTER_CLOCKWISE:
			F_AddElement(_Command, _Delimiter, _PathChoiceCcw);
	END_CASE
	//
	CASE stCommand.CircularCoordinateType OF
		DUT_Command_CoordinateType.Literal:
			F_AddElement(_Command, _Delimiter, _CoordTypeH);
			F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef2.X));
			F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef2.Y));
			F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef2.Z));
			F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef2.A));
			F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef2.B));
			F_AddElement(_Command, _Delimiter, LREAL_TO_STRING(stCommand.CoordRef2.C));
			
		DUT_Command_CoordinateType.Variable:
			F_AddElement(_Command, _Delimiter, _CoordTypeV);
			CASE stCommand.CircularArrayType OF
				DUT_Command_ArrayType.StoredPosition:
					F_AddElement(_Command, _Delimiter, _ArrayTypeS);
				DUT_Command_ArrayType.VisionRegister:
					F_AddElement(_Command, _Delimiter, _ArrayTypeV);
				DUT_Command_ArrayType.Flag:
					// oh damn
			END_CASE
			F_AddElement(_Command, _Delimiter, UDINT_TO_STRING(stCommand.CircularArrayIndex));
			
	END_CASE

END_IF

// set function equal to command
BuildMoveCmd := _Command;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildMoveCmd : STRING(GVL.COMMAND_LEN);
VAR_INPUT
	stCommand: ST_MoveCmd;
END_VAR
VAR
	_Command : STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
	_MoveTypeD: STRING(3):='DIR';
	_MoveTypeL: STRING(3):='LIN';
	_MoveTypeC: STRING(3):='CIR';
	_ChangeTypeA: STRING(3):='ABS';
	_ChangeTypeR: STRING(3):='REL';
	_CoordSystemAcs: STRING(3):='ACS';
	_CoordSystemMcs: STRING(3):='MCS';
	_CoordSystemPc1: STRING(3):='PC1';
	_CoordSystemPc2: STRING(3):='PC2';
	_CoordSystemTcs: STRING(3):='TCS';
	_CoordSystemWcs: STRING(3):='WCS';
	_CoordSystemIcs: STRING(3):='ICS';
	_CoordTypeH: STRING(3):='LIT';
	_CoordTypeV: STRING(3):='VAR';
	_ArrayTypeS: STRING(3):='STO';
	_ArrayTypeV: STRING(3):='VIS';
	_ArrayTypeF: STRING(3):='FLG';
	_CircleModeBor: STRING(3):='BOR';
	_CircleModeCen: STRING(3):='CEN';
	_CircleModeRad: STRING(3):='RAD';
	_PathChoiceClw: STRING(3):='CLW';
	_PathChoiceCcw: STRING(3):='CCW';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>19554b2f-3ca2-4f8d-a4a2-2e3ac3119ec0</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="F_RoundLreal" pouType="function">
                <interface>
                  <returnType>
                    <LREAL />
                  </returnType>
                  <inputVars>
                    <variable name="rIn">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <variable name="Digit">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_RoundLreal : LREAL
VAR_INPUT
   rIn : LREAL;      
   Digit: INT;         
END_VAR

VAR
   d1 : DINT;
   r0,r1,r2,Rdigit: LREAL;               
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="d1">
                      <type>
                        <DINT />
                      </type>
                    </variable>
                    <variable name="r0">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <variable name="r1">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <variable name="r2">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <variable name="Rdigit">
                      <type>
                        <LREAL />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_RoundLreal : LREAL
VAR_INPUT
   rIn : LREAL;      
   Digit: INT;         
END_VAR

VAR
   d1 : DINT;
   r0,r1,r2,Rdigit: LREAL;               
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// https://forge.codesys.com/forge/talk/Engineering/thread/8d1ee86294/
rdigit   :=INT_TO_LREAL(Digit);
r0 := EXPT(10,rdigit); 
r1 := rIn * r0;
d1 := TRUNC(r1);
r2 := DINT_TO_LREAL(d1);
F_RoundLreal := r2 / r0;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION F_RoundLreal : LREAL
VAR_INPUT
   rIn : LREAL;      
   Digit: INT;         
END_VAR

VAR
   d1 : DINT;
   r0,r1,r2,Rdigit: LREAL;               
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>6e4b5325-49a6-45c7-a436-b44a2066c3ea</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="ParseLogicCmd" pouType="functionBlock">
                <interface>
                  <inputVars>
                    <variable name="Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseLogicCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_LogicCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_i, _j, _k: INT;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <outputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_LogicCmd" />
                      </type>
                    </variable>
                    <variable name="Error">
                      <type>
                        <BOOL />
                      </type>
                    </variable>
                    <variable name="ErrorDescription">
                      <type>
                        <string />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseLogicCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_LogicCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_i, _j, _k: INT;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </outputVars>
                  <localVars>
                    <variable name="_CmdParams">
                      <type>
                        <array>
                          <dimension lower="0" upper="GVL.COMMAND_LEN" />
                          <baseType>
                            <string />
                          </baseType>
                        </array>
                      </type>
                    </variable>
                    <variable name="_i">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_j">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <variable name="_k">
                      <type>
                        <INT />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseLogicCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_LogicCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_i, _j, _k: INT;
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// IF PASS|INPUT|REGISTER|COUNTER &lt;index&gt; &gt;|&lt;|=|&gt;=|&lt;= &lt;value&gt;
// THEN OUTPUT|JUMP|CNTUP|CNTDN|CNTRST|REGISTER|NOP &lt;index&gt; &lt;value&gt;
// ELSE OUTPUT|JUMP|CNTUP|CNTDN|CNTRST|REGISTER|NOP &lt;index&gt; &lt;value&gt;
//
// IF_Condition
// IF_Condition_Idx
// IF_Condition_Operator
// IF_Condition_Operator_Compare
// THEN_Function
// THEN_Function_Value
// THEN_Function_Idx
// ELSE_Function
// ELSE_Function_Idx
// ELSE_Function_Value

Error:=FALSE;
ErrorDescription:='';

// split command string into commands
_CmdParams:=F_SplitCmd(Command:=Command);

//
_i := 0;

// disregard the 'IF'
_i := _i + 1;

//
IF _CmdParams[_i] = TO_STRING(E_LogicIfCondition.PASS) THEN
	stCommand.IF_Condition := E_LogicIfCondition.PASS;
ELSIF  _CmdParams[_i] = TO_STRING(E_LogicIfCondition.INPUT) THEN
	stCommand.IF_Condition := E_LogicIfCondition.INPUT;
ELSIF  _CmdParams[_i] = TO_STRING(E_LogicIfCondition.REGISTER) THEN
	stCommand.IF_Condition := E_LogicIfCondition.REGISTER;
ELSIF  _CmdParams[_i] = TO_STRING(E_LogicIfCondition.COUNTER) THEN
	stCommand.IF_Condition := E_LogicIfCondition.COUNTER;
END_IF
_i := _i + 1;

//
IF stCommand.IF_Condition &lt;&gt; E_LogicIfCondition.PASS THEN
	
	//
	stCommand.IF_Condition_Idx := STRING_TO_INT(_CmdParams[_i]);
	_i := _i + 1;
	
	//
	IF _CmdParams[_i] = TO_STRING(E_LogicIfConditionOperator.GRT) THEN
		stCommand.IF_Condition_Operator := E_LogicIfConditionOperator.GRT;
	ELSIF _CmdParams[_i] = TO_STRING(E_LogicIfConditionOperator.LES) THEN
		stCommand.IF_Condition_Operator := E_LogicIfConditionOperator.LES;                   
	ELSIF _CmdParams[_i] = TO_STRING(E_LogicIfConditionOperator.EQU) THEN
		stCommand.IF_Condition_Operator := E_LogicIfConditionOperator.EQU;
	ELSIF _CmdParams[_i] = TO_STRING(E_LogicIfConditionOperator.GRE) THEN
		stCommand.IF_Condition_Operator := E_LogicIfConditionOperator.GRE;
	ELSIF _CmdParams[_i] = TO_STRING(E_LogicIfConditionOperator.LEQ) THEN
		stCommand.IF_Condition_Operator := E_LogicIfConditionOperator.LEQ;
	END_IF
	_i := _i + 1;
	
	//
	stCommand.IF_Condition_Operator_Value := STRING_TO_UDINT(_CmdParams[_i]);
	_i := _i + 1;
	
END_IF

// disregard the 'THEN'
_i := _i + 1;

//
IF _CmdParams[_i] = TO_STRING(E_LogicFunction.OUTPUT) THEN
	stCommand.THEN_Function := E_LogicFunction.OUTPUT;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.JUMP) THEN
	stCommand.THEN_Function := E_LogicFunction.JUMP;                 
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.CNTUP) THEN
	stCommand.THEN_Function := E_LogicFunction.CNTUP;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.CNTDN) THEN
	stCommand.THEN_Function := E_LogicFunction.CNTDN;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.CNTRST) THEN
	stCommand.THEN_Function := E_LogicFunction.CNTRST;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.REGISTER) THEN
	stCommand.THEN_Function := E_LogicFunction.REGISTER;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.NOP) THEN
	stCommand.THEN_Function := E_LogicFunction.NOP;
END_IF
_i := _i + 1;

//
IF stCommand.THEN_Function &lt;&gt; E_LogicFunction.NOP THEN
	stCommand.THEN_Function_Idx := STRING_TO_INT(_CmdParams[_i]);
	_i := _i + 1;
	IF stCommand.THEN_Function = E_LogicFunction.OUTPUT 
		OR stCommand.THEN_Function = E_LogicFunction.REGISTER THEN
			stCommand.THEN_Function_Value := STRING_TO_UDINT(_CmdParams[_i]);
			_i := _i + 1;
	END_IF
END_IF

// disregard the 'ELSE'
_i := _i + 1;

//
IF _CmdParams[_i] = TO_STRING(E_LogicFunction.OUTPUT) THEN
	stCommand.ELSE_Function := E_LogicFunction.OUTPUT;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.JUMP) THEN
	stCommand.ELSE_Function := E_LogicFunction.JUMP;                 
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.CNTUP) THEN
	stCommand.ELSE_Function := E_LogicFunction.CNTUP;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.CNTDN) THEN
	stCommand.ELSE_Function := E_LogicFunction.CNTDN;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.CNTRST) THEN
	stCommand.ELSE_Function := E_LogicFunction.CNTRST;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.REGISTER) THEN
	stCommand.ELSE_Function := E_LogicFunction.REGISTER;
ELSIF _CmdParams[_i] = TO_STRING(E_LogicFunction.NOP) THEN
	stCommand.ELSE_Function := E_LogicFunction.NOP;
END_IF
_i := _i + 1;

//
IF stCommand.ELSE_Function &lt;&gt; E_LogicFunction.NOP THEN
	stCommand.ELSE_Function_Idx := STRING_TO_INT(_CmdParams[_i]);
	_i := _i + 1;
	IF stCommand.ELSE_Function = E_LogicFunction.OUTPUT 
		OR stCommand.ELSE_Function = E_LogicFunction.REGISTER THEN
			stCommand.ELSE_Function_Value := STRING_TO_UDINT(_CmdParams[_i]);
			_i := _i + 1;
	END_IF
END_IF</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK ParseLogicCmd
VAR_INPUT
	Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR_OUTPUT
	stCommand: ST_LogicCmd;
	Error: BOOL;
	ErrorDescription: STRING;
END_VAR
VAR
	_CmdParams: ARRAY [0..GVL.COMMAND_LEN] OF STRING;
	_i, _j, _k: INT;
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>94719e33-3b96-48b6-b30b-137cf4b2830f</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
              <pou name="BuildLogicCmd" pouType="function">
                <interface>
                  <returnType>
                    <string length="GVL.COMMAND_LEN" />
                  </returnType>
                  <inputVars>
                    <variable name="stCommand">
                      <type>
                        <derived name="ST_LogicCmd" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildLogicCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_LogicCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </inputVars>
                  <localVars>
                    <variable name="_Command">
                      <type>
                        <string length="GVL.COMMAND_LEN" />
                      </type>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildLogicCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_LogicCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                  <localVars constant="true">
                    <variable name="_Delimiter">
                      <type>
                        <string />
                      </type>
                      <initialValue>
                        <simpleValue value="' '" />
                      </initialValue>
                    </variable>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                        <InterfaceAsPlainText>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildLogicCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_LogicCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR
</xhtml>
                        </InterfaceAsPlainText>
                      </data>
                    </addData>
                  </localVars>
                </interface>
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">// IF PASS|INPUT|REGISTER|COUNTER &lt;index&gt; &gt;|&lt;|=|&gt;=|&lt;= &lt;value&gt;
// THEN OUTPUT|JUMP|CNTUP|CNTDN|CNTRST|REGISTER|NOP &lt;index&gt; &lt;value&gt;
// ELSE OUTPUT|JUMP|CNTUP|CNTDN|CNTRST|REGISTER|NOP &lt;index&gt; &lt;value&gt;
//
// IF_Condition
// IF_Condition_Idx
// IF_Condition_Operator
// IF_Condition_Operator_Compare
// THEN_Function
// THEN_Function_Value
// THEN_Function_Idx
// ELSE_Function
// ELSE_Function_Idx
// ELSE_Function_Value

// clear the command
_Command:='';

// build command
F_AddElement(_Command, _Delimiter, 'IF');
F_AddElement(_Command, _Delimiter, TO_STRING(stCommand.IF_Condition));
IF stCommand.IF_Condition &lt;&gt; E_LogicIfCondition.PASS THEN
	F_AddElement(_Command, _Delimiter, INT_TO_STRING(stCommand.IF_Condition_Idx));
	F_AddElement(_Command, _Delimiter, TO_STRING(stCommand.IF_Condition_Operator));
	F_AddElement(_Command, _Delimiter, UDINT_TO_STRING(stCommand.IF_Condition_Operator_Value));
END_IF
F_AddElement(_Command, _Delimiter, 'THEN');
F_AddElement(_Command, _Delimiter, TO_STRING(stCommand.THEN_Function));
IF stCommand.THEN_Function &lt;&gt; E_LogicFunction.NOP THEN
	F_AddElement(_Command, _Delimiter, INT_TO_STRING(stCommand.THEN_Function_Idx));
	IF stCommand.THEN_Function = E_LogicFunction.OUTPUT OR 
		stCommand.THEN_Function = E_LogicFunction.REGISTER THEN
			F_AddElement(_Command, _Delimiter, UDINT_TO_STRING(stCommand.THEN_Function_Value));
	END_IF
END_IF
F_AddElement(_Command, _Delimiter, 'ELSE');
F_AddElement(_Command, _Delimiter, TO_STRING(stCommand.ELSE_Function));
IF stCommand.ELSE_Function &lt;&gt; E_LogicFunction.NOP THEN
	F_AddElement(_Command, _Delimiter, INT_TO_STRING(stCommand.ELSE_Function_Idx));
	IF stCommand.ELSE_Function = E_LogicFunction.OUTPUT 
		OR stCommand.ELSE_Function = E_LogicFunction.REGISTER THEN
			F_AddElement(_Command, _Delimiter, UDINT_TO_STRING(stCommand.ELSE_Function_Value));
	END_IF
END_IF

// set function equal to command
BuildLogicCmd := _Command;</xhtml>
                  </ST>
                </body>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION BuildLogicCmd : STRING(GVL.COMMAND_LEN)
VAR_INPUT
	stCommand: ST_LogicCmd;
END_VAR
VAR
    _Command: STRING(GVL.COMMAND_LEN);
END_VAR
VAR CONSTANT
	_Delimiter: STRING:=' ';
END_VAR
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>c913c794-b56e-4d94-b465-42dec1dfd0be</ObjectId>
                  </data>
                </addData>
              </pou>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/union" handleUnknown="implementation">
              <union name="StringByteArray">
                <variable name="bArray">
                  <type>
                    <array>
                      <dimension lower="0" upper="254" />
                      <baseType>
                        <BYTE />
                      </baseType>
                    </array>
                  </type>
                </variable>
                <variable name="sString">
                  <type>
                    <string length="255" />
                  </type>
                </variable>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
                    <InterfaceAsPlainText>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TYPE StringByteArray :
UNION
	bArray: ARRAY [0..254] OF BYTE;
	sString: STRING(255);
END_UNION
END_TYPE
</xhtml>
                    </InterfaceAsPlainText>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>74ac9c91-8dd0-4804-83eb-55aba09ae987</ObjectId>
                  </data>
                </addData>
              </union>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
              <Libraries>
                <Library Name="#SM3_Robotics" Namespace="SM3_Robotics" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="SM3_Robotics, 4.13.0.0 (3S - Smart Software Solutions GmbH)" />
                <Library Name="#SM3_Robotics_Visu" Namespace="SM3_Robotics_Visu" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="SM3_Robotics_Visu, 4.13.0.0 (3S - Smart Software Solutions GmbH)" />
                <Library Name="#SM3_Transformation" Namespace="TRAFO" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="SM3_Transformation, 4.13.0.0 (3S - Smart Software Solutions GmbH)" />
                <Library Name="#Standard" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Standard, * (System)" />
                <Library Name="#BreakpointLogging" Namespace="BPLog" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Breakpoint Logging Functions, * (3S - Smart Software Solutions GmbH)" />
                <Library Name="#SysTimeCore" Namespace="SysTimeCore" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysTimeCore, * (System)" />
                <Library Name="#CmpTraceMgr" Namespace="CmpTraceMgr" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="CmpTraceMgr, 3.5.0.0 (System)" />
                <Library Name="#MemoryUtils" Namespace="MEMUtils" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="MemoryUtils, * (3S - Smart Software Solutions GmbH)" />
                <Library Name="#CAA Types" Namespace="CAA" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA Types Extern, * (CAA Technical Workgroup)" />
                <Library Name="#VisuDialogs" Namespace="VisuDialogs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="VisuDialogs, * (System)" />
                <Library Name="#SM3_CNC_Visu" Namespace="SM3_CNC_Visu" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SM3_CNC_Visu, * (3S - Smart Software Solutions GmbH)" />
                <Library Name="#StringUtils" Namespace="Stu" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="StringUtils, * (System)" />
                <Library Name="#SysShm" Namespace="SysShm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysShm, * (System)" />
                <Library Name="#Util" Namespace="Util" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Util, * (System)" />
                <Library Name="SysTypes Interfaces, * (System)" Namespace="SysTypes" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
                <Library Name="RaspberryPiCamera, 4.6.0.0 (3S - Smart Software Solutions GmbH)" Namespace="Camera" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" />
                <Library Name="#SysFile" Namespace="SysFile" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysFile, * (System)" />
                <Library Name="#SysProcess" Namespace="SysProcess" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysProcess, * (System)" />
                <Library Name="#CmpBitmapPool" Namespace="CmpBitmapPool" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CmpBitmapPool, * (System)" />
                <Library Name="#SysSocket" Namespace="SysSocket" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysSocket, * (System)" />
                <Library Name="#NetBaseSrv" Namespace="NBS" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Net Base Services, * (3S - Smart Software Solutions GmbH)" />
                <Library Name="SysTypes2 Interfaces, * (System)" Namespace="SysTypes2" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
                <Library Name="#SysTimeRtc" Namespace="SysTimeRtc" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysTimeRtc, * (System)" />
                <Library Name="#IoStandard" Namespace="IoStandard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="true" DefaultResolution="IoStandard, 3.5.17.0 (System)" />
                <Library Name="#SM3_CNC" Namespace="SM3_CNC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="SM3_CNC, 4.13.0.0 (3S - Smart Software Solutions GmbH)" />
                <Library Name="#3SLicense" Namespace="_3S_LICENSE" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="3SLicense, 0.0.0.0 (3S - Smart Software Solutions GmbH)" ResolverGuid="97c3b452-d9fa-4ac2-9d0c-3d420aa6d95b" />
                <Library Name="#SM3_Drive_PosControl" Namespace="SM3_Drive_PosControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="SM3_Drive_PosControl, 4.13.0.0 (3S - Smart Software Solutions GmbH)" />
                <Library Name="#Raspberry Pi Peripherals" Namespace="RasPi" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Raspberry Pi Peripherals, 4.10.0.0 (CODESYS)" />
                <Library Name="Raspberry I2C AdafruitPWM, 4.10.0.0 (CODESYS)" Namespace="AdafruitPWM" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" />
                <Library Name="#SM3_Basic" Namespace="SM3_Basic" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="SM3_Basic, 4.13.0.0 (3S - Smart Software Solutions GmbH)" />
                <Library Name="SM3_Drive_Servo, 4.10.0.0 (CODESYS)" Namespace="SM3_Drive_Servo" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" />
                <Library Name="#CAA Device Diagnosis" Namespace="DED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="CAA Device Diagnosis, 3.5.19.10 (CAA Technical Workgroup)" />
                <Library Name="#System_VisuElems" Namespace="VisuElems" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElems, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemMeter" Namespace="VisuElemMeter" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemMeter, 4.3.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemsSpecialControls" Namespace="VisuElemsSpecialControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsSpecialControls, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemsWinControls" Namespace="VisuElemsWinControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsWinControls, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemTextEditor" Namespace="VisuElemTextEditor" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTextEditor, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemTrace" Namespace="VisuElemTrace" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTrace, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuNativeControl" Namespace="VisuNativeControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuNativeControl, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemsAlarm" Namespace="VisuElemsAlarm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsAlarm, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemCamDisplayer" Namespace="VisuElemCamDisplayer" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemCamDisplayer, 4.2.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElem3DPath" Namespace="VisuElem3DPath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElem3DPath, 4.1.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemsDateTime" Namespace="VisuElemsDateTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsDateTime, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuElemXYChart" Namespace="VisuElemXYChart" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemXYChart, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="#System_VisuInputs" Namespace="VisuInputs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuInputs, 4.2.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
                <Library Name="IoDrvGPIO, 4.10.0.0 (CODESYS)" Namespace="IoDrvGPIO" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" />
                <Library Name="#VisuUtils" Namespace="VU" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Visu Utils, * (System)" />
                <Library Name="#OMAC_PackML_State_Machine" Namespace="PACK_ML" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="OMAC PackML State Machine, * (3S - Smart Software Solutions GmbH)" />
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>80af59fb-8d62-4f6c-95b0-580a98d81b1e</ObjectId>
                  </data>
                </addData>
              </Libraries>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
              <BuildProperties>
                <CompilerDefines>GENERATE_OVERLAY_VISU,VISU_USEPROPERTYINFO</CompilerDefines>
              </BuildProperties>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>7babeec2-008b-4bd3-b402-84e2c4d6ae83</ObjectId>
            </data>
          </addData>
        </resource>
        <addData>
          <data name="Device" handleUnknown="discard">
            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
              <DeviceType>
                <DeviceIdentification>
                  <Type>4102</Type>
                  <Id>0000 0011</Id>
                  <Version>4.10.0.0</Version>
                </DeviceIdentification>
                <Connector moduleType="256" interface="Common.PCI" connectorId="0">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="1280" interface="GPIOSysfs" connectorId="1">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="1279" interface="Common.SoftMotion.General" connectorId="2">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="504" interface="Raspberry.GPIOs" connectorId="3">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="769" interface="SafetyInterface" connectorId="4">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="499" interface="Raspberry.OnewireMaster" connectorId="5">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="502" interface="Raspberry.Camera2" connectorId="6">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="497" interface="Raspberry.SPIMaster" connectorId="7">
                  <HostParameterSet />
                </Connector>
                <Connector moduleType="496" interface="Raspberry.I2CMaster" connectorId="8">
                  <HostParameterSet />
                </Connector>
                <DeviceParameterSet />
              </DeviceType>
            </Device>
          </data>
          <data name="configurations" handleUnknown="discard">
            <configurations>
              <configuration name="SoftMotion General Axis Pool">
                <addData>
                  <data name="ExplicitConnector" handleUnknown="discard">
                    <ExplicitConnector connectorID="2" />
                  </data>
                  <data name="configurations" handleUnknown="discard">
                    <configurations>
                      <configuration name="SM_Drive_PosControl_J1">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>1025</Type>
                                  <Id>0000 0001</Id>
                                  <Version>4.12.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="1025" role="child" interface="Common.SoftMotion.General" connectorId="0">
                                  <HostParameterSet>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Standard</Name>
                                      <Description />
                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                        <Attributes />
                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">0</Value>
                                        <Name>wDriveID</Name>
                                        <Description>Unique ID of the drive</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                        <Attributes />
                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                        <Name>bVirtual</Name>
                                        <Description>Whether the drive is simulated</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                        <Attributes />
                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                        <Name>iMovementType</Name>
                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                        <Attributes />
                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                        <Name>fPositionPeriod</Name>
                                        <Description>Modulo period value for modulo drives [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                        <Attributes />
                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">2</Value>
                                        <Name>eRampType</Name>
                                        <Description>The velocity ramp used for trajectories.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                        <Attributes />
                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">100</Value>
                                        <Name>fSWMaxVelocity</Name>
                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                        <Attributes />
                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxAcceleration</Name>
                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                        <Attributes />
                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxDeceleration</Name>
                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                        <Attributes />
                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                        <Name>fSWMaxJerk</Name>
                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                        <Attributes />
                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                        <Name>fRampJerk</Name>
                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                        <Attributes />
                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">175</Value>
                                        <Name>fSWLimitPositive</Name>
                                        <Description>Software limit in positive direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                        <Attributes />
                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">-150</Value>
                                        <Name>fSWLimitNegative</Name>
                                        <Description>Software limit in negative direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                        <Attributes />
                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                        <Name>fSWLimitDeceleration</Name>
                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                        <Attributes />
                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">TRUE</Value>
                                        <Name>bSWLimitEnable</Name>
                                        <Description>Activate/deactivate software limits</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                        <Attributes />
                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                        <Name>eCheckPositionLag</Name>
                                        <Description>Position lag mode</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                        <Attributes />
                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                        <Name>fMaxPositionLag</Name>
                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                        <Attributes />
                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                        <Name>fSWErrorMaxDistance</Name>
                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Scalings</Name>
                                      <Description />
                                      <Parameter ParameterId="1051" type="std:DWORD" IndexInDevDesc="17">
                                        <Attributes />
                                        <Value name="_x0031_051" visiblename="dwRatioTechUnitsDenom" desc="conversion inc./tech.units denominator">4000</Value>
                                        <Name>dwRatioTechUnitsDenom</Name>
                                        <Description>conversion inc./tech.units denominator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1052" type="std:DINT" IndexInDevDesc="18">
                                        <Attributes />
                                        <Value name="_x0031_052" visiblename="iRatioTechUnitsNum" desc="conversion inc./tech.units numerator">9</Value>
                                        <Name>iRatioTechUnitsNum</Name>
                                        <Description>conversion inc./tech.units numerator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="5000" type="std:DINT" IndexInDevDesc="19">
                                        <Attributes />
                                        <Value name="_x0035_000" visiblename="ScalingIncs">160000</Value>
                                        <Name>ScalingIncs</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5001" type="std:DINT" IndexInDevDesc="20">
                                        <Attributes />
                                        <Value name="_x0035_001" visiblename="ScalingMotorTurns1">1</Value>
                                        <Name>ScalingMotorTurns1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5002" type="std:DINT" IndexInDevDesc="21">
                                        <Attributes />
                                        <Value name="_x0035_002" visiblename="ScalingMotorTurns2">1</Value>
                                        <Name>ScalingMotorTurns2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5003" type="std:DINT" IndexInDevDesc="22">
                                        <Attributes />
                                        <Value name="_x0035_003" visiblename="ScalingGearOutput1">1</Value>
                                        <Name>ScalingGearOutput1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5004" type="std:DINT" IndexInDevDesc="23">
                                        <Attributes />
                                        <Value name="_x0035_004" visiblename="ScalingGearOutput2">1</Value>
                                        <Name>ScalingGearOutput2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5005" type="std:DINT" IndexInDevDesc="24">
                                        <Attributes />
                                        <Value name="_x0035_005" visiblename="ScalingUnits">360</Value>
                                        <Name>ScalingUnits</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5006" type="std:BOOL" IndexInDevDesc="25">
                                        <Attributes />
                                        <Value name="_x0035_006" visiblename="InvertDirection">FALSE</Value>
                                        <Name>InvertDirection</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Input</Name>
                                      <Description />
                                      <Parameter ParameterId="10000" type="std:USINT" IndexInDevDesc="26">
                                        <Attributes />
                                        <Value name="_x0031_0000" visiblename="EncoderBitWidth">32</Value>
                                        <Name>EncoderBitWidth</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Output</Name>
                                      <Description />
                                      <Parameter ParameterId="10100" type="std:DINT" IndexInDevDesc="27">
                                        <Attributes />
                                        <Value name="_x0031_0100" visiblename="MaximumOutputVelocityInt">16#0064</Value>
                                        <Name>MaximumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10101" type="std:LREAL" IndexInDevDesc="28">
                                        <Attributes />
                                        <Value name="_x0031_0101" visiblename="MaximumOutputVelocityTU">100.0</Value>
                                        <Name>MaximumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10102" type="std:DINT" IndexInDevDesc="29">
                                        <Attributes />
                                        <Value name="_x0031_0102" visiblename="MinimumOutputVelocityInt">-16#0064</Value>
                                        <Name>MinimumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10103" type="std:LREAL" IndexInDevDesc="30">
                                        <Attributes />
                                        <Value name="_x0031_0103" visiblename="MinimumOutputVelocityTU">-100.0</Value>
                                        <Name>MinimumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10104" type="std:DINT" IndexInDevDesc="31">
                                        <Attributes />
                                        <Value name="_x0031_0104" visiblename="ZeroVelocityInt">0</Value>
                                        <Name>ZeroVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10105" type="std:BOOL" IndexInDevDesc="32">
                                        <Attributes />
                                        <Value name="_x0031_0105" visiblename="DirectionInverted">FALSE</Value>
                                        <Name>DirectionInverted</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Controller</Name>
                                      <Description />
                                      <Parameter ParameterId="10200" type="std:LREAL" IndexInDevDesc="33">
                                        <Attributes />
                                        <Value name="_x0031_0200" visiblename="Kp" desc="Proportional gain for lag error">0.0007</Value>
                                        <Name>Kp</Name>
                                        <Description>Proportional gain for lag error</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10202" type="std:LREAL" IndexInDevDesc="34">
                                        <Attributes />
                                        <Value name="_x0031_0202" visiblename="MaxFollowingError" desc="Maximum position lag">0.0</Value>
                                        <Name>MaxFollowingError</Name>
                                        <Description>Maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10203" type="std:BOOL" IndexInDevDesc="35">
                                        <Attributes />
                                        <Value name="_x0031_0203" visiblename="EnableFollowingErrorCheck" desc="Switch on checking of maximum position lag">FALSE</Value>
                                        <Name>EnableFollowingErrorCheck</Name>
                                        <Description>Switch on checking of maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10204" type="std:LREAL" IndexInDevDesc="36">
                                        <Attributes />
                                        <Value name="_x0031_0204" visiblename="PartVelocityPilotControl" desc="Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)">0</Value>
                                        <Name>PartVelocityPilotControl</Name>
                                        <Description>Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10205" type="std:LREAL" IndexInDevDesc="37">
                                        <Attributes />
                                        <Value name="_x0031_0205" visiblename="DeadTime" desc="Time lag in cycles between fSetPosition and fActPosition">400</Value>
                                        <Name>DeadTime</Name>
                                        <Description>Time lag in cycles between fSetPosition and fActPosition</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <Parameter ParameterId="5007" type="std:BOOL">
                                      <Attributes onlineaccess="read" />
                                      <Value name="_x0035_007" visiblename="IsLinearMotor" onlineaccess="read">FALSE</Value>
                                      <Name>IsLinearMotor</Name>
                                    </Parameter>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>ea5425f8-6865-4929-8ce6-5dc4d6d3dc5e</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                      <configuration name="SM_Drive_PosControl_J2">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>1025</Type>
                                  <Id>0000 0001</Id>
                                  <Version>4.12.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="1025" role="child" interface="Common.SoftMotion.General" connectorId="0">
                                  <HostParameterSet>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Standard</Name>
                                      <Description />
                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                        <Attributes />
                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">1</Value>
                                        <Name>wDriveID</Name>
                                        <Description>Unique ID of the drive</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                        <Attributes />
                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                        <Name>bVirtual</Name>
                                        <Description>Whether the drive is simulated</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                        <Attributes />
                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                        <Name>iMovementType</Name>
                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                        <Attributes />
                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                        <Name>fPositionPeriod</Name>
                                        <Description>Modulo period value for modulo drives [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                        <Attributes />
                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">2</Value>
                                        <Name>eRampType</Name>
                                        <Description>The velocity ramp used for trajectories.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                        <Attributes />
                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">100</Value>
                                        <Name>fSWMaxVelocity</Name>
                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                        <Attributes />
                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxAcceleration</Name>
                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                        <Attributes />
                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxDeceleration</Name>
                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                        <Attributes />
                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                        <Name>fSWMaxJerk</Name>
                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                        <Attributes />
                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                        <Name>fRampJerk</Name>
                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                        <Attributes />
                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">50</Value>
                                        <Name>fSWLimitPositive</Name>
                                        <Description>Software limit in positive direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                        <Attributes />
                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">-95</Value>
                                        <Name>fSWLimitNegative</Name>
                                        <Description>Software limit in negative direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                        <Attributes />
                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                        <Name>fSWLimitDeceleration</Name>
                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                        <Attributes />
                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">TRUE</Value>
                                        <Name>bSWLimitEnable</Name>
                                        <Description>Activate/deactivate software limits</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                        <Attributes />
                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                        <Name>eCheckPositionLag</Name>
                                        <Description>Position lag mode</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                        <Attributes />
                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                        <Name>fMaxPositionLag</Name>
                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                        <Attributes />
                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                        <Name>fSWErrorMaxDistance</Name>
                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Scalings</Name>
                                      <Description />
                                      <Parameter ParameterId="1051" type="std:DWORD" IndexInDevDesc="17">
                                        <Attributes />
                                        <Value name="_x0031_051" visiblename="dwRatioTechUnitsDenom" desc="conversion inc./tech.units denominator">5000</Value>
                                        <Name>dwRatioTechUnitsDenom</Name>
                                        <Description>conversion inc./tech.units denominator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1052" type="std:DINT" IndexInDevDesc="18">
                                        <Attributes />
                                        <Value name="_x0031_052" visiblename="iRatioTechUnitsNum" desc="conversion inc./tech.units numerator">-9</Value>
                                        <Name>iRatioTechUnitsNum</Name>
                                        <Description>conversion inc./tech.units numerator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="5000" type="std:DINT" IndexInDevDesc="19">
                                        <Attributes />
                                        <Value name="_x0035_000" visiblename="ScalingIncs">200000</Value>
                                        <Name>ScalingIncs</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5001" type="std:DINT" IndexInDevDesc="20">
                                        <Attributes />
                                        <Value name="_x0035_001" visiblename="ScalingMotorTurns1">1</Value>
                                        <Name>ScalingMotorTurns1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5002" type="std:DINT" IndexInDevDesc="21">
                                        <Attributes />
                                        <Value name="_x0035_002" visiblename="ScalingMotorTurns2">1</Value>
                                        <Name>ScalingMotorTurns2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5003" type="std:DINT" IndexInDevDesc="22">
                                        <Attributes />
                                        <Value name="_x0035_003" visiblename="ScalingGearOutput1">1</Value>
                                        <Name>ScalingGearOutput1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5004" type="std:DINT" IndexInDevDesc="23">
                                        <Attributes />
                                        <Value name="_x0035_004" visiblename="ScalingGearOutput2">1</Value>
                                        <Name>ScalingGearOutput2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5005" type="std:DINT" IndexInDevDesc="24">
                                        <Attributes />
                                        <Value name="_x0035_005" visiblename="ScalingUnits">360</Value>
                                        <Name>ScalingUnits</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5006" type="std:BOOL" IndexInDevDesc="25">
                                        <Attributes />
                                        <Value name="_x0035_006" visiblename="InvertDirection">TRUE</Value>
                                        <Name>InvertDirection</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Input</Name>
                                      <Description />
                                      <Parameter ParameterId="10000" type="std:USINT" IndexInDevDesc="26">
                                        <Attributes />
                                        <Value name="_x0031_0000" visiblename="EncoderBitWidth">32</Value>
                                        <Name>EncoderBitWidth</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Output</Name>
                                      <Description />
                                      <Parameter ParameterId="10100" type="std:DINT" IndexInDevDesc="27">
                                        <Attributes />
                                        <Value name="_x0031_0100" visiblename="MaximumOutputVelocityInt">16#0064</Value>
                                        <Name>MaximumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10101" type="std:LREAL" IndexInDevDesc="28">
                                        <Attributes />
                                        <Value name="_x0031_0101" visiblename="MaximumOutputVelocityTU">100.0</Value>
                                        <Name>MaximumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10102" type="std:DINT" IndexInDevDesc="29">
                                        <Attributes />
                                        <Value name="_x0031_0102" visiblename="MinimumOutputVelocityInt">-16#0064</Value>
                                        <Name>MinimumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10103" type="std:LREAL" IndexInDevDesc="30">
                                        <Attributes />
                                        <Value name="_x0031_0103" visiblename="MinimumOutputVelocityTU">-100.0</Value>
                                        <Name>MinimumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10104" type="std:DINT" IndexInDevDesc="31">
                                        <Attributes />
                                        <Value name="_x0031_0104" visiblename="ZeroVelocityInt">0</Value>
                                        <Name>ZeroVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10105" type="std:BOOL" IndexInDevDesc="32">
                                        <Attributes />
                                        <Value name="_x0031_0105" visiblename="DirectionInverted">FALSE</Value>
                                        <Name>DirectionInverted</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Controller</Name>
                                      <Description />
                                      <Parameter ParameterId="10200" type="std:LREAL" IndexInDevDesc="33">
                                        <Attributes />
                                        <Value name="_x0031_0200" visiblename="Kp" desc="Proportional gain for lag error">0.0005</Value>
                                        <Name>Kp</Name>
                                        <Description>Proportional gain for lag error</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10202" type="std:LREAL" IndexInDevDesc="34">
                                        <Attributes />
                                        <Value name="_x0031_0202" visiblename="MaxFollowingError" desc="Maximum position lag">0.0</Value>
                                        <Name>MaxFollowingError</Name>
                                        <Description>Maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10203" type="std:BOOL" IndexInDevDesc="35">
                                        <Attributes />
                                        <Value name="_x0031_0203" visiblename="EnableFollowingErrorCheck" desc="Switch on checking of maximum position lag">FALSE</Value>
                                        <Name>EnableFollowingErrorCheck</Name>
                                        <Description>Switch on checking of maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10204" type="std:LREAL" IndexInDevDesc="36">
                                        <Attributes />
                                        <Value name="_x0031_0204" visiblename="PartVelocityPilotControl" desc="Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)">0</Value>
                                        <Name>PartVelocityPilotControl</Name>
                                        <Description>Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10205" type="std:LREAL" IndexInDevDesc="37">
                                        <Attributes />
                                        <Value name="_x0031_0205" visiblename="DeadTime" desc="Time lag in cycles between fSetPosition and fActPosition">400</Value>
                                        <Name>DeadTime</Name>
                                        <Description>Time lag in cycles between fSetPosition and fActPosition</Description>
                                      </Parameter>
                                    </ParameterSection>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>f766e900-5390-4dbe-b5d5-456b0a97d174</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                      <configuration name="SM_Drive_PosControl_J3">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>1025</Type>
                                  <Id>0000 0001</Id>
                                  <Version>4.12.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="1025" role="child" interface="Common.SoftMotion.General" connectorId="0">
                                  <HostParameterSet>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Standard</Name>
                                      <Description />
                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                        <Attributes />
                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">2</Value>
                                        <Name>wDriveID</Name>
                                        <Description>Unique ID of the drive</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                        <Attributes />
                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                        <Name>bVirtual</Name>
                                        <Description>Whether the drive is simulated</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                        <Attributes />
                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                        <Name>iMovementType</Name>
                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                        <Attributes />
                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                        <Name>fPositionPeriod</Name>
                                        <Description>Modulo period value for modulo drives [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                        <Attributes />
                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">2</Value>
                                        <Name>eRampType</Name>
                                        <Description>The velocity ramp used for trajectories.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                        <Attributes />
                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">100</Value>
                                        <Name>fSWMaxVelocity</Name>
                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                        <Attributes />
                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxAcceleration</Name>
                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                        <Attributes />
                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxDeceleration</Name>
                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                        <Attributes />
                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                        <Name>fSWMaxJerk</Name>
                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                        <Attributes />
                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                        <Name>fRampJerk</Name>
                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                        <Attributes />
                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">130</Value>
                                        <Name>fSWLimitPositive</Name>
                                        <Description>Software limit in positive direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                        <Attributes />
                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">-60</Value>
                                        <Name>fSWLimitNegative</Name>
                                        <Description>Software limit in negative direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                        <Attributes />
                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                        <Name>fSWLimitDeceleration</Name>
                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                        <Attributes />
                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">TRUE</Value>
                                        <Name>bSWLimitEnable</Name>
                                        <Description>Activate/deactivate software limits</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                        <Attributes />
                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                        <Name>eCheckPositionLag</Name>
                                        <Description>Position lag mode</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                        <Attributes />
                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                        <Name>fMaxPositionLag</Name>
                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                        <Attributes />
                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                        <Name>fSWErrorMaxDistance</Name>
                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Scalings</Name>
                                      <Description />
                                      <Parameter ParameterId="1051" type="std:DWORD" IndexInDevDesc="17">
                                        <Attributes />
                                        <Value name="_x0031_051" visiblename="dwRatioTechUnitsDenom" desc="conversion inc./tech.units denominator">5000</Value>
                                        <Name>dwRatioTechUnitsDenom</Name>
                                        <Description>conversion inc./tech.units denominator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1052" type="std:DINT" IndexInDevDesc="18">
                                        <Attributes />
                                        <Value name="_x0031_052" visiblename="iRatioTechUnitsNum" desc="conversion inc./tech.units numerator">-9</Value>
                                        <Name>iRatioTechUnitsNum</Name>
                                        <Description>conversion inc./tech.units numerator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="5000" type="std:DINT" IndexInDevDesc="19">
                                        <Attributes />
                                        <Value name="_x0035_000" visiblename="ScalingIncs">200000</Value>
                                        <Name>ScalingIncs</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5001" type="std:DINT" IndexInDevDesc="20">
                                        <Attributes />
                                        <Value name="_x0035_001" visiblename="ScalingMotorTurns1">1</Value>
                                        <Name>ScalingMotorTurns1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5002" type="std:DINT" IndexInDevDesc="21">
                                        <Attributes />
                                        <Value name="_x0035_002" visiblename="ScalingMotorTurns2">1</Value>
                                        <Name>ScalingMotorTurns2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5003" type="std:DINT" IndexInDevDesc="22">
                                        <Attributes />
                                        <Value name="_x0035_003" visiblename="ScalingGearOutput1">1</Value>
                                        <Name>ScalingGearOutput1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5004" type="std:DINT" IndexInDevDesc="23">
                                        <Attributes />
                                        <Value name="_x0035_004" visiblename="ScalingGearOutput2">1</Value>
                                        <Name>ScalingGearOutput2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5005" type="std:DINT" IndexInDevDesc="24">
                                        <Attributes />
                                        <Value name="_x0035_005" visiblename="ScalingUnits">360</Value>
                                        <Name>ScalingUnits</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5006" type="std:BOOL" IndexInDevDesc="25">
                                        <Attributes />
                                        <Value name="_x0035_006" visiblename="InvertDirection">TRUE</Value>
                                        <Name>InvertDirection</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Input</Name>
                                      <Description />
                                      <Parameter ParameterId="10000" type="std:USINT" IndexInDevDesc="26">
                                        <Attributes />
                                        <Value name="_x0031_0000" visiblename="EncoderBitWidth">32</Value>
                                        <Name>EncoderBitWidth</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Output</Name>
                                      <Description />
                                      <Parameter ParameterId="10100" type="std:DINT" IndexInDevDesc="27">
                                        <Attributes />
                                        <Value name="_x0031_0100" visiblename="MaximumOutputVelocityInt">16#0064</Value>
                                        <Name>MaximumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10101" type="std:LREAL" IndexInDevDesc="28">
                                        <Attributes />
                                        <Value name="_x0031_0101" visiblename="MaximumOutputVelocityTU">100.0</Value>
                                        <Name>MaximumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10102" type="std:DINT" IndexInDevDesc="29">
                                        <Attributes />
                                        <Value name="_x0031_0102" visiblename="MinimumOutputVelocityInt">-16#0064</Value>
                                        <Name>MinimumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10103" type="std:LREAL" IndexInDevDesc="30">
                                        <Attributes />
                                        <Value name="_x0031_0103" visiblename="MinimumOutputVelocityTU">-100.0</Value>
                                        <Name>MinimumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10104" type="std:DINT" IndexInDevDesc="31">
                                        <Attributes />
                                        <Value name="_x0031_0104" visiblename="ZeroVelocityInt">0</Value>
                                        <Name>ZeroVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10105" type="std:BOOL" IndexInDevDesc="32">
                                        <Attributes />
                                        <Value name="_x0031_0105" visiblename="DirectionInverted">FALSE</Value>
                                        <Name>DirectionInverted</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Controller</Name>
                                      <Description />
                                      <Parameter ParameterId="10200" type="std:LREAL" IndexInDevDesc="33">
                                        <Attributes />
                                        <Value name="_x0031_0200" visiblename="Kp" desc="Proportional gain for lag error">0.0001</Value>
                                        <Name>Kp</Name>
                                        <Description>Proportional gain for lag error</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10202" type="std:LREAL" IndexInDevDesc="34">
                                        <Attributes />
                                        <Value name="_x0031_0202" visiblename="MaxFollowingError" desc="Maximum position lag">0.0</Value>
                                        <Name>MaxFollowingError</Name>
                                        <Description>Maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10203" type="std:BOOL" IndexInDevDesc="35">
                                        <Attributes />
                                        <Value name="_x0031_0203" visiblename="EnableFollowingErrorCheck" desc="Switch on checking of maximum position lag">FALSE</Value>
                                        <Name>EnableFollowingErrorCheck</Name>
                                        <Description>Switch on checking of maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10204" type="std:LREAL" IndexInDevDesc="36">
                                        <Attributes />
                                        <Value name="_x0031_0204" visiblename="PartVelocityPilotControl" desc="Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)">0</Value>
                                        <Name>PartVelocityPilotControl</Name>
                                        <Description>Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10205" type="std:LREAL" IndexInDevDesc="37">
                                        <Attributes />
                                        <Value name="_x0031_0205" visiblename="DeadTime" desc="Time lag in cycles between fSetPosition and fActPosition">600</Value>
                                        <Name>DeadTime</Name>
                                        <Description>Time lag in cycles between fSetPosition and fActPosition</Description>
                                      </Parameter>
                                    </ParameterSection>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>fac32d5d-3aea-4666-a5e5-5873ea0cd436</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                      <configuration name="SM_Drive_PosControl_J4">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>1025</Type>
                                  <Id>0000 0001</Id>
                                  <Version>4.12.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="1025" role="child" interface="Common.SoftMotion.General" connectorId="0">
                                  <HostParameterSet>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Standard</Name>
                                      <Description />
                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                        <Attributes />
                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">6</Value>
                                        <Name>wDriveID</Name>
                                        <Description>Unique ID of the drive</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                        <Attributes />
                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                        <Name>bVirtual</Name>
                                        <Description>Whether the drive is simulated</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                        <Attributes />
                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                        <Name>iMovementType</Name>
                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                        <Attributes />
                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                        <Name>fPositionPeriod</Name>
                                        <Description>Modulo period value for modulo drives [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                        <Attributes />
                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">2</Value>
                                        <Name>eRampType</Name>
                                        <Description>The velocity ramp used for trajectories.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                        <Attributes />
                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">100</Value>
                                        <Name>fSWMaxVelocity</Name>
                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                        <Attributes />
                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxAcceleration</Name>
                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                        <Attributes />
                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxDeceleration</Name>
                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                        <Attributes />
                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                        <Name>fSWMaxJerk</Name>
                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                        <Attributes />
                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                        <Name>fRampJerk</Name>
                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                        <Attributes />
                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">150</Value>
                                        <Name>fSWLimitPositive</Name>
                                        <Description>Software limit in positive direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                        <Attributes />
                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">-170</Value>
                                        <Name>fSWLimitNegative</Name>
                                        <Description>Software limit in negative direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                        <Attributes />
                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                        <Name>fSWLimitDeceleration</Name>
                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                        <Attributes />
                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">TRUE</Value>
                                        <Name>bSWLimitEnable</Name>
                                        <Description>Activate/deactivate software limits</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                        <Attributes />
                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                        <Name>eCheckPositionLag</Name>
                                        <Description>Position lag mode</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                        <Attributes />
                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                        <Name>fMaxPositionLag</Name>
                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                        <Attributes />
                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                        <Name>fSWErrorMaxDistance</Name>
                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Scalings</Name>
                                      <Description />
                                      <Parameter ParameterId="1051" type="std:DWORD" IndexInDevDesc="17">
                                        <Attributes />
                                        <Value name="_x0031_051" visiblename="dwRatioTechUnitsDenom" desc="conversion inc./tech.units denominator">6409</Value>
                                        <Name>dwRatioTechUnitsDenom</Name>
                                        <Description>conversion inc./tech.units denominator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1052" type="std:DINT" IndexInDevDesc="18">
                                        <Attributes />
                                        <Value name="_x0031_052" visiblename="iRatioTechUnitsNum" desc="conversion inc./tech.units numerator">-15</Value>
                                        <Name>iRatioTechUnitsNum</Name>
                                        <Description>conversion inc./tech.units numerator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="5000" type="std:DINT" IndexInDevDesc="19">
                                        <Attributes />
                                        <Value name="_x0035_000" visiblename="ScalingIncs">153816</Value>
                                        <Name>ScalingIncs</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5001" type="std:DINT" IndexInDevDesc="20">
                                        <Attributes />
                                        <Value name="_x0035_001" visiblename="ScalingMotorTurns1">1</Value>
                                        <Name>ScalingMotorTurns1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5002" type="std:DINT" IndexInDevDesc="21">
                                        <Attributes />
                                        <Value name="_x0035_002" visiblename="ScalingMotorTurns2">1</Value>
                                        <Name>ScalingMotorTurns2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5003" type="std:DINT" IndexInDevDesc="22">
                                        <Attributes />
                                        <Value name="_x0035_003" visiblename="ScalingGearOutput1">1</Value>
                                        <Name>ScalingGearOutput1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5004" type="std:DINT" IndexInDevDesc="23">
                                        <Attributes />
                                        <Value name="_x0035_004" visiblename="ScalingGearOutput2">1</Value>
                                        <Name>ScalingGearOutput2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5005" type="std:DINT" IndexInDevDesc="24">
                                        <Attributes />
                                        <Value name="_x0035_005" visiblename="ScalingUnits">360</Value>
                                        <Name>ScalingUnits</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5006" type="std:BOOL" IndexInDevDesc="25">
                                        <Attributes />
                                        <Value name="_x0035_006" visiblename="InvertDirection">TRUE</Value>
                                        <Name>InvertDirection</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Input</Name>
                                      <Description />
                                      <Parameter ParameterId="10000" type="std:USINT" IndexInDevDesc="26">
                                        <Attributes />
                                        <Value name="_x0031_0000" visiblename="EncoderBitWidth">32</Value>
                                        <Name>EncoderBitWidth</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Output</Name>
                                      <Description />
                                      <Parameter ParameterId="10100" type="std:DINT" IndexInDevDesc="27">
                                        <Attributes />
                                        <Value name="_x0031_0100" visiblename="MaximumOutputVelocityInt">16#0064</Value>
                                        <Name>MaximumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10101" type="std:LREAL" IndexInDevDesc="28">
                                        <Attributes />
                                        <Value name="_x0031_0101" visiblename="MaximumOutputVelocityTU">100.0</Value>
                                        <Name>MaximumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10102" type="std:DINT" IndexInDevDesc="29">
                                        <Attributes />
                                        <Value name="_x0031_0102" visiblename="MinimumOutputVelocityInt">-16#0064</Value>
                                        <Name>MinimumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10103" type="std:LREAL" IndexInDevDesc="30">
                                        <Attributes />
                                        <Value name="_x0031_0103" visiblename="MinimumOutputVelocityTU">-100.0</Value>
                                        <Name>MinimumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10104" type="std:DINT" IndexInDevDesc="31">
                                        <Attributes />
                                        <Value name="_x0031_0104" visiblename="ZeroVelocityInt">0</Value>
                                        <Name>ZeroVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10105" type="std:BOOL" IndexInDevDesc="32">
                                        <Attributes />
                                        <Value name="_x0031_0105" visiblename="DirectionInverted">FALSE</Value>
                                        <Name>DirectionInverted</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Controller</Name>
                                      <Description />
                                      <Parameter ParameterId="10200" type="std:LREAL" IndexInDevDesc="33">
                                        <Attributes />
                                        <Value name="_x0031_0200" visiblename="Kp" desc="Proportional gain for lag error">0.0005</Value>
                                        <Name>Kp</Name>
                                        <Description>Proportional gain for lag error</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10202" type="std:LREAL" IndexInDevDesc="34">
                                        <Attributes />
                                        <Value name="_x0031_0202" visiblename="MaxFollowingError" desc="Maximum position lag">0.0</Value>
                                        <Name>MaxFollowingError</Name>
                                        <Description>Maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10203" type="std:BOOL" IndexInDevDesc="35">
                                        <Attributes />
                                        <Value name="_x0031_0203" visiblename="EnableFollowingErrorCheck" desc="Switch on checking of maximum position lag">FALSE</Value>
                                        <Name>EnableFollowingErrorCheck</Name>
                                        <Description>Switch on checking of maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10204" type="std:LREAL" IndexInDevDesc="36">
                                        <Attributes />
                                        <Value name="_x0031_0204" visiblename="PartVelocityPilotControl" desc="Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)">0</Value>
                                        <Name>PartVelocityPilotControl</Name>
                                        <Description>Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10205" type="std:LREAL" IndexInDevDesc="37">
                                        <Attributes />
                                        <Value name="_x0031_0205" visiblename="DeadTime" desc="Time lag in cycles between fSetPosition and fActPosition">600</Value>
                                        <Name>DeadTime</Name>
                                        <Description>Time lag in cycles between fSetPosition and fActPosition</Description>
                                      </Parameter>
                                    </ParameterSection>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>da228668-0441-4fbf-bc36-c60a4adec10a</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                      <configuration name="SM_Drive_PosControl_J5">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>1025</Type>
                                  <Id>0000 0001</Id>
                                  <Version>4.12.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="1025" role="child" interface="Common.SoftMotion.General" connectorId="0">
                                  <HostParameterSet>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Standard</Name>
                                      <Description />
                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                        <Attributes />
                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">4</Value>
                                        <Name>wDriveID</Name>
                                        <Description>Unique ID of the drive</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                        <Attributes />
                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                        <Name>bVirtual</Name>
                                        <Description>Whether the drive is simulated</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                        <Attributes />
                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                        <Name>iMovementType</Name>
                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                        <Attributes />
                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                        <Name>fPositionPeriod</Name>
                                        <Description>Modulo period value for modulo drives [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                        <Attributes />
                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">2</Value>
                                        <Name>eRampType</Name>
                                        <Description>The velocity ramp used for trajectories.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                        <Attributes />
                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">100</Value>
                                        <Name>fSWMaxVelocity</Name>
                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                        <Attributes />
                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxAcceleration</Name>
                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                        <Attributes />
                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxDeceleration</Name>
                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                        <Attributes />
                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                        <Name>fSWMaxJerk</Name>
                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                        <Attributes />
                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                        <Name>fRampJerk</Name>
                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                        <Attributes />
                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">110</Value>
                                        <Name>fSWLimitPositive</Name>
                                        <Description>Software limit in positive direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                        <Attributes />
                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">-110</Value>
                                        <Name>fSWLimitNegative</Name>
                                        <Description>Software limit in negative direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                        <Attributes />
                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                        <Name>fSWLimitDeceleration</Name>
                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                        <Attributes />
                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">TRUE</Value>
                                        <Name>bSWLimitEnable</Name>
                                        <Description>Activate/deactivate software limits</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                        <Attributes />
                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                        <Name>eCheckPositionLag</Name>
                                        <Description>Position lag mode</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                        <Attributes />
                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                        <Name>fMaxPositionLag</Name>
                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                        <Attributes />
                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                        <Name>fSWErrorMaxDistance</Name>
                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Scalings</Name>
                                      <Description />
                                      <Parameter ParameterId="1051" type="std:DWORD" IndexInDevDesc="17">
                                        <Attributes />
                                        <Value name="_x0031_051" visiblename="dwRatioTechUnitsDenom" desc="conversion inc./tech.units denominator">1309</Value>
                                        <Name>dwRatioTechUnitsDenom</Name>
                                        <Description>conversion inc./tech.units denominator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1052" type="std:DINT" IndexInDevDesc="18">
                                        <Attributes />
                                        <Value name="_x0031_052" visiblename="iRatioTechUnitsNum" desc="conversion inc./tech.units numerator">12</Value>
                                        <Name>iRatioTechUnitsNum</Name>
                                        <Description>conversion inc./tech.units numerator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="5000" type="std:DINT" IndexInDevDesc="19">
                                        <Attributes />
                                        <Value name="_x0035_000" visiblename="ScalingIncs">39270</Value>
                                        <Name>ScalingIncs</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5001" type="std:DINT" IndexInDevDesc="20">
                                        <Attributes />
                                        <Value name="_x0035_001" visiblename="ScalingMotorTurns1">1</Value>
                                        <Name>ScalingMotorTurns1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5002" type="std:DINT" IndexInDevDesc="21">
                                        <Attributes />
                                        <Value name="_x0035_002" visiblename="ScalingMotorTurns2">1</Value>
                                        <Name>ScalingMotorTurns2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5003" type="std:DINT" IndexInDevDesc="22">
                                        <Attributes />
                                        <Value name="_x0035_003" visiblename="ScalingGearOutput1">1</Value>
                                        <Name>ScalingGearOutput1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5004" type="std:DINT" IndexInDevDesc="23">
                                        <Attributes />
                                        <Value name="_x0035_004" visiblename="ScalingGearOutput2">1</Value>
                                        <Name>ScalingGearOutput2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5005" type="std:DINT" IndexInDevDesc="24">
                                        <Attributes />
                                        <Value name="_x0035_005" visiblename="ScalingUnits">360</Value>
                                        <Name>ScalingUnits</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5006" type="std:BOOL" IndexInDevDesc="25">
                                        <Attributes />
                                        <Value name="_x0035_006" visiblename="InvertDirection">FALSE</Value>
                                        <Name>InvertDirection</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Input</Name>
                                      <Description />
                                      <Parameter ParameterId="10000" type="std:USINT" IndexInDevDesc="26">
                                        <Attributes />
                                        <Value name="_x0031_0000" visiblename="EncoderBitWidth">32</Value>
                                        <Name>EncoderBitWidth</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Output</Name>
                                      <Description />
                                      <Parameter ParameterId="10100" type="std:DINT" IndexInDevDesc="27">
                                        <Attributes />
                                        <Value name="_x0031_0100" visiblename="MaximumOutputVelocityInt">16#0064</Value>
                                        <Name>MaximumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10101" type="std:LREAL" IndexInDevDesc="28">
                                        <Attributes />
                                        <Value name="_x0031_0101" visiblename="MaximumOutputVelocityTU">100.0</Value>
                                        <Name>MaximumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10102" type="std:DINT" IndexInDevDesc="29">
                                        <Attributes />
                                        <Value name="_x0031_0102" visiblename="MinimumOutputVelocityInt">-16#0064</Value>
                                        <Name>MinimumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10103" type="std:LREAL" IndexInDevDesc="30">
                                        <Attributes />
                                        <Value name="_x0031_0103" visiblename="MinimumOutputVelocityTU">-100.0</Value>
                                        <Name>MinimumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10104" type="std:DINT" IndexInDevDesc="31">
                                        <Attributes />
                                        <Value name="_x0031_0104" visiblename="ZeroVelocityInt">0</Value>
                                        <Name>ZeroVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10105" type="std:BOOL" IndexInDevDesc="32">
                                        <Attributes />
                                        <Value name="_x0031_0105" visiblename="DirectionInverted">FALSE</Value>
                                        <Name>DirectionInverted</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Controller</Name>
                                      <Description />
                                      <Parameter ParameterId="10200" type="std:LREAL" IndexInDevDesc="33">
                                        <Attributes />
                                        <Value name="_x0031_0200" visiblename="Kp" desc="Proportional gain for lag error">0.001</Value>
                                        <Name>Kp</Name>
                                        <Description>Proportional gain for lag error</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10202" type="std:LREAL" IndexInDevDesc="34">
                                        <Attributes />
                                        <Value name="_x0031_0202" visiblename="MaxFollowingError" desc="Maximum position lag">0.0</Value>
                                        <Name>MaxFollowingError</Name>
                                        <Description>Maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10203" type="std:BOOL" IndexInDevDesc="35">
                                        <Attributes />
                                        <Value name="_x0031_0203" visiblename="EnableFollowingErrorCheck" desc="Switch on checking of maximum position lag">FALSE</Value>
                                        <Name>EnableFollowingErrorCheck</Name>
                                        <Description>Switch on checking of maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10204" type="std:LREAL" IndexInDevDesc="36">
                                        <Attributes />
                                        <Value name="_x0031_0204" visiblename="PartVelocityPilotControl" desc="Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)">0</Value>
                                        <Name>PartVelocityPilotControl</Name>
                                        <Description>Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10205" type="std:LREAL" IndexInDevDesc="37">
                                        <Attributes />
                                        <Value name="_x0031_0205" visiblename="DeadTime" desc="Time lag in cycles between fSetPosition and fActPosition">11000</Value>
                                        <Name>DeadTime</Name>
                                        <Description>Time lag in cycles between fSetPosition and fActPosition</Description>
                                      </Parameter>
                                    </ParameterSection>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>8e6e96ef-66e6-4d72-a717-6ed80b7f1646</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                      <configuration name="SM_Drive_PosControl_J6">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>1025</Type>
                                  <Id>0000 0001</Id>
                                  <Version>4.12.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="1025" role="child" interface="Common.SoftMotion.General" connectorId="0">
                                  <HostParameterSet>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Standard</Name>
                                      <Description />
                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                        <Attributes />
                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">5</Value>
                                        <Name>wDriveID</Name>
                                        <Description>Unique ID of the drive</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                        <Attributes />
                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                        <Name>bVirtual</Name>
                                        <Description>Whether the drive is simulated</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                        <Attributes />
                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                        <Name>iMovementType</Name>
                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                        <Attributes />
                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                        <Name>fPositionPeriod</Name>
                                        <Description>Modulo period value for modulo drives [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                        <Attributes />
                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">2</Value>
                                        <Name>eRampType</Name>
                                        <Description>The velocity ramp used for trajectories.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                        <Attributes />
                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">100</Value>
                                        <Name>fSWMaxVelocity</Name>
                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                        <Attributes />
                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxAcceleration</Name>
                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                        <Attributes />
                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1000</Value>
                                        <Name>fSWMaxDeceleration</Name>
                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                        <Attributes />
                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                        <Name>fSWMaxJerk</Name>
                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                        <Attributes />
                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                        <Name>fRampJerk</Name>
                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                        <Attributes />
                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">180</Value>
                                        <Name>fSWLimitPositive</Name>
                                        <Description>Software limit in positive direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                        <Attributes />
                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">-160</Value>
                                        <Name>fSWLimitNegative</Name>
                                        <Description>Software limit in negative direction</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                        <Attributes />
                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                        <Name>fSWLimitDeceleration</Name>
                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                        <Attributes />
                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">TRUE</Value>
                                        <Name>bSWLimitEnable</Name>
                                        <Description>Activate/deactivate software limits</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                        <Attributes />
                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                        <Name>eCheckPositionLag</Name>
                                        <Description>Position lag mode</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                        <Attributes />
                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                        <Name>fMaxPositionLag</Name>
                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                        <Attributes />
                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                        <Name>fSWErrorMaxDistance</Name>
                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF: Scalings</Name>
                                      <Description />
                                      <Parameter ParameterId="1051" type="std:DWORD" IndexInDevDesc="17">
                                        <Attributes />
                                        <Value name="_x0031_051" visiblename="dwRatioTechUnitsDenom" desc="conversion inc./tech.units denominator">76813</Value>
                                        <Name>dwRatioTechUnitsDenom</Name>
                                        <Description>conversion inc./tech.units denominator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="1052" type="std:DINT" IndexInDevDesc="18">
                                        <Attributes />
                                        <Value name="_x0031_052" visiblename="iRatioTechUnitsNum" desc="conversion inc./tech.units numerator">360</Value>
                                        <Name>iRatioTechUnitsNum</Name>
                                        <Description>conversion inc./tech.units numerator</Description>
                                      </Parameter>
                                      <Parameter ParameterId="5000" type="std:DINT" IndexInDevDesc="19">
                                        <Attributes />
                                        <Value name="_x0035_000" visiblename="ScalingIncs">76813</Value>
                                        <Name>ScalingIncs</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5001" type="std:DINT" IndexInDevDesc="20">
                                        <Attributes />
                                        <Value name="_x0035_001" visiblename="ScalingMotorTurns1">1</Value>
                                        <Name>ScalingMotorTurns1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5002" type="std:DINT" IndexInDevDesc="21">
                                        <Attributes />
                                        <Value name="_x0035_002" visiblename="ScalingMotorTurns2">1</Value>
                                        <Name>ScalingMotorTurns2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5003" type="std:DINT" IndexInDevDesc="22">
                                        <Attributes />
                                        <Value name="_x0035_003" visiblename="ScalingGearOutput1">1</Value>
                                        <Name>ScalingGearOutput1</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5004" type="std:DINT" IndexInDevDesc="23">
                                        <Attributes />
                                        <Value name="_x0035_004" visiblename="ScalingGearOutput2">1</Value>
                                        <Name>ScalingGearOutput2</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5005" type="std:DINT" IndexInDevDesc="24">
                                        <Attributes />
                                        <Value name="_x0035_005" visiblename="ScalingUnits">360</Value>
                                        <Name>ScalingUnits</Name>
                                      </Parameter>
                                      <Parameter ParameterId="5006" type="std:BOOL" IndexInDevDesc="25">
                                        <Attributes />
                                        <Value name="_x0035_006" visiblename="InvertDirection">FALSE</Value>
                                        <Name>InvertDirection</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Input</Name>
                                      <Description />
                                      <Parameter ParameterId="10000" type="std:USINT" IndexInDevDesc="26">
                                        <Attributes />
                                        <Value name="_x0031_0000" visiblename="EncoderBitWidth">32</Value>
                                        <Name>EncoderBitWidth</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Output</Name>
                                      <Description />
                                      <Parameter ParameterId="10100" type="std:DINT" IndexInDevDesc="27">
                                        <Attributes />
                                        <Value name="_x0031_0100" visiblename="MaximumOutputVelocityInt">16#0064</Value>
                                        <Name>MaximumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10101" type="std:LREAL" IndexInDevDesc="28">
                                        <Attributes />
                                        <Value name="_x0031_0101" visiblename="MaximumOutputVelocityTU">100.0</Value>
                                        <Name>MaximumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10102" type="std:DINT" IndexInDevDesc="29">
                                        <Attributes />
                                        <Value name="_x0031_0102" visiblename="MinimumOutputVelocityInt">-16#0064</Value>
                                        <Name>MinimumOutputVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10103" type="std:LREAL" IndexInDevDesc="30">
                                        <Attributes />
                                        <Value name="_x0031_0103" visiblename="MinimumOutputVelocityTU">-100.0</Value>
                                        <Name>MinimumOutputVelocityTU</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10104" type="std:DINT" IndexInDevDesc="31">
                                        <Attributes />
                                        <Value name="_x0031_0104" visiblename="ZeroVelocityInt">0</Value>
                                        <Name>ZeroVelocityInt</Name>
                                      </Parameter>
                                      <Parameter ParameterId="10105" type="std:BOOL" IndexInDevDesc="32">
                                        <Attributes />
                                        <Value name="_x0031_0105" visiblename="DirectionInverted">FALSE</Value>
                                        <Name>DirectionInverted</Name>
                                      </Parameter>
                                    </ParameterSection>
                                    <ParameterSection>
                                      <Name>AXIS_REF_PosControl: Controller</Name>
                                      <Description />
                                      <Parameter ParameterId="10200" type="std:LREAL" IndexInDevDesc="33">
                                        <Attributes />
                                        <Value name="_x0031_0200" visiblename="Kp" desc="Proportional gain for lag error">0.001</Value>
                                        <Name>Kp</Name>
                                        <Description>Proportional gain for lag error</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10202" type="std:LREAL" IndexInDevDesc="34">
                                        <Attributes />
                                        <Value name="_x0031_0202" visiblename="MaxFollowingError" desc="Maximum position lag">0.0</Value>
                                        <Name>MaxFollowingError</Name>
                                        <Description>Maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10203" type="std:BOOL" IndexInDevDesc="35">
                                        <Attributes />
                                        <Value name="_x0031_0203" visiblename="EnableFollowingErrorCheck" desc="Switch on checking of maximum position lag">FALSE</Value>
                                        <Name>EnableFollowingErrorCheck</Name>
                                        <Description>Switch on checking of maximum position lag</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10204" type="std:LREAL" IndexInDevDesc="36">
                                        <Attributes />
                                        <Value name="_x0031_0204" visiblename="PartVelocityPilotControl" desc="Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)">0</Value>
                                        <Name>PartVelocityPilotControl</Name>
                                        <Description>Factor for velocity pilot control with fSetVelocity (0 means no velocity pilot control, 1 means direct output of fSetVelocity)</Description>
                                      </Parameter>
                                      <Parameter ParameterId="10205" type="std:LREAL" IndexInDevDesc="37">
                                        <Attributes />
                                        <Value name="_x0031_0205" visiblename="DeadTime" desc="Time lag in cycles between fSetPosition and fActPosition">700</Value>
                                        <Name>DeadTime</Name>
                                        <Description>Time lag in cycles between fSetPosition and fActPosition</Description>
                                      </Parameter>
                                    </ParameterSection>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>90c3ab61-cd9a-4b37-bdc1-631c2a20f394</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                    </configurations>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>fc630667-0317-4bc3-b02d-1f3af074bcd7</ObjectId>
                  </data>
                </addData>
              </configuration>
              <configuration name="&lt;Empty&gt;">
                <addData>
                  <data name="Device" handleUnknown="discard" />
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>1d76930d-dbe3-4129-812f-57306b665b04</ObjectId>
                  </data>
                </addData>
              </configuration>
              <configuration name="Onewire">
                <addData>
                  <data name="ExplicitConnector" handleUnknown="discard">
                    <ExplicitConnector connectorID="5" />
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>aeb0c6fd-1757-44be-b1c8-b73c4e8df34b</ObjectId>
                  </data>
                </addData>
              </configuration>
              <configuration name="Camera device">
                <addData>
                  <data name="ExplicitConnector" handleUnknown="discard">
                    <ExplicitConnector connectorID="6" />
                  </data>
                  <data name="configurations" handleUnknown="discard">
                    <configurations>
                      <configuration name="&lt;Empty&gt;">
                        <addData>
                          <data name="Device" handleUnknown="discard" />
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>b91cf46f-75cf-4d77-9b22-4d133d910165</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                    </configurations>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>4da383cb-6693-45c8-bc67-395a66a39986</ObjectId>
                  </data>
                </addData>
              </configuration>
              <configuration name="SPI">
                <addData>
                  <data name="ExplicitConnector" handleUnknown="discard">
                    <ExplicitConnector connectorID="7" />
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>ab0b7e43-88f3-412a-8ad5-c024c7dfcf48</ObjectId>
                  </data>
                </addData>
              </configuration>
              <configuration name="I²C">
                <addData>
                  <data name="ExplicitConnector" handleUnknown="discard">
                    <ExplicitConnector connectorID="8" />
                  </data>
                  <data name="configurations" handleUnknown="discard">
                    <configurations>
                      <configuration name="I2C_master">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>496</Type>
                                  <Id>0000 0000</Id>
                                  <Version>4.10.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="496" role="child" interface="Raspberry.I2CMaster" connectorId="1">
                                  <HostParameterSet>
                                    <Parameter ParameterId="1" type="std:BOOL" IndexInDevDesc="0">
                                      <Attributes offlineaccess="none" />
                                      <Value name="_x0031_" visiblename="HiddenPointerToOwnInstance" offlineaccess="none" desc="HiddenPointerToOwnInstance">FALSE</Value>
                                      <Name>HiddenPointerToOwnInstance</Name>
                                      <Description>HiddenPointerToOwnInstance</Description>
                                    </Parameter>
                                    <Parameter ParameterId="10" type="std:STRING" IndexInDevDesc="1">
                                      <Attributes onlineaccess="read" />
                                      <Value name="_x0031_0" visiblename="I²C port" onlineaccess="read" desc="file path of the I²C port">'/dev/i2c-1'</Value>
                                      <Name>I²C port</Name>
                                      <Description>file path of the I²C port</Description>
                                    </Parameter>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="500" interface="Raspberry.I2C" connectorId="2" hostpath="1">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>0d68f8a7-0c8b-4cf2-b293-138cca1d9584</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                      <configuration name="I2C_master_1">
                        <addData>
                          <data name="Device" handleUnknown="discard">
                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                              <DeviceType>
                                <DeviceIdentification>
                                  <Type>496</Type>
                                  <Id>0000 0000</Id>
                                  <Version>4.10.0.0</Version>
                                </DeviceIdentification>
                                <Connector moduleType="496" role="child" interface="Raspberry.I2CMaster" connectorId="1">
                                  <HostParameterSet>
                                    <Parameter ParameterId="1" type="std:BOOL" IndexInDevDesc="0">
                                      <Attributes offlineaccess="none" />
                                      <Value name="_x0031_" visiblename="HiddenPointerToOwnInstance" offlineaccess="none" desc="HiddenPointerToOwnInstance">FALSE</Value>
                                      <Name>HiddenPointerToOwnInstance</Name>
                                      <Description>HiddenPointerToOwnInstance</Description>
                                    </Parameter>
                                    <Parameter ParameterId="10" type="std:STRING" IndexInDevDesc="1">
                                      <Attributes onlineaccess="read" />
                                      <Value name="_x0031_0" visiblename="I²C port" onlineaccess="read" desc="file path of the I²C port">'/dev/i2c-2'</Value>
                                      <Name>I²C port</Name>
                                      <Description>file path of the I²C port</Description>
                                    </Parameter>
                                  </HostParameterSet>
                                </Connector>
                                <Connector moduleType="500" interface="Raspberry.I2C" connectorId="2" hostpath="1">
                                  <HostParameterSet />
                                </Connector>
                                <DeviceParameterSet />
                              </DeviceType>
                            </Device>
                          </data>
                          <data name="configurations" handleUnknown="discard">
                            <configurations>
                              <configuration name="Adafruit_PWM">
                                <addData>
                                  <data name="Device" handleUnknown="discard">
                                    <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                                      <DeviceType>
                                        <DeviceIdentification>
                                          <Type>500</Type>
                                          <Id>0000 0004</Id>
                                          <Version>4.10.0.0</Version>
                                        </DeviceIdentification>
                                        <Connector moduleType="500" role="child" interface="Raspberry.I2C" connectorId="1">
                                          <HostParameterSet>
                                            <Parameter ParameterId="1" type="std:USINT" IndexInDevDesc="0">
                                              <Attributes onlineaccess="read" />
                                              <Value name="_x0031_" visiblename="I²C address" onlineaccess="read" desc="Address of the device">64</Value>
                                              <Name>I²C address</Name>
                                              <Description>Address of the device</Description>
                                            </Parameter>
                                            <Parameter ParameterId="2" type="std:UINT" IndexInDevDesc="1">
                                              <Attributes onlineaccess="read" />
                                              <Value name="_x0032_" visiblename="Frequency [Hz]" onlineaccess="read" desc="Number of periods (HIGH-LOW-cycles) per second">50</Value>
                                              <Name>Frequency [Hz]</Name>
                                              <Description>Number of periods (HIGH-LOW-cycles) per second</Description>
                                            </Parameter>
                                          </HostParameterSet>
                                        </Connector>
                                        <Connector moduleType="1024" interface="Common.SoftMotion.Servo" connectorId="1000" hostpath="1">
                                          <HostParameterSet />
                                        </Connector>
                                        <DeviceParameterSet />
                                      </DeviceType>
                                    </Device>
                                  </data>
                                  <data name="configurations" handleUnknown="discard">
                                    <configurations>
                                      <configuration name="AdafruitPwm01">
                                        <addData>
                                          <data name="Device" handleUnknown="discard">
                                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                                              <DeviceType>
                                                <DeviceIdentification>
                                                  <Type>1024</Type>
                                                  <Id>0000 F010</Id>
                                                  <Version>4.10.0.0</Version>
                                                </DeviceIdentification>
                                                <Connector moduleType="1024" role="child" interface="Common.SoftMotion.Servo" connectorId="0">
                                                  <HostParameterSet>
                                                    <ParameterSection>
                                                      <Name>AXIS_REF: Standard</Name>
                                                      <Description />
                                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                                        <Attributes />
                                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">7</Value>
                                                        <Name>wDriveID</Name>
                                                        <Description>Unique ID of the drive</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                                        <Attributes />
                                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                                        <Name>bVirtual</Name>
                                                        <Description>Whether the drive is simulated</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                                        <Attributes />
                                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                                        <Name>iMovementType</Name>
                                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                                        <Attributes />
                                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                                        <Name>fPositionPeriod</Name>
                                                        <Description>Modulo period value for modulo drives [u]</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                                        <Attributes />
                                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">0</Value>
                                                        <Name>eRampType</Name>
                                                        <Description>The velocity ramp used for trajectories.</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                                        <Attributes />
                                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">1e3</Value>
                                                        <Name>fSWMaxVelocity</Name>
                                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                                        <Attributes />
                                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1e5</Value>
                                                        <Name>fSWMaxAcceleration</Name>
                                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                                        <Attributes />
                                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1e5</Value>
                                                        <Name>fSWMaxDeceleration</Name>
                                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                                        <Attributes />
                                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                                        <Name>fSWMaxJerk</Name>
                                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                                        <Attributes />
                                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                                        <Name>fRampJerk</Name>
                                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                                        <Attributes />
                                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">1000.0</Value>
                                                        <Name>fSWLimitPositive</Name>
                                                        <Description>Software limit in positive direction</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                                        <Attributes />
                                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">0.0</Value>
                                                        <Name>fSWLimitNegative</Name>
                                                        <Description>Software limit in negative direction</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                                        <Attributes />
                                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                                        <Name>fSWLimitDeceleration</Name>
                                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                                        <Attributes />
                                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">FALSE</Value>
                                                        <Name>bSWLimitEnable</Name>
                                                        <Description>Activate/deactivate software limits</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                                        <Attributes />
                                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                                        <Name>eCheckPositionLag</Name>
                                                        <Description>Position lag mode</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                                        <Attributes />
                                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                                        <Name>fMaxPositionLag</Name>
                                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                                        <Attributes />
                                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                                        <Name>fSWErrorMaxDistance</Name>
                                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                                      </Parameter>
                                                    </ParameterSection>
                                                    <ParameterSection>
                                                      <Name>Servo: Configuration</Name>
                                                      <Description />
                                                      <Parameter ParameterId="65536" type="std:LREAL" IndexInDevDesc="17">
                                                        <Attributes />
                                                        <Value name="_x0036_5536" visiblename="negative position [units]" desc="minimum position of the servo">-60.0</Value>
                                                        <Name>negative position [units]</Name>
                                                        <Description>minimum position of the servo</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65537" type="std:LREAL" IndexInDevDesc="18">
                                                        <Attributes />
                                                        <Value name="_x0036_5537" visiblename="positive position [units]" desc="maximum position of the servo">60.0</Value>
                                                        <Name>positive position [units]</Name>
                                                        <Description>maximum position of the servo</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65538" type="std:LREAL" IndexInDevDesc="19">
                                                        <Attributes />
                                                        <Value name="_x0036_5538" visiblename="startup position [units]" desc="position that is issued at startup">0.0</Value>
                                                        <Name>startup position [units]</Name>
                                                        <Description>position that is issued at startup</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65539" type="std:LREAL" IndexInDevDesc="20">
                                                        <Attributes />
                                                        <Value name="_x0036_5539" visiblename="minimum signal length [ms]" desc="minimum time that the signal is ON; makes the servo move to the negative position">1.0</Value>
                                                        <Name>minimum signal length [ms]</Name>
                                                        <Description>minimum time that the signal is ON; makes the servo move to the negative position</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65540" type="std:LREAL" IndexInDevDesc="21">
                                                        <Attributes />
                                                        <Value name="_x0036_5540" visiblename="maximum signal length [ms] representing the positive position" desc="maximum time that the signal is ON; makes the servo move to the positive position">2.0</Value>
                                                        <Name>maximum signal length [ms] representing the positive position</Name>
                                                        <Description>maximum time that the signal is ON; makes the servo move to the positive position</Description>
                                                      </Parameter>
                                                    </ParameterSection>
                                                  </HostParameterSet>
                                                </Connector>
                                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                                  <HostParameterSet />
                                                </Connector>
                                                <DeviceParameterSet />
                                              </DeviceType>
                                            </Device>
                                          </data>
                                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                                            <ObjectId>2182a2d1-7df5-495b-8c4b-608638e832d5</ObjectId>
                                          </data>
                                        </addData>
                                      </configuration>
                                      <configuration name="AdafruitPwm02">
                                        <addData>
                                          <data name="Device" handleUnknown="discard">
                                            <Device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="">
                                              <DeviceType>
                                                <DeviceIdentification>
                                                  <Type>1024</Type>
                                                  <Id>0000 F010</Id>
                                                  <Version>4.10.0.0</Version>
                                                </DeviceIdentification>
                                                <Connector moduleType="1024" role="child" interface="Common.SoftMotion.Servo" connectorId="0">
                                                  <HostParameterSet>
                                                    <ParameterSection>
                                                      <Name>AXIS_REF: Standard</Name>
                                                      <Description />
                                                      <Parameter ParameterId="1021" type="std:WORD" IndexInDevDesc="0">
                                                        <Attributes />
                                                        <Value name="_x0031_021" visiblename="wDriveID" desc="Unique ID of the drive">8</Value>
                                                        <Name>wDriveID</Name>
                                                        <Description>Unique ID of the drive</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1040" type="std:BOOL" IndexInDevDesc="1">
                                                        <Attributes />
                                                        <Value name="_x0031_040" visiblename="bVirtual" desc="Whether the drive is simulated">FALSE</Value>
                                                        <Name>bVirtual</Name>
                                                        <Description>Whether the drive is simulated</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1060" type="std:INT" IndexInDevDesc="2">
                                                        <Attributes />
                                                        <Value name="_x0031_060" visiblename="iMovementType" desc="Movement type: 0: modulo, 1: finite">1</Value>
                                                        <Name>iMovementType</Name>
                                                        <Description>Movement type: 0: modulo, 1: finite</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1061" type="std:LREAL" IndexInDevDesc="3">
                                                        <Attributes />
                                                        <Value name="_x0031_061" visiblename="fPositionPeriod" desc="Modulo period value for modulo drives [u]">360.0</Value>
                                                        <Name>fPositionPeriod</Name>
                                                        <Description>Modulo period value for modulo drives [u]</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1062" type="std:INT" IndexInDevDesc="7">
                                                        <Attributes />
                                                        <Value name="_x0031_062" visiblename="eRampType" desc="The velocity ramp used for trajectories.">0</Value>
                                                        <Name>eRampType</Name>
                                                        <Description>The velocity ramp used for trajectories.</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1113" type="std:LREAL" IndexInDevDesc="9">
                                                        <Attributes />
                                                        <Value name="_x0031_113" visiblename="fSWMaxVelocity" desc="Maximum velocity magnitude (software limit)">1e3</Value>
                                                        <Name>fSWMaxVelocity</Name>
                                                        <Description>Maximum velocity magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1123" type="std:LREAL" IndexInDevDesc="10">
                                                        <Attributes />
                                                        <Value name="_x0031_123" visiblename="fSWMaxAcceleration" desc="Maximum acceleration magnitude (software limit)">1e5</Value>
                                                        <Name>fSWMaxAcceleration</Name>
                                                        <Description>Maximum acceleration magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1133" type="std:LREAL" IndexInDevDesc="11">
                                                        <Attributes />
                                                        <Value name="_x0031_133" visiblename="fSWMaxDeceleration" desc="Maximum deceleration magnitude (software limit)">1e5</Value>
                                                        <Name>fSWMaxDeceleration</Name>
                                                        <Description>Maximum deceleration magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1143" type="std:LREAL" IndexInDevDesc="12">
                                                        <Attributes />
                                                        <Value name="_x0031_143" visiblename="fSWMaxJerk" desc="Maximum jerk magnitude (software limit)">10000</Value>
                                                        <Name>fSWMaxJerk</Name>
                                                        <Description>Maximum jerk magnitude (software limit)</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1144" type="std:LREAL" IndexInDevDesc="8">
                                                        <Attributes />
                                                        <Value name="_x0031_144" visiblename="fRampJerk" desc="Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.">0</Value>
                                                        <Name>fRampJerk</Name>
                                                        <Description>Jerk used for bringing acceleration to 0 when sin² ramp is interrupted.</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1200" type="std:LREAL" IndexInDevDesc="6">
                                                        <Attributes />
                                                        <Value name="_x0031_200" visiblename="fSWLimitPositive" desc="Software limit in positive direction">1000.0</Value>
                                                        <Name>fSWLimitPositive</Name>
                                                        <Description>Software limit in positive direction</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1201" type="std:LREAL" IndexInDevDesc="5">
                                                        <Attributes />
                                                        <Value name="_x0031_201" visiblename="fSWLimitNegative" desc="Software limit in negative direction">0.0</Value>
                                                        <Name>fSWLimitNegative</Name>
                                                        <Description>Software limit in negative direction</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1203" type="std:LREAL" IndexInDevDesc="15">
                                                        <Attributes />
                                                        <Value name="_x0031_203" visiblename="fSWLimitDeceleration" desc="Deceleration for  stop on software error [u/s²]">0</Value>
                                                        <Name>fSWLimitDeceleration</Name>
                                                        <Description>Deceleration for  stop on software error [u/s²]</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1205" type="std:BOOL" IndexInDevDesc="4">
                                                        <Attributes />
                                                        <Value name="_x0031_205" visiblename="bSWLimitEnable" desc="Activate/deactivate software limits">FALSE</Value>
                                                        <Name>bSWLimitEnable</Name>
                                                        <Description>Activate/deactivate software limits</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1207" type="std:INT" IndexInDevDesc="13">
                                                        <Attributes />
                                                        <Value name="_x0031_207" visiblename="eCheckPositionLag" desc="Position lag mode">0</Value>
                                                        <Name>eCheckPositionLag</Name>
                                                        <Description>Position lag mode</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1208" type="std:LREAL" IndexInDevDesc="14">
                                                        <Attributes />
                                                        <Value name="_x0031_208" visiblename="fMaxPositionLag" desc="Maximum position lag (magnitude) [u]">1.0</Value>
                                                        <Name>fMaxPositionLag</Name>
                                                        <Description>Maximum position lag (magnitude) [u]</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="1250" type="std:LREAL" IndexInDevDesc="16">
                                                        <Attributes />
                                                        <Value name="_x0031_250" visiblename="fSWErrorMaxDistance" desc="Maximum distance that may be travelled for ramping down after a software error has been detected [u]">0</Value>
                                                        <Name>fSWErrorMaxDistance</Name>
                                                        <Description>Maximum distance that may be travelled for ramping down after a software error has been detected [u]</Description>
                                                      </Parameter>
                                                    </ParameterSection>
                                                    <ParameterSection>
                                                      <Name>Servo: Configuration</Name>
                                                      <Description />
                                                      <Parameter ParameterId="65536" type="std:LREAL" IndexInDevDesc="17">
                                                        <Attributes />
                                                        <Value name="_x0036_5536" visiblename="negative position [units]" desc="minimum position of the servo">-60.0</Value>
                                                        <Name>negative position [units]</Name>
                                                        <Description>minimum position of the servo</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65537" type="std:LREAL" IndexInDevDesc="18">
                                                        <Attributes />
                                                        <Value name="_x0036_5537" visiblename="positive position [units]" desc="maximum position of the servo">60.0</Value>
                                                        <Name>positive position [units]</Name>
                                                        <Description>maximum position of the servo</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65538" type="std:LREAL" IndexInDevDesc="19">
                                                        <Attributes />
                                                        <Value name="_x0036_5538" visiblename="startup position [units]" desc="position that is issued at startup">0.0</Value>
                                                        <Name>startup position [units]</Name>
                                                        <Description>position that is issued at startup</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65539" type="std:LREAL" IndexInDevDesc="20">
                                                        <Attributes />
                                                        <Value name="_x0036_5539" visiblename="minimum signal length [ms]" desc="minimum time that the signal is ON; makes the servo move to the negative position">1.0</Value>
                                                        <Name>minimum signal length [ms]</Name>
                                                        <Description>minimum time that the signal is ON; makes the servo move to the negative position</Description>
                                                      </Parameter>
                                                      <Parameter ParameterId="65540" type="std:LREAL" IndexInDevDesc="21">
                                                        <Attributes />
                                                        <Value name="_x0036_5540" visiblename="maximum signal length [ms] representing the positive position" desc="maximum time that the signal is ON; makes the servo move to the positive position">2.0</Value>
                                                        <Name>maximum signal length [ms] representing the positive position</Name>
                                                        <Description>maximum time that the signal is ON; makes the servo move to the positive position</Description>
                                                      </Parameter>
                                                    </ParameterSection>
                                                  </HostParameterSet>
                                                </Connector>
                                                <Connector moduleType="1248" interface="Common.SoftMotion.Logical" connectorId="1" hostpath="0">
                                                  <HostParameterSet />
                                                </Connector>
                                                <DeviceParameterSet />
                                              </DeviceType>
                                            </Device>
                                          </data>
                                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                                            <ObjectId>e805981a-0706-4f9f-a4b4-7a048e65c79f</ObjectId>
                                          </data>
                                        </addData>
                                      </configuration>
                                    </configurations>
                                  </data>
                                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                                    <ObjectId>99583010-7870-4ffd-80d0-4fcc781d22de</ObjectId>
                                  </data>
                                </addData>
                              </configuration>
                            </configurations>
                          </data>
                          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                            <ObjectId>106bf2de-1790-4fa9-beb8-3ed0788c8a1e</ObjectId>
                          </data>
                        </addData>
                      </configuration>
                    </configurations>
                  </data>
                  <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                    <ObjectId>c2edcee5-4e0d-445e-b13d-3228dc92e777</ObjectId>
                  </data>
                </addData>
              </configuration>
            </configurations>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>883e7752-fd50-4d5b-bb87-a92a505c0d55</ObjectId>
          </data>
        </addData>
      </configuration>
    </configurations>
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="#VisuSymbols" Namespace="VisuSymbols" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="VisuSymbols, 4.1.0.0 (System)" />
        <Library Name="#System_VisuElems" Namespace="VisuElems" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElems, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemMeter" Namespace="VisuElemMeter" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemMeter, 4.3.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsSpecialControls" Namespace="VisuElemsSpecialControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsSpecialControls, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsWinControls" Namespace="VisuElemsWinControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsWinControls, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTextEditor" Namespace="VisuElemTextEditor" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTextEditor, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTrace" Namespace="VisuElemTrace" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTrace, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuNativeControl" Namespace="VisuNativeControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuNativeControl, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsAlarm" Namespace="VisuElemsAlarm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsAlarm, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemCamDisplayer" Namespace="VisuElemCamDisplayer" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemCamDisplayer, 4.2.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElem3DPath" Namespace="VisuElem3DPath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElem3DPath, 4.1.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsDateTime" Namespace="VisuElemsDateTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsDateTime, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemXYChart" Namespace="VisuElemXYChart" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemXYChart, 4.4.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuInputs" Namespace="VisuInputs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuInputs, 4.2.0.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7947b9f0-2ec0-46cb-a7e5-f8f763be16e6</ObjectId>
          </data>
        </addData>
      </Libraries>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Device" ObjectId="883e7752-fd50-4d5b-bb87-a92a505c0d55">
          <Object Name="Application" ObjectId="7babeec2-008b-4bd3-b402-84e2c4d6ae83">
            <Object Name="Library Manager" ObjectId="80af59fb-8d62-4f6c-95b0-580a98d81b1e" />
            <Folder Name="POU">
              <Object Name="_00_Main" ObjectId="f495872a-eb99-4e62-a111-ca71535b5152">
                <Object Name="A_Homing" ObjectId="f2e63d02-3be2-41b0-9585-ce3f612286f3" />
                <Object Name="A_Processor" ObjectId="ae5380b9-92ad-46ee-9c84-91a9f5dcdbb0" />
                <Object Name="A_CNC" ObjectId="97687326-e3d4-419e-86a9-0dab28668222" />
                <Object Name="A_Jogging" ObjectId="bdfecab8-b622-4af2-a993-25405a7b80c0" />
                <Object Name="A_Vision" ObjectId="f2c55615-3530-4e9e-a8ec-f4e8c8b52d04" />
                <Object Name="A_Init" ObjectId="f17eeeaa-a471-4fe9-bca4-92d5f0a69acd" />
                <Object Name="M_BuildTests" ObjectId="9a5607a2-ed23-4572-beb3-b80fd95846d5" />
              </Object>
              <Object Name="_10_Drives" ObjectId="3256c2f0-e8a8-4738-aa1a-395ceff25c60">
                <Object Name="M_HandleDriveIO" ObjectId="1f105a3e-ae48-4de4-9cd3-fada08b1a872" />
              </Object>
              <Object Name="_20_Io" ObjectId="c3b19a06-6020-44bc-8c83-cb31670bfa1a">
                <Object Name="A_CmdIoMapping" ObjectId="a2f21641-ddf0-4588-b300-185fb18e4bef" />
              </Object>
              <Object Name="_30_Visu" ObjectId="9462f316-faa5-42b7-be46-708f3ef2e1f0" />
              <Object Name="_40_Vision" ObjectId="168c2bce-5a06-487a-a077-28448e10fa0d" />
            </Folder>
            <Object Name="MainTask" ObjectId="eafe4677-fa00-4970-b015-251c89fffd79" />
            <Object Name="SoftMotion_PlanningTask" ObjectId="5a42e1b4-5f13-4f3e-9a38-abed03da7807" />
            <Object Name="VISU_TASK" ObjectId="7d686a67-c501-4ade-ac77-336899e42115" />
            <Object Name="VisionTask" ObjectId="38fa2b4a-d999-444c-83ca-1f85ed269224" />
            <Folder Name="FUN">
              <Folder Name="move">
                <Object Name="ParseMoveCmd" ObjectId="35e49e9e-292d-48d5-910d-e69db317cc55" />
                <Object Name="MoveCmdProcessor" ObjectId="8f4275d6-46b8-4b53-89d9-00cb2bff4683">
                  <Folder Name="protected">
                    <Object Name="M_Starting" ObjectId="ce3be291-42fd-4d66-9e0a-0e5bf023807b" />
                    <Object Name="M_Resetting" ObjectId="95f46e6e-26ec-450c-948d-d902314a1d4d" />
                    <Object Name="M_Idle" ObjectId="387dbba7-203a-4514-9198-3038b8e4b5dc" />
                    <Object Name="M_Holding" ObjectId="67eb5664-2a5b-4455-8b32-aeda1b99b743" />
                    <Object Name="M_Execute" ObjectId="a682ac1d-71f4-44e2-9664-b97db23d1386" />
                    <Object Name="M_Aborting" ObjectId="4e26ece5-3a6a-4b95-a5a2-0147c1e26a3d" />
                    <Object Name="M_Complete" ObjectId="5915b6b9-5c4b-4cff-a92a-a70dfd02e351" />
                    <Object Name="M_UnHolding" ObjectId="388ca3d8-559e-4364-ae71-180c399a068a" />
                    <Object Name="M_SetPackML" ObjectId="09bb9e0c-557b-4db9-8574-c3a1036b476e" />
                    <Object Name="M_Clearing" ObjectId="2e7feb23-d083-4537-94b3-cdf41be2bdfa" />
                  </Folder>
                </Object>
                <Object Name="ST_MoveCmd" ObjectId="f71cc9b7-cb4b-485a-9aed-2944bbd084ca" />
                <Object Name="BuildMoveCmd" ObjectId="19554b2f-3ca2-4f8d-a4a2-2e3ac3119ec0" />
              </Folder>
              <Folder Name="jog">
                <Object Name="JogProcessor" ObjectId="9ad0dd5a-e160-4345-8eee-ad9cf9bfb3eb" />
              </Folder>
              <Object Name="CommandProcessor" ObjectId="97872514-f094-4f4a-8630-59a989ffd663">
                <Folder Name="public">
                  <Object Name="M_SetNextCommand" ObjectId="7318a297-a063-4ac2-856c-165720d821a4" />
                </Folder>
                <Folder Name="protected">
                  <Object Name="M_Complete" ObjectId="642c5013-51df-4c85-a867-73cd18842e60" />
                  <Object Name="M_Resetting" ObjectId="b97773af-d3db-4ff8-bc09-d39e6c9c165a" />
                  <Object Name="M_Idle" ObjectId="a8790f5b-e067-4003-a446-4302e4343c80" />
                  <Object Name="M_SetPackML" ObjectId="95b94fb2-14e3-4b3b-8405-e444036b8980" />
                  <Object Name="M_Starting" ObjectId="9c738675-c279-409c-92e2-b6bbcd05e321" />
                  <Object Name="M_Execute" ObjectId="9d44a219-dd62-4e0a-8b38-07968243ee03" />
                  <Object Name="M_Suspending" ObjectId="59fc01db-f06d-4b70-9e04-ba20bd9ce6b9" />
                  <Object Name="M_UnSuspending" ObjectId="d8134748-b5a7-4257-9a4e-3b1612d98833" />
                  <Object Name="M_Holding" ObjectId="e05e442b-e0e4-4e0a-9099-5c3c862a429f" />
                  <Object Name="M_UnHolding" ObjectId="4a0b543c-927e-400a-b5da-ba002055cdd0" />
                  <Object Name="M_Aborting" ObjectId="f73e1a47-970e-47c3-b986-e1fe2eaafd0c" />
                  <Object Name="M_Stopping" ObjectId="b76b8c76-e672-465e-b5bc-a2cc80d6ee6f" />
                  <Object Name="M_Clearing" ObjectId="766fbc5b-b0ec-40a6-bc48-5f02adefd0a5" />
                </Folder>
              </Object>
              <Folder Name="cnc">
                <Object Name="ST_CncCmd" ObjectId="bfbed99a-036f-4373-a7be-6feb43a2d296" />
                <Object Name="CncPathPlanner" ObjectId="845c01d1-16bd-4c5b-8921-4865a7e07fd2">
                  <Object Name="M_Execute" ObjectId="92875761-2fd7-4bb6-bbf7-a117fd98b83f" />
                  <Object Name="M_Reset" ObjectId="bcea459e-fa66-4937-b73d-59fec7864ad5" />
                  <Object Name="M_SetStartPosition" ObjectId="deae1c1c-a35f-4dab-a882-870c0dd1bbee" />
                  <Object Name="M_SetOriConvention" ObjectId="bc2fe0c5-bb28-4086-a8ef-9e95685b910f" />
                </Object>
                <Object Name="PositionTracker" ObjectId="7701f0fc-a0ed-4db5-acf4-25ec5ce43abb">
                  <Object Name="M_Clear" ObjectId="dfb86b0d-b5f1-49bd-9916-9936d6497f13" />
                </Object>
                <Object Name="BuildCncCmd" ObjectId="e33aafb8-c7d1-4dab-86cc-41df906bbf07" />
                <Object Name="CncCmdProcessor" ObjectId="09e229dd-dea4-4418-8521-de497c93f5dc">
                  <Folder Name="protected">
                    <Object Name="M_SetPackML" ObjectId="7c793665-23c8-4063-a654-5011975c105b" />
                    <Object Name="M_Complete" ObjectId="0b336f4b-391c-459f-a28e-2f4ba2e8bba2" />
                    <Object Name="M_Execute" ObjectId="882518ea-bbf9-4ac5-86b5-eca49a6b2287" />
                    <Object Name="M_Starting" ObjectId="3a2ecf7b-c9fd-4771-acb0-40bfe0e5c659" />
                    <Object Name="M_Resetting" ObjectId="dd49c510-b353-40d1-99d1-226a7e98ba4c" />
                    <Object Name="M_Holding" ObjectId="1442df85-b316-4422-acf3-2f8fc74d80e1" />
                    <Object Name="M_UnHolding" ObjectId="1070643e-06f2-476a-8286-a7b05c60fa83" />
                    <Object Name="M_Idle" ObjectId="c93ab278-2b3f-4bc7-a2ff-fccaf401c8a8" />
                  </Folder>
                </Object>
                <Object Name="ParseCncCmd" ObjectId="4ea6ce2c-d973-415a-9620-8fd34fa576a4" />
              </Folder>
              <Folder Name="output">
                <Object Name="BuildOutputCmd" ObjectId="e29ffd53-c60c-4780-9cae-795a42c1806f" />
                <Object Name="ParseOutputCmd" ObjectId="b67ef6d4-a509-4504-af22-150225e40cd0" />
                <Object Name="OutputCmdProcessor" ObjectId="6372490f-9396-4f98-b458-51631931ad07">
                  <Folder Name="protected">
                    <Object Name="M_SetPackML" ObjectId="fed562a2-eddf-4e93-afb0-ae3624ddf3de" />
                    <Object Name="M_Resetting" ObjectId="83e31000-e404-406b-a9f0-af2b8e43e2b9" />
                    <Object Name="M_Execute" ObjectId="1d97f92f-5146-4d3a-b260-50bb7a3971f7" />
                    <Object Name="M_Starting" ObjectId="88023030-83e7-4c3a-848e-230ca2d5e812" />
                    <Object Name="M_Holding" ObjectId="6bd03b4f-d8eb-4211-abab-f0512818ab61" />
                    <Object Name="M_Idle" ObjectId="f42bff08-3d3c-4f17-bbd4-541074d9df17" />
                    <Object Name="M_UnHolding" ObjectId="10531d76-a1e4-42ba-a26f-88c13c76bd1e" />
                    <Object Name="M_Aborting" ObjectId="fc1f966e-206a-402e-8b05-6358a2c60ff4" />
                    <Object Name="M_Clearing" ObjectId="368dc781-45d7-4e24-9a5e-8a9a04872ec6" />
                    <Object Name="M_Complete" ObjectId="843305da-b984-4520-8555-133899b9f165" />
                  </Folder>
                </Object>
                <Object Name="ST_OutputCmd" ObjectId="8d0742ed-4361-441a-8bce-40feb4d004c2" />
              </Folder>
              <Folder Name="pause">
                <Object Name="BuildPauseCmd" ObjectId="b7a08d1d-f5e6-4f3c-9f3f-733c40c45429" />
                <Object Name="ParsePauseCmd" ObjectId="155e4e57-98df-4f34-8414-c9af1793585b" />
                <Object Name="PauseCmdProcessor" ObjectId="761241d9-a41a-4641-86b9-9b083b6be68b">
                  <Folder Name="protected">
                    <Object Name="M_SetPackML" ObjectId="6e516751-a0ab-433e-9a68-8b911bf9a0fe" />
                    <Object Name="M_Complete" ObjectId="2e5db4a5-a489-4506-8ef9-c0b206420609" />
                    <Object Name="M_Resetting" ObjectId="25f52b0f-f9c8-4c07-856d-4168885b692d" />
                    <Object Name="M_Execute" ObjectId="3817a097-cfb2-4856-abd1-75f36cc5363a" />
                    <Object Name="M_Starting" ObjectId="c161e731-b469-46d9-a74c-2490c081ccd5" />
                  </Folder>
                </Object>
                <Object Name="ST_PauseCmd" ObjectId="be976acf-5a13-4a9d-8d9f-61e2df7de507" />
              </Folder>
              <Folder Name="vision">
                <Object Name="OpenCV" ObjectId="6d87a4c9-9357-4e03-b1a0-c731940d5946">
                  <Object Name="P_Done" ObjectId="7147058c-4dce-465e-99b2-b928801c26b7" />
                  <Folder Name="Public">
                    <Object Name="M_Reset" ObjectId="822d4051-a212-409b-adf7-3a2fcd54f85d" />
                    <Object Name="M_CalibrateCamera" ObjectId="f8181cbb-d977-4dc5-9d9a-f6beb94ec24e" />
                    <Object Name="M_Cancel" ObjectId="98ccbeec-074e-4395-b507-03fd4edf31aa" />
                    <Object Name="M_CaptureImage" ObjectId="d38f4a97-5265-4a49-a236-4f8dbe120152" />
                    <Object Name="M_LocatePart" ObjectId="6c14d589-4ff1-4332-97a1-15bfa9d317ed" />
                  </Folder>
                  <Object Name="P_Busy" ObjectId="9714eca2-29cc-4e5c-a0ad-c3d6c17c60c3" />
                  <Object Name="P_Result" ObjectId="4c0b022a-d95b-4ed0-b45b-2c560ef1c3ce" />
                  <Object Name="P_Error" ObjectId="98fd3266-9ecd-45d2-b989-983ea8e40416" />
                  <Object Name="P_ErrorDescription" ObjectId="60a45e84-da96-463e-9afa-d3ed0a2f56ac" />
                </Object>
                <Object Name="PythonTcpClient" ObjectId="0c178c71-0d25-4361-b16e-e3833e33b5d0">
                  <Object Name="M_Write" ObjectId="5821b17b-b657-4412-802a-8f52a5970847" />
                </Object>
                <Object Name="ParseVisionCmd" ObjectId="c1f3fe10-7066-4e4d-ae1a-05a0a2c8898a" />
                <Object Name="BuildVisionCmd" ObjectId="580bcf70-fae5-407f-8446-aaa0a1365ba4" />
                <Object Name="StringByteArray" ObjectId="74ac9c91-8dd0-4804-83eb-55aba09ae987" />
                <Object Name="ST_VisionLocate" ObjectId="979edabc-249c-4294-9a6b-583c609d1013" />
                <Object Name="ST_VisionCalibrate" ObjectId="182d3d19-8ffc-4b3a-943b-f60486efdc5a" />
                <Object Name="ST_VisionCmd" ObjectId="bbefe0b0-9a20-4826-9638-01ab457504e9" />
                <Object Name="VisionCmdProcessor" ObjectId="fe68b725-9761-4240-89f1-03981366ea66">
                  <Folder Name="protected">
                    <Object Name="M_SetPackML" ObjectId="93afa927-2608-4b3d-9460-07c2fd48c33a" />
                    <Object Name="M_Complete" ObjectId="fcfc6b30-29f1-4c96-9dec-23fe83a707f7" />
                    <Object Name="M_Resetting" ObjectId="62ae2670-1ac3-4949-b0cc-afaf62b4bcb3" />
                    <Object Name="M_Starting" ObjectId="02db5f8f-59c2-4bc3-a7b7-0c1db0560d27" />
                    <Object Name="M_Execute" ObjectId="4fb297bd-99b3-45b8-9db0-a39dde1b30d8" />
                    <Object Name="M_Aborting" ObjectId="d513ea01-4f59-4a93-8842-106eb97fa165" />
                  </Folder>
                </Object>
              </Folder>
              <Folder Name="template">
                <Object Name="Module" ObjectId="06152fa3-0ee8-42bb-9309-1b5f17657eed">
                  <Folder Name="public">
                    <Object Name="M_Start" ObjectId="4fffeb3f-a502-448a-801f-62a2012af7b1" />
                    <Object Name="M_Home" ObjectId="80e95931-65c8-4c90-ad00-612ca250483e" />
                    <Object Name="M_Abort" ObjectId="e5c2715c-41fc-45b3-ba5d-b082d35ede74" />
                    <Object Name="M_Hold" ObjectId="f895a567-6f19-4aaf-a19a-430ec9375429" />
                    <Object Name="M_Stop" ObjectId="10e51045-5ea3-431f-a77c-f14d9d4a03bb" />
                  </Folder>
                  <Folder Name="private">
                    <Object Name="_M_Start" ObjectId="f110705f-80e9-4c18-9b3f-432547227ce9" />
                    <Object Name="_M_Home" ObjectId="b6b75ed6-b5aa-4b31-9a1b-102168846c09" />
                  </Folder>
                  <Folder Name="protected">
                    <Object Name="M_Error" ObjectId="dbcfca92-733c-4c2e-a049-52c206183687" />
                    <Object Name="M_Reset" ObjectId="9e2db144-5b4e-459a-90c5-117bc0e5923a" />
                  </Folder>
                  <Object Name="PropCurrentState" ObjectId="27b1323a-18e8-4d9c-9aef-c0fccf1fee6f" />
                  <Object Name="PropBusy" ObjectId="df90aa53-7938-4729-8aeb-e73fd9721d5b" />
                  <Object Name="PropError" ObjectId="3b5ad92c-8b5a-464b-aed7-6f6699ae2429" />
                  <Object Name="PropErrDescription" ObjectId="e9dc189d-3561-4f34-8238-07f940859ee8" />
                </Object>
                <Object Name="PackML" ObjectId="6c88eb42-407a-40dd-8e49-bce1d691f0b2">
                  <Folder Name="transition">
                    <Object Name="M_Aborting" ObjectId="4ccdaadd-4d64-4496-9a92-f9d54027b3e6" />
                    <Object Name="M_Unholding" ObjectId="dd9db8d0-121c-491d-90d0-c48a6d1a9c8c" />
                    <Object Name="M_Completing" ObjectId="cdb4b4d5-ad61-48d7-8221-bee63d28f73e" />
                    <Object Name="M_Stopping" ObjectId="2a358bb2-c1f6-4a20-a8a4-b1f9186be16b" />
                    <Object Name="M_Clearing" ObjectId="d14434d0-0c21-4aeb-9ac0-ef015f60a253" />
                    <Object Name="M_Resetting" ObjectId="265b97c8-7d33-479a-a049-5413df07bbc0" />
                    <Object Name="M_Suspending" ObjectId="257ce55a-16e1-49a8-a988-70ddadfd556f" />
                    <Object Name="M_Starting" ObjectId="a57fa019-c6bc-4a1b-8d70-a7fd715b2a98" />
                    <Object Name="M_UnSuspending" ObjectId="92d160d6-e55f-49b6-aa9a-db1194f2c385" />
                    <Object Name="M_Holding" ObjectId="d0d2c3a0-c22e-4c6e-a69f-299695504931" />
                  </Folder>
                  <Folder Name="wait">
                    <Object Name="M_Aborted" ObjectId="1e7d8b79-5c9e-4f82-bbe2-4b62642b61c9" />
                    <Object Name="M_Held" ObjectId="e494ada4-57c2-4376-ac70-cda2694b60af" />
                    <Object Name="M_Stopped" ObjectId="9d740f8a-4f3e-49bb-91d2-33529475924d" />
                    <Object Name="M_Complete" ObjectId="a8d6ce7e-80d8-47c9-bc1d-450f6d3deda6" />
                    <Object Name="M_Suspended" ObjectId="612d50dc-ee92-4ff0-ae48-fb8d6eb3faaa" />
                    <Object Name="M_Idle" ObjectId="f7cfba5a-2f6d-4bb5-a7c7-24bbbea33671" />
                  </Folder>
                  <Object Name="M_SetPackML" ObjectId="39ef47a6-266e-47c8-9b77-da56debc7f4c" />
                  <Object Name="M_StateComplete" ObjectId="92d33e74-f074-4855-bfb9-ab287dcecae4" />
                  <Object Name="M_Execute" ObjectId="6b6aa070-27a5-40ba-b87d-289ef11ff0ed" />
                </Object>
                <Object Name="ITFModule" ObjectId="83e2f220-b628-4cc1-8425-5ccb3ca1431d">
                  <Object Name="M_Start" ObjectId="ede511b9-4a8a-4fd7-9a81-92329944db01" />
                  <Object Name="M_Stop" ObjectId="b5172065-9e2b-4628-992b-67cbdd66121e" />
                  <Object Name="M_Home" ObjectId="fa5ae12d-e278-43b8-b9fb-522a2f8363df" />
                  <Object Name="M_Abort" ObjectId="d4b36388-2c40-4a2a-840c-a7558cccf32c" />
                  <Object Name="M_Hold" ObjectId="74dca715-0832-4e57-bd11-fa5482a40ca4" />
                  <Object Name="PropCurrentState" ObjectId="4900066d-af26-4295-98da-8b49be553787" />
                  <Object Name="PropBusy" ObjectId="826777bf-f2fe-40ca-a5f3-f2f24fef4c48" />
                  <Object Name="PropError" ObjectId="8b3b149d-5bc9-492d-bf03-7c656df23d5f" />
                  <Object Name="PropErrDescription" ObjectId="c91c07e4-f8e0-4585-a6d3-d7b49542a264" />
                </Object>
              </Folder>
              <Folder Name="varset">
                <Object Name="ParseVarSetCmd" ObjectId="21a45979-23a6-4d05-8c5e-026456e22047" />
                <Object Name="VarSetCmdProcessor" ObjectId="4e6d31f4-1f5e-495c-b2c6-1fabb531ce1d">
                  <Folder Name="protected">
                    <Object Name="M_SetPackML" ObjectId="68d991e6-dbe4-463a-80e0-5f3da08333d1" />
                    <Object Name="M_Complete" ObjectId="130f8bcb-8a65-424f-bc15-3fc7e753edde" />
                    <Object Name="M_Starting" ObjectId="2949ddea-6613-413b-8ae7-28086e6ca171" />
                    <Object Name="M_Execute" ObjectId="f570903b-8d82-43ce-845d-3b6445cd6365" />
                  </Folder>
                </Object>
                <Object Name="BuildVarSetCmd" ObjectId="464f3abe-fbad-44ed-ab93-0358a4edadad" />
                <Object Name="ST_VarSetCmd" ObjectId="0b1a37a4-4123-4a33-84fb-db1ab5afd1a7" />
              </Folder>
              <Object Name="F_SplitCmd" ObjectId="4ffeb092-e2fe-4508-9822-2d3197400b13" />
              <Folder Name="logic">
                <Object Name="LogicCmdProcessor" ObjectId="ef05d0a0-faef-4d26-ad80-b37bf095bfda">
                  <Folder Name="protected">
                    <Object Name="M_SetPackML" ObjectId="8ca4de4a-aa41-4055-81ee-9c69366d3914" />
                    <Object Name="M_Complete" ObjectId="b9caab7f-1bc9-4e01-ad9e-5992be1f9d70" />
                    <Object Name="M_Execute" ObjectId="5c7eb861-0692-458a-9941-920dd2879e58" />
                    <Object Name="M_Starting" ObjectId="aedebc1a-7039-4685-98ce-1d471deca595" />
                  </Folder>
                </Object>
                <Object Name="ST_LogicCmdIO" ObjectId="d9e4da03-9627-4669-97eb-9d4d80e11f49" />
                <Object Name="ParseLogicCmd" ObjectId="94719e33-3b96-48b6-b30b-137cf4b2830f" />
                <Object Name="BuildLogicCmd" ObjectId="c913c794-b56e-4d94-b465-42dec1dfd0be" />
                <Object Name="ST_LogicCmd" ObjectId="c4e12c65-0b92-43d3-a6f5-ab4569642ec6" />
              </Folder>
              <Object Name="F_AddElement" ObjectId="40f6ab40-9306-42a3-9cf6-d7249218b202" />
              <Object Name="F_RoundLreal" ObjectId="6e4b5325-49a6-45c7-a436-b44a2066c3ea" />
            </Folder>
            <Folder Name="GVL">
              <Object Name="GVL" ObjectId="1430d1bd-aa92-442c-bf72-190d0e907494" />
              <Object Name="PersistentVars" ObjectId="3ec4e751-fd63-4486-9e96-20e1d2f269ab" />
            </Folder>
            <Folder Name="DUT">
              <Object Name="DUT_Command" ObjectId="bc90f47c-5d1d-4a76-b85b-4fab785a8038" />
              <Object Name="DUT_Program" ObjectId="6dbc7d5e-b88c-421e-a648-117a087040e6" />
              <Object Name="DUT_StoredPosition" ObjectId="66e85fd8-6344-4340-a216-0e3ccb4605b3" />
              <Object Name="DUT_VisionRegister" ObjectId="183abbbc-75ca-4f97-a156-9832c2bf8b79" />
              <Object Name="DUT_Flags" ObjectId="22f963af-e04a-45ab-913c-8ad1ec5e38d9" />
            </Folder>
          </Object>
          <Object Name="SoftMotion General Axis Pool" ObjectId="fc630667-0317-4bc3-b02d-1f3af074bcd7">
            <Object Name="SM_Drive_PosControl_J1" ObjectId="ea5425f8-6865-4929-8ce6-5dc4d6d3dc5e" />
            <Object Name="SM_Drive_PosControl_J2" ObjectId="f766e900-5390-4dbe-b5d5-456b0a97d174" />
            <Object Name="SM_Drive_PosControl_J3" ObjectId="fac32d5d-3aea-4666-a5e5-5873ea0cd436" />
            <Object Name="SM_Drive_PosControl_J4" ObjectId="da228668-0441-4fbf-bc36-c60a4adec10a" />
            <Object Name="SM_Drive_PosControl_J5" ObjectId="8e6e96ef-66e6-4d72-a717-6ed80b7f1646" />
            <Object Name="SM_Drive_PosControl_J6" ObjectId="90c3ab61-cd9a-4b37-bdc1-631c2a20f394" />
          </Object>
          <Object Name="&lt;Empty&gt;" ObjectId="1d76930d-dbe3-4129-812f-57306b665b04" />
          <Object Name="Onewire" ObjectId="aeb0c6fd-1757-44be-b1c8-b73c4e8df34b" />
          <Object Name="Camera device" ObjectId="4da383cb-6693-45c8-bc67-395a66a39986">
            <Object Name="&lt;Empty&gt;" ObjectId="b91cf46f-75cf-4d77-9b22-4d133d910165" />
          </Object>
          <Object Name="SPI" ObjectId="ab0b7e43-88f3-412a-8ad5-c024c7dfcf48" />
          <Object Name="I²C" ObjectId="c2edcee5-4e0d-445e-b13d-3228dc92e777">
            <Object Name="I2C_master" ObjectId="0d68f8a7-0c8b-4cf2-b293-138cca1d9584" />
            <Object Name="I2C_master_1" ObjectId="106bf2de-1790-4fa9-beb8-3ed0788c8a1e">
              <Object Name="Adafruit_PWM" ObjectId="99583010-7870-4ffd-80d0-4fcc781d22de">
                <Object Name="AdafruitPwm01" ObjectId="2182a2d1-7df5-495b-8c4b-608638e832d5" />
                <Object Name="AdafruitPwm02" ObjectId="e805981a-0706-4f9f-a4b4-7a048e65c79f" />
              </Object>
            </Object>
          </Object>
        </Object>
        <Object Name="Library Manager" ObjectId="7947b9f0-2ec0-46cb-a7e5-f8f763be16e6" />
        <Object Name="Project Information" ObjectId="11c0fc3a-9bcf-4dd8-ac38-efb93363e521" />
      </ProjectStructure>
    </data>
  </addData>
</project>